;;; TOOL: run-interp
;;; ARGS*: -v --enable-threads --enable-saturating-float-to-int --enable-sign-extension --enable-simd --enable-tail-call --enable-bulk-memory
;;; ARGS1: --host-print

(module
  (import "host" "print" (func $print (param i32)))

  (type $empty (func))
  (func $empty)
  (memory 1 1 shared)
  (table anyfunc (elem $empty $empty))
  (global $g (mut i32) (i32.const 0))
  (data passive "")
  (elem passive funcref)

  (; 0x00 ;) (func (export "unreachable") unreachable)
  (; 0x01 ;) ;; nop       -- not generated in interpreter
  (; 0x02 ;) ;; block     -- not generated in interpreter
  (; 0x03 ;) ;; loop      -- not generated in interpreter
  (; 0x04 ;) ;; if        -- not generated in interpreter
  (; 0x05 ;) ;; else      -- not generated in interpreter
  (; 0x06 ;) ;; try       -- not implemented
  (; 0x07 ;) ;; catch     -- not implemented
  (; 0x08 ;) ;; throw     -- not implemented
  (; 0x09 ;) ;; rethrow   -- not implemented
  (; 0x0a ;) ;; catch_all -- not implemented
  (; 0x0b ;) ;; end       -- not generated in interpreter
  (; 0x0c ;) (func (export "br") br 0)
  (; 0x0d ;) ;; 0x0d br_if  ;; not generated in interpreter
  (; 0x0e ;) (func (export "br_table") i32.const 1 br_table 0)
  (; 0x0f ;) (func (export "return") return)
  (; 0x10 ;) (func (export "call") call $empty)
  (; 0x11 ;) (func (export "call_indirect") i32.const 1 call_indirect (type $empty))

  ;; --enable-tail-call
  (; 0x12 ;) (func (export "return_call") return_call $empty)
  (; 0x13 ;) (func (export "return_call_indirect") i32.const 1 return_call_indirect (type $empty))

  (; 0x1a ;) (func (export "drop") i32.const 1 drop)
  (; 0x1b ;) (func (export "select") i32.const 1 i32.const 2 i32.const 3 select drop)
  (; 0x20 ;) (func (export "get_local") (local i32) get_local 0 drop)
  (; 0x21 ;) (func (export "set_local") (local i32) i32.const 1 set_local 0)
  (; 0x22 ;) (func (export "tee_local") (local i32) i32.const 1 tee_local 0 drop)
  (; 0x23 ;) (func (export "get_global") get_global 0 drop)
  (; 0x24 ;) (func (export "set_global") i32.const 1 set_global 0)
  (; 0x28 ;) (func (export "i32.load") i32.const 1 i32.load offset=2 drop)
  (; 0x29 ;) (func (export "i64.load") i32.const 1 i64.load offset=2 drop)
  (; 0x2a ;) (func (export "f32.load") i32.const 1 f32.load offset=2 drop)
  (; 0x2b ;) (func (export "f64.load") i32.const 1 f64.load offset=2 drop)
  (; 0x2c ;) (func (export "i32.load8_s") i32.const 1 i32.load8_s offset=2 drop)
  (; 0x2d ;) (func (export "i32.load8_u") i32.const 1 i32.load8_u offset=2 drop)
  (; 0x2e ;) (func (export "i32.load16_s") i32.const 1 i32.load16_s offset=2 drop)
  (; 0x2f ;) (func (export "i32.load16_u") i32.const 1 i32.load16_u offset=2 drop)
  (; 0x30 ;) (func (export "i64.load8_s") i32.const 1 i64.load8_s offset=2 drop)
  (; 0x31 ;) (func (export "i64.load8_u") i32.const 1 i64.load8_u offset=2 drop)
  (; 0x32 ;) (func (export "i64.load16_s") i32.const 1 i64.load16_s offset=2 drop)
  (; 0x33 ;) (func (export "i64.load16_u") i32.const 1 i64.load16_u offset=2 drop)
  (; 0x34 ;) (func (export "i64.load32_s") i32.const 1 i64.load32_s offset=2 drop)
  (; 0x35 ;) (func (export "i64.load32_u") i32.const 1 i64.load32_u offset=2 drop)
  (; 0x36 ;) (func (export "i32.store") i32.const 1 i32.const 2 i32.store offset=2)
  (; 0x37 ;) (func (export "i64.store") i32.const 1 i64.const 2 i64.store offset=2)
  (; 0x38 ;) (func (export "f32.store") i32.const 1 f32.const 2 f32.store offset=2)
  (; 0x39 ;) (func (export "f64.store") i32.const 1 f64.const 2 f64.store offset=2)
  (; 0x3a ;) (func (export "i32.store8") i32.const 1 i32.const 2 i32.store8 offset=2)
  (; 0x3b ;) (func (export "i32.store16") i32.const 1 i32.const 2 i32.store16 offset=2)
  (; 0x3c ;) (func (export "i64.store8") i32.const 1 i64.const 2 i64.store8 offset=2)
  (; 0x3d ;) (func (export "i64.store16") i32.const 1 i64.const 2 i64.store16 offset=2)
  (; 0x3e ;) (func (export "i64.store32") i32.const 1 i64.const 2 i64.store32 offset=2)
  (; 0x3f ;) (func (export "current_memory") current_memory drop)
  (; 0x40 ;) (func (export "grow_memory") i32.const 1 grow_memory drop)
  (; 0x41 ;) (func (export "i32.const") i32.const 1 drop)
  (; 0x42 ;) (func (export "i64.const") i64.const 1 drop)
  (; 0x43 ;) (func (export "f32.const") f32.const 1 drop)
  (; 0x44 ;) (func (export "f64.const") f64.const 1 drop)
  (; 0x45 ;) (func (export "i32.eqz") i32.const 1 i32.eqz drop)
  (; 0x46 ;) (func (export "i32.eq") i32.const 1 i32.const 2 i32.eq drop)
  (; 0x47 ;) (func (export "i32.ne") i32.const 1 i32.const 2 i32.ne drop)
  (; 0x48 ;) (func (export "i32.lt_s") i32.const 1 i32.const 2 i32.lt_s drop)
  (; 0x49 ;) (func (export "i32.lt_u") i32.const 1 i32.const 2 i32.lt_u drop)
  (; 0x4a ;) (func (export "i32.gt_s") i32.const 1 i32.const 2 i32.gt_s drop)
  (; 0x4b ;) (func (export "i32.gt_u") i32.const 1 i32.const 2 i32.gt_u drop)
  (; 0x4c ;) (func (export "i32.le_s") i32.const 1 i32.const 2 i32.le_s drop)
  (; 0x4d ;) (func (export "i32.le_u") i32.const 1 i32.const 2 i32.le_u drop)
  (; 0x4e ;) (func (export "i32.ge_s") i32.const 1 i32.const 2 i32.ge_s drop)
  (; 0x4f ;) (func (export "i32.ge_u") i32.const 1 i32.const 2 i32.ge_u drop)
  (; 0x50 ;) (func (export "i64.eqz") i64.const 1 i64.eqz drop)
  (; 0x51 ;) (func (export "i64.eq") i64.const 1 i64.const 2 i64.eq drop)
  (; 0x52 ;) (func (export "i64.ne") i64.const 1 i64.const 2 i64.ne drop)
  (; 0x53 ;) (func (export "i64.lt_s") i64.const 1 i64.const 2 i64.lt_s drop)
  (; 0x54 ;) (func (export "i64.lt_u") i64.const 1 i64.const 2 i64.lt_u drop)
  (; 0x55 ;) (func (export "i64.gt_s") i64.const 1 i64.const 2 i64.gt_s drop)
  (; 0x56 ;) (func (export "i64.gt_u") i64.const 1 i64.const 2 i64.gt_u drop)
  (; 0x57 ;) (func (export "i64.le_s") i64.const 1 i64.const 2 i64.le_s drop)
  (; 0x58 ;) (func (export "i64.le_u") i64.const 1 i64.const 2 i64.le_u drop)
  (; 0x59 ;) (func (export "i64.ge_s") i64.const 1 i64.const 2 i64.ge_s drop)
  (; 0x5a ;) (func (export "i64.ge_u") i64.const 1 i64.const 2 i64.ge_u drop)
  (; 0x5b ;) (func (export "f32.eq") f32.const 1 f32.const 2 f32.eq drop)
  (; 0x5c ;) (func (export "f32.ne") f32.const 1 f32.const 2 f32.ne drop)
  (; 0x5d ;) (func (export "f32.lt") f32.const 1 f32.const 2 f32.lt drop)
  (; 0x5e ;) (func (export "f32.gt") f32.const 1 f32.const 2 f32.gt drop)
  (; 0x5f ;) (func (export "f32.le") f32.const 1 f32.const 2 f32.le drop)
  (; 0x60 ;) (func (export "f32.ge") f32.const 1 f32.const 2 f32.ge drop)
  (; 0x61 ;) (func (export "f64.eq") f64.const 1 f64.const 2 f64.eq drop)
  (; 0x62 ;) (func (export "f64.ne") f64.const 1 f64.const 2 f64.ne drop)
  (; 0x63 ;) (func (export "f64.lt") f64.const 1 f64.const 2 f64.lt drop)
  (; 0x64 ;) (func (export "f64.gt") f64.const 1 f64.const 2 f64.gt drop)
  (; 0x65 ;) (func (export "f64.le") f64.const 1 f64.const 2 f64.le drop)
  (; 0x66 ;) (func (export "f64.ge") f64.const 1 f64.const 2 f64.ge drop)
  (; 0x67 ;) (func (export "i32.clz") i32.const 1 i32.clz drop)
  (; 0x68 ;) (func (export "i32.ctz") i32.const 1 i32.ctz drop)
  (; 0x69 ;) (func (export "i32.popcnt") i32.const 1 i32.popcnt drop)
  (; 0x6a ;) (func (export "i32.add") i32.const 1 i32.const 2 i32.add drop)
  (; 0x6b ;) (func (export "i32.sub") i32.const 1 i32.const 2 i32.sub drop)
  (; 0x6c ;) (func (export "i32.mul") i32.const 1 i32.const 2 i32.mul drop)
  (; 0x6d ;) (func (export "i32.div_s") i32.const 1 i32.const 2 i32.div_s drop)
  (; 0x6e ;) (func (export "i32.div_u") i32.const 1 i32.const 2 i32.div_u drop)
  (; 0x6f ;) (func (export "i32.rem_s") i32.const 1 i32.const 2 i32.rem_s drop)
  (; 0x70 ;) (func (export "i32.rem_u") i32.const 1 i32.const 2 i32.rem_u drop)
  (; 0x71 ;) (func (export "i32.and") i32.const 1 i32.const 2 i32.and drop)
  (; 0x72 ;) (func (export "i32.or") i32.const 1 i32.const 2 i32.or drop)
  (; 0x73 ;) (func (export "i32.xor") i32.const 1 i32.const 2 i32.xor drop)
  (; 0x74 ;) (func (export "i32.shl") i32.const 1 i32.const 2 i32.shl drop)
  (; 0x75 ;) (func (export "i32.shr_s") i32.const 1 i32.const 2 i32.shr_s drop)
  (; 0x76 ;) (func (export "i32.shr_u") i32.const 1 i32.const 2 i32.shr_u drop)
  (; 0x77 ;) (func (export "i32.rotl") i32.const 1 i32.const 2 i32.rotl drop)
  (; 0x78 ;) (func (export "i32.rotr") i32.const 1 i32.const 2 i32.rotr drop)
  (; 0x79 ;) (func (export "i64.clz") i64.const 1 i64.clz drop)
  (; 0x7a ;) (func (export "i64.ctz") i64.const 1 i64.ctz drop)
  (; 0x7b ;) (func (export "i64.popcnt") i64.const 1 i64.popcnt drop)
  (; 0x7c ;) (func (export "i64.add") i64.const 1 i64.const 2 i64.add drop)
  (; 0x7d ;) (func (export "i64.sub") i64.const 1 i64.const 2 i64.sub drop)
  (; 0x7e ;) (func (export "i64.mul") i64.const 1 i64.const 2 i64.mul drop)
  (; 0x7f ;) (func (export "i64.div_s") i64.const 1 i64.const 2 i64.div_s drop)
  (; 0x80 ;) (func (export "i64.div_u") i64.const 1 i64.const 2 i64.div_u drop)
  (; 0x81 ;) (func (export "i64.rem_s") i64.const 1 i64.const 2 i64.rem_s drop)
  (; 0x82 ;) (func (export "i64.rem_u") i64.const 1 i64.const 2 i64.rem_u drop)
  (; 0x83 ;) (func (export "i64.and") i64.const 1 i64.const 2 i64.and drop)
  (; 0x84 ;) (func (export "i64.or") i64.const 1 i64.const 2 i64.or drop)
  (; 0x85 ;) (func (export "i64.xor") i64.const 1 i64.const 2 i64.xor drop)
  (; 0x86 ;) (func (export "i64.shl") i64.const 1 i64.const 2 i64.shl drop)
  (; 0x87 ;) (func (export "i64.shr_s") i64.const 1 i64.const 2 i64.shr_s drop)
  (; 0x88 ;) (func (export "i64.shr_u") i64.const 1 i64.const 2 i64.shr_u drop)
  (; 0x89 ;) (func (export "i64.rotl") i64.const 1 i64.const 2 i64.rotl drop)
  (; 0x8a ;) (func (export "i64.rotr") i64.const 1 i64.const 2 i64.rotr drop)
  (; 0x8b ;) (func (export "f32.abs") f32.const 1 f32.abs drop)
  (; 0x8c ;) (func (export "f32.neg") f32.const 1 f32.neg drop)
  (; 0x8d ;) (func (export "f32.ceil") f32.const 1 f32.ceil drop)
  (; 0x8e ;) (func (export "f32.floor") f32.const 1 f32.floor drop)
  (; 0x8f ;) (func (export "f32.trunc") f32.const 1 f32.trunc drop)
  (; 0x90 ;) (func (export "f32.nearest") f32.const 1 f32.nearest drop)
  (; 0x91 ;) (func (export "f32.sqrt") f32.const 1 f32.sqrt drop)
  (; 0x92 ;) (func (export "f32.add") f32.const 1 f32.const 2 f32.add drop)
  (; 0x93 ;) (func (export "f32.sub") f32.const 1 f32.const 2 f32.sub drop)
  (; 0x94 ;) (func (export "f32.mul") f32.const 1 f32.const 2 f32.mul drop)
  (; 0x95 ;) (func (export "f32.div") f32.const 1 f32.const 2 f32.div drop)
  (; 0x96 ;) (func (export "f32.min") f32.const 1 f32.const 2 f32.min drop)
  (; 0x97 ;) (func (export "f32.max") f32.const 1 f32.const 2 f32.max drop)
  (; 0x98 ;) (func (export "f32.copysign") f32.const 1 f32.const 2 f32.copysign drop)
  (; 0x99 ;) (func (export "f64.abs") f64.const 1 f64.abs drop)
  (; 0x9a ;) (func (export "f64.neg") f64.const 1 f64.neg drop)
  (; 0x9b ;) (func (export "f64.ceil") f64.const 1 f64.ceil drop)
  (; 0x9c ;) (func (export "f64.floor") f64.const 1 f64.floor drop)
  (; 0x9d ;) (func (export "f64.trunc") f64.const 1 f64.trunc drop)
  (; 0x9e ;) (func (export "f64.nearest") f64.const 1 f64.nearest drop)
  (; 0x9f ;) (func (export "f64.sqrt") f64.const 1 f64.sqrt drop)
  (; 0xa0 ;) (func (export "f64.add") f64.const 1 f64.const 2 f64.add drop)
  (; 0xa1 ;) (func (export "f64.sub") f64.const 1 f64.const 2 f64.sub drop)
  (; 0xa2 ;) (func (export "f64.mul") f64.const 1 f64.const 2 f64.mul drop)
  (; 0xa3 ;) (func (export "f64.div") f64.const 1 f64.const 2 f64.div drop)
  (; 0xa4 ;) (func (export "f64.min") f64.const 1 f64.const 2 f64.min drop)
  (; 0xa5 ;) (func (export "f64.max") f64.const 1 f64.const 2 f64.max drop)
  (; 0xa6 ;) (func (export "f64.copysign") f64.const 1 f64.const 2 f64.copysign drop)
  (; 0xa7 ;) (func (export "i32.wrap/i64") i64.const 1 i32.wrap/i64 drop)
  (; 0xa8 ;) (func (export "i32.trunc_s/f32") f32.const 1 i32.trunc_s/f32 drop)
  (; 0xa9 ;) (func (export "i32.trunc_u/f32") f32.const 1 i32.trunc_u/f32 drop)
  (; 0xaa ;) (func (export "i32.trunc_s/f64") f64.const 1 i32.trunc_s/f64 drop)
  (; 0xab ;) (func (export "i32.trunc_u/f64") f64.const 1 i32.trunc_u/f64 drop)
  (; 0xac ;) (func (export "i64.extend_s/i32") i32.const 1 i64.extend_s/i32 drop)
  (; 0xad ;) (func (export "i64.extend_u/i32") i32.const 1 i64.extend_u/i32 drop)
  (; 0xae ;) (func (export "i64.trunc_s/f32") f32.const 1 i64.trunc_s/f32 drop)
  (; 0xaf ;) (func (export "i64.trunc_u/f32") f32.const 1 i64.trunc_u/f32 drop)
  (; 0xb0 ;) (func (export "i64.trunc_s/f64") f64.const 1 i64.trunc_s/f64 drop)
  (; 0xb1 ;) (func (export "i64.trunc_u/f64") f64.const 1 i64.trunc_u/f64 drop)
  (; 0xb2 ;) (func (export "f32.convert_s/i32") i32.const 1 f32.convert_s/i32 drop)
  (; 0xb3 ;) (func (export "f32.convert_u/i32") i32.const 1 f32.convert_u/i32 drop)
  (; 0xb4 ;) (func (export "f32.convert_s/i64") i64.const 1 f32.convert_s/i64 drop)
  (; 0xb5 ;) (func (export "f32.convert_u/i64") i64.const 1 f32.convert_u/i64 drop)
  (; 0xb6 ;) (func (export "f32.demote/f64") f64.const 1 f32.demote/f64 drop)
  (; 0xb7 ;) (func (export "f64.convert_s/i32") i32.const 1 f64.convert_s/i32 drop)
  (; 0xb8 ;) (func (export "f64.convert_u/i32") i32.const 1 f64.convert_u/i32 drop)
  (; 0xb9 ;) (func (export "f64.convert_s/i64") i64.const 1 f64.convert_s/i64 drop)
  (; 0xba ;) (func (export "f64.convert_u/i64") i64.const 1 f64.convert_u/i64 drop)
  (; 0xbb ;) (func (export "f64.promote/f32") f32.const 1 f64.promote/f32 drop)
  (; 0xbc ;) (func (export "i32.reinterpret/f32") i32.const 1 f32.reinterpret/i32 drop)
  (; 0xbd ;) (func (export "f32.reinterpret/i32") f32.const 1 i32.reinterpret/f32 drop)
  (; 0xbe ;) (func (export "i64.reinterpret/f64") i64.const 1 f64.reinterpret/i64 drop)
  (; 0xbf ;) (func (export "f64.reinterpret/i64") f64.const 1 i64.reinterpret/f64 drop)

  ;; --enable-sign-extension
  (; 0xc0 ;) (func (export "i32.extend8_s") i32.const 1 i32.extend8_s drop)
  (; 0xc1 ;) (func (export "i32.extend16_s") i32.const 1 i32.extend16_s drop)
  (; 0xc2 ;) (func (export "i64.extend8_s") i64.const 1 i64.extend8_s drop)
  (; 0xc3 ;) (func (export "i64.extend16_s") i64.const 1 i64.extend16_s drop)
  (; 0xc4 ;) (func (export "i64.extend32_s") i64.const 1 i64.extend32_s drop)

  ;; Interpreter opcodes
  (; 0xe0 ;) (func (export "alloca") (local i32))
  (; 0xe1 ;) (func (export "br_unless") i32.const 1 br_if 0)
  (; 0xe2 ;) (func (export "call_host") i32.const 1 call $print)
  (; 0xe3 ;) (func (export "data") i32.const 1 br_table 0)
  (; 0xe4 ;) (func (export "drop_keep") block (result i32) i32.const 1 i32.const 2 br 0 end drop)

  ;; --enable-saturating-float-to-int
  (; 0xfc 0x00 ;) (func (export "i32.trunc_s:sat/f32") f32.const 1 i32.trunc_s:sat/f32 drop)
  (; 0xfc 0x01 ;) (func (export "i32.trunc_u:sat/f32") f32.const 1 i32.trunc_u:sat/f32 drop)
  (; 0xfc 0x02 ;) (func (export "i32.trunc_s:sat/f64") f64.const 1 i32.trunc_s:sat/f64 drop)
  (; 0xfc 0x03 ;) (func (export "i32.trunc_u:sat/f64") f64.const 1 i32.trunc_u:sat/f64 drop)
  (; 0xfc 0x04 ;) (func (export "i64.trunc_s:sat/f32") f32.const 1 i64.trunc_s:sat/f32 drop)
  (; 0xfc 0x05 ;) (func (export "i64.trunc_u:sat/f32") f32.const 1 i64.trunc_u:sat/f32 drop)
  (; 0xfc 0x06 ;) (func (export "i64.trunc_s:sat/f64") f64.const 1 i64.trunc_s:sat/f64 drop)
  (; 0xfc 0x07 ;) (func (export "i64.trunc_u:sat/f64") f64.const 1 i64.trunc_u:sat/f64 drop)

  (; 0xfc 0x08 ;) (func (export "memory.init") i32.const 1 i32.const 2 i32.const 3 memory.init 0)
  (; 0xfc 0x09 ;) (func (export "data.drop") data.drop 0)
  (; 0xfc 0x0a ;) (func (export "memory.copy") i32.const 1 i32.const 2 i32.const 3 memory.copy)
  (; 0xfc 0x0b ;) (func (export "memory.fill") i32.const 1 i32.const 2 i32.const 3 memory.fill)
  (; 0xfc 0x0c ;) (func (export "table.init") i32.const 1 i32.const 2 i32.const 3 table.init 0)
  (; 0xfc 0x0d ;) (func (export "elem.drop") elem.drop 0)
  (; 0xfc 0x0e ;) (func (export "table.copy") i32.const 1 i32.const 2 i32.const 3 table.copy)

  ;; --enable-simd
  (; 0xfd 0x00 ;) (func (export "v128.load") i32.const 1 v128.load offset=3 drop)
  (; 0xfd 0x01 ;) (func (export "v128.store") i32.const 1 v128.const i32x4 1 1 1 1 v128.store offset=3)
  (; 0xfd 0x02 ;) (func (export "v128.const") v128.const i32x4 1 1 1 1 drop)
  (; 0xfd 0x03 ;) (func (export "v8x16.shuffle") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 v8x16.shuffle 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 drop)
  (; 0xfd 0x04 ;) (func (export "i8x16.splat") i32.const 1 i8x16.splat drop)
  (; 0xfd 0x05 ;) (func (export "i8x16.extract_lane_s") v128.const i32x4 1 1 1 1 i8x16.extract_lane_s 15 drop)
  (; 0xfd 0x06 ;) (func (export "i8x16.extract_lane_u") v128.const i32x4 1 1 1 1 i8x16.extract_lane_u 15 drop)
  (; 0xfd 0x07 ;) (func (export "i8x16.replace_lane") v128.const i32x4 1 1 1 1 i32.const 0 i8x16.replace_lane 15 drop)
  (; 0xfd 0x08 ;) (func (export "i16x8.splat") i32.const 1 i16x8.splat drop)
  (; 0xfd 0x09 ;) (func (export "i16x8.extract_lane_s") v128.const i32x4 1 1 1 1 i16x8.extract_lane_s 7 drop)
  (; 0xfd 0x0a ;) (func (export "i16x8.extract_lane_u") v128.const i32x4 1 1 1 1 i16x8.extract_lane_u 7 drop)
  (; 0xfd 0x0b ;) (func (export "i16x8.replace_lane") v128.const i32x4 1 1 1 1 i32.const 0 i16x8.replace_lane 7 drop)
  (; 0xfd 0x0c ;) (func (export "i32x4.splat") i32.const 1 i32x4.splat drop)
  (; 0xfd 0x0d ;) (func (export "i32x4.extract_lane") v128.const i32x4 1 1 1 1 i32x4.extract_lane 3 drop)
  (; 0xfd 0x0e ;) (func (export "i32x4.replace_lane") v128.const i32x4 1 1 1 1 i32.const 0 i32x4.replace_lane 3 drop)
  (; 0xfd 0x0f ;) (func (export "i64x2.splat") i64.const 1 i64x2.splat drop)
  (; 0xfd 0x10 ;) (func (export "i64x2.extract_lane") v128.const i32x4 1 1 1 1 i64x2.extract_lane 1 drop)
  (; 0xfd 0x11 ;) (func (export "i64x2.replace_lane") v128.const i32x4 1 1 1 1 i64.const 0 i64x2.replace_lane 1 drop)
  (; 0xfd 0x12 ;) (func (export "f32x4.splat") f32.const 1 f32x4.splat drop)
  (; 0xfd 0x13 ;) (func (export "f32x4.extract_lane") v128.const i32x4 1 1 1 1 f32x4.extract_lane 3 drop)
  (; 0xfd 0x14 ;) (func (export "f32x4.replace_lane") v128.const i32x4 1 1 1 1 f32.const 0 f32x4.replace_lane 3 drop)
  (; 0xfd 0x15 ;) (func (export "f64x2.splat") f64.const 1 f64x2.splat drop)
  (; 0xfd 0x16 ;) (func (export "f64x2.extract_lane") v128.const i32x4 1 1 1 1 f64x2.extract_lane 1 drop)
  (; 0xfd 0x17 ;) (func (export "f64x2.replace_lane") v128.const i32x4 1 1 1 1 f64.const 0 f64x2.replace_lane 1 drop)
  (; 0xfd 0x18 ;) (func (export "i8x16.eq") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.eq drop)
  (; 0xfd 0x19 ;) (func (export "i8x16.ne") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.ne drop)
  (; 0xfd 0x1a ;) (func (export "i8x16.lt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.lt_s drop)
  (; 0xfd 0x1b ;) (func (export "i8x16.lt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.lt_u drop)
  (; 0xfd 0x1c ;) (func (export "i8x16.gt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.gt_s drop)
  (; 0xfd 0x1d ;) (func (export "i8x16.gt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.gt_u drop)
  (; 0xfd 0x1e ;) (func (export "i8x16.le_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.le_s drop)
  (; 0xfd 0x1f ;) (func (export "i8x16.le_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.le_u drop)
  (; 0xfd 0x20 ;) (func (export "i8x16.ge_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.ge_s drop)
  (; 0xfd 0x21 ;) (func (export "i8x16.ge_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.ge_u drop)
  (; 0xfd 0x22 ;) (func (export "i16x8.eq") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.eq drop)
  (; 0xfd 0x23 ;) (func (export "i16x8.ne") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.ne drop)
  (; 0xfd 0x24 ;) (func (export "i16x8.lt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.lt_s drop)
  (; 0xfd 0x25 ;) (func (export "i16x8.lt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.lt_u drop)
  (; 0xfd 0x26 ;) (func (export "i16x8.gt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.gt_s drop)
  (; 0xfd 0x27 ;) (func (export "i16x8.gt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.gt_u drop)
  (; 0xfd 0x28 ;) (func (export "i16x8.le_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.le_s drop)
  (; 0xfd 0x29 ;) (func (export "i16x8.le_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.le_u drop)
  (; 0xfd 0x2a ;) (func (export "i16x8.ge_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.ge_s drop)
  (; 0xfd 0x2b ;) (func (export "i16x8.ge_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.ge_u drop)
  (; 0xfd 0x2c ;) (func (export "i32x4.eq") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.eq drop)
  (; 0xfd 0x2d ;) (func (export "i32x4.ne") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.ne drop)
  (; 0xfd 0x2e ;) (func (export "i32x4.lt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.lt_s drop)
  (; 0xfd 0x2f ;) (func (export "i32x4.lt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.lt_u drop)
  (; 0xfd 0x30 ;) (func (export "i32x4.gt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.gt_s drop)
  (; 0xfd 0x31 ;) (func (export "i32x4.gt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.gt_u drop)
  (; 0xfd 0x32 ;) (func (export "i32x4.le_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.le_s drop)
  (; 0xfd 0x33 ;) (func (export "i32x4.le_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.le_u drop)
  (; 0xfd 0x34 ;) (func (export "i32x4.ge_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.ge_s drop)
  (; 0xfd 0x35 ;) (func (export "i32x4.ge_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.ge_u drop)
  (; 0xfd 0x40 ;) (func (export "f32x4.eq") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.eq drop)
  (; 0xfd 0x41 ;) (func (export "f32x4.ne") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.ne drop)
  (; 0xfd 0x42 ;) (func (export "f32x4.lt") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.lt drop)
  (; 0xfd 0x43 ;) (func (export "f32x4.gt") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.gt drop)
  (; 0xfd 0x44 ;) (func (export "f32x4.le") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.le drop)
  (; 0xfd 0x45 ;) (func (export "f32x4.ge") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.ge drop)
  (; 0xfd 0x46 ;) (func (export "f64x2.eq") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.eq drop)
  (; 0xfd 0x47 ;) (func (export "f64x2.ne") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.ne drop)
  (; 0xfd 0x48 ;) (func (export "f64x2.lt") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.lt drop)
  (; 0xfd 0x49 ;) (func (export "f64x2.gt") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.gt drop)
  (; 0xfd 0x4a ;) (func (export "f64x2.le") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.le drop)
  (; 0xfd 0x4b ;) (func (export "f64x2.ge") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.ge drop)
  (; 0xfd 0x4c ;) (func (export "v128.not") v128.const i32x4 1 1 1 1 v128.not drop)
  (; 0xfd 0x4d ;) (func (export "v128.and") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 v128.and drop)
  (; 0xfd 0x4e ;) (func (export "v128.or") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 v128.or drop)
  (; 0xfd 0x4f ;) (func (export "v128.xor") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 v128.xor drop)
  (; 0xfd 0x50 ;) (func (export "v128.bitselect") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 v128.const i32x4 3 3 3 3 v128.bitselect drop)
  (; 0xfd 0x51 ;) (func (export "i8x16.neg") v128.const i32x4 1 1 1 1 i8x16.neg drop)
  (; 0xfd 0x52 ;) (func (export "i8x16.any_true") v128.const i32x4 1 1 1 1 i8x16.any_true drop)
  (; 0xfd 0x53 ;) (func (export "i8x16.all_true") v128.const i32x4 1 1 1 1 i8x16.all_true drop)
  (; 0xfd 0x54 ;) (func (export "i8x16.shl") v128.const i32x4 1 1 1 1 i32.const 0 i8x16.shl drop)
  (; 0xfd 0x55 ;) (func (export "i8x16.shr_s") v128.const i32x4 1 1 1 1 i32.const 0 i8x16.shr_s drop)
  (; 0xfd 0x56 ;) (func (export "i8x16.shr_u") v128.const i32x4 1 1 1 1 i32.const 0 i8x16.shr_u drop)
  (; 0xfd 0x57 ;) (func (export "i8x16.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.add drop)
  (; 0xfd 0x58 ;) (func (export "i8x16.add_saturate_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.add_saturate_s drop)
  (; 0xfd 0x59 ;) (func (export "i8x16.add_saturate_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.add_saturate_u drop)
  (; 0xfd 0x5a ;) (func (export "i8x16.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.sub drop)
  (; 0xfd 0x5b ;) (func (export "i8x16.sub_saturate_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.sub_saturate_s drop)
  (; 0xfd 0x5c ;) (func (export "i8x16.sub_saturate_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.sub_saturate_u drop)
  (; 0xfd 0x5d ;) (func (export "i8x16.mul") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.mul drop)
  (; 0xfd 0x62 ;) (func (export "i16x8.neg") v128.const i32x4 1 1 1 1 i16x8.neg drop)
  (; 0xfd 0x63 ;) (func (export "i16x8.any_true") v128.const i32x4 1 1 1 1 i16x8.any_true drop)
  (; 0xfd 0x64 ;) (func (export "i16x8.all_true") v128.const i32x4 1 1 1 1 i16x8.all_true drop)
  (; 0xfd 0x65 ;) (func (export "i16x8.shl") v128.const i32x4 1 1 1 1 i32.const 0 i16x8.shl drop)
  (; 0xfd 0x66 ;) (func (export "i16x8.shr_s") v128.const i32x4 1 1 1 1 i32.const 0 i16x8.shr_s drop)
  (; 0xfd 0x67 ;) (func (export "i16x8.shr_u") v128.const i32x4 1 1 1 1 i32.const 0 i16x8.shr_u drop)
  (; 0xfd 0x68 ;) (func (export "i16x8.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.add drop)
  (; 0xfd 0x69 ;) (func (export "i16x8.add_saturate_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.add_saturate_s drop)
  (; 0xfd 0x6a ;) (func (export "i16x8.add_saturate_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.add_saturate_u drop)
  (; 0xfd 0x6b ;) (func (export "i16x8.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.sub drop)
  (; 0xfd 0x6c ;) (func (export "i16x8.sub_saturate_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.sub_saturate_s drop)
  (; 0xfd 0x6d ;) (func (export "i16x8.sub_saturate_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.sub_saturate_u drop)
  (; 0xfd 0x6e ;) (func (export "i16x8.mul") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.mul drop)
  (; 0xfd 0x73 ;) (func (export "i32x4.neg") v128.const i32x4 1 1 1 1 i32x4.neg drop)
  (; 0xfd 0x74 ;) (func (export "i32x4.any_true") v128.const i32x4 1 1 1 1 i32x4.any_true drop)
  (; 0xfd 0x75 ;) (func (export "i32x4.all_true") v128.const i32x4 1 1 1 1 i32x4.all_true drop)
  (; 0xfd 0x76 ;) (func (export "i32x4.shl") v128.const i32x4 1 1 1 1 i32.const 0 i32x4.shl drop)
  (; 0xfd 0x77 ;) (func (export "i32x4.shr_s") v128.const i32x4 1 1 1 1 i32.const 0 i32x4.shr_s drop)
  (; 0xfd 0x78 ;) (func (export "i32x4.shr_u") v128.const i32x4 1 1 1 1 i32.const 0 i32x4.shr_u drop)
  (; 0xfd 0x79 ;) (func (export "i32x4.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.add drop)
  (; 0xfd 0x7c ;) (func (export "i32x4.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.sub drop)
  (; 0xfd 0x7f ;) (func (export "i32x4.mul") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.mul drop)
  (; 0xfd 0x84 ;) (func (export "i64x2.neg") v128.const i32x4 1 1 1 1 i64x2.neg drop)
  (; 0xfd 0x85 ;) (func (export "i64x2.any_true") v128.const i32x4 1 1 1 1 i64x2.any_true drop)
  (; 0xfd 0x86 ;) (func (export "i64x2.all_true") v128.const i32x4 1 1 1 1 i64x2.all_true drop)
  (; 0xfd 0x87 ;) (func (export "i64x2.shl") v128.const i32x4 1 1 1 1 i32.const 0 i64x2.shl drop)
  (; 0xfd 0x88 ;) (func (export "i64x2.shr_s") v128.const i32x4 1 1 1 1 i32.const 0 i64x2.shr_s drop)
  (; 0xfd 0x89 ;) (func (export "i64x2.shr_u") v128.const i32x4 1 1 1 1 i32.const 0 i64x2.shr_u drop)
  (; 0xfd 0x8a ;) (func (export "i64x2.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i64x2.add drop)
  (; 0xfd 0x8d ;) (func (export "i64x2.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i64x2.sub drop)
  (; 0xfd 0x95 ;) (func (export "f32x4.abs") v128.const i32x4 1 1 1 1 f32x4.abs drop)
  (; 0xfd 0x96 ;) (func (export "f32x4.neg") v128.const i32x4 1 1 1 1 f32x4.neg drop)
  (; 0xfd 0x97 ;) (func (export "f32x4.sqrt") v128.const i32x4 1 1 1 1 f32x4.sqrt drop)
  (; 0xfd 0x9a ;) (func (export "f32x4.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.add drop)
  (; 0xfd 0x9b ;) (func (export "f32x4.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.sub drop)
  (; 0xfd 0x9c ;) (func (export "f32x4.mul") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.mul drop)
  (; 0xfd 0x9d ;) (func (export "f32x4.div") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.div drop)
  (; 0xfd 0x9e ;) (func (export "f32x4.min") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.min drop)
  (; 0xfd 0x9f ;) (func (export "f32x4.max") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.max drop)
  (; 0xfd 0xa0 ;) (func (export "f64x2.abs") v128.const i32x4 1 1 1 1 f64x2.abs drop)
  (; 0xfd 0xa1 ;) (func (export "f64x2.neg") v128.const i32x4 1 1 1 1 f64x2.neg drop)
  (; 0xfd 0xa2 ;) (func (export "f64x2.sqrt") v128.const i32x4 1 1 1 1 f64x2.sqrt drop)
  (; 0xfd 0xa5 ;) (func (export "f64x2.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.add drop)
  (; 0xfd 0xa6 ;) (func (export "f64x2.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.sub drop)
  (; 0xfd 0xa7 ;) (func (export "f64x2.mul") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.mul drop)
  (; 0xfd 0xa8 ;) (func (export "f64x2.div") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.div drop)
  (; 0xfd 0xa9 ;) (func (export "f64x2.min") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.min drop)
  (; 0xfd 0xaa ;) (func (export "f64x2.max") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.max drop)
  (; 0xfd 0xab ;) (func (export "i32x4.trunc_sat_f32x4_s") v128.const i32x4 1 1 1 1 i32x4.trunc_sat_f32x4_s drop)
  (; 0xfd 0xac ;) (func (export "i32x4.trunc_sat_f32x4_u") v128.const i32x4 1 1 1 1 i32x4.trunc_sat_f32x4_u drop)
  (; 0xfd 0xad ;) (func (export "i64x2.trunc_sat_f64x2_s") v128.const i32x4 1 1 1 1 i64x2.trunc_sat_f64x2_s drop)
  (; 0xfd 0xae ;) (func (export "i64x2.trunc_sat_f64x2_u") v128.const i32x4 1 1 1 1 i64x2.trunc_sat_f64x2_u drop)
  (; 0xfd 0xaf ;) (func (export "f32x4.convert_i32x4_s") v128.const i32x4 1 1 1 1 f32x4.convert_i32x4_s drop)
  (; 0xfd 0xb0 ;) (func (export "f32x4.convert_i32x4_u") v128.const i32x4 1 1 1 1 f32x4.convert_i32x4_u drop)
  (; 0xfd 0xb1 ;) (func (export "f64x2.convert_i64x2_s") v128.const i32x4 1 1 1 1 f64x2.convert_i64x2_s drop)
  (; 0xfd 0xb2 ;) (func (export "f64x2.convert_i64x2_u") v128.const i32x4 1 1 1 1 f64x2.convert_i64x2_u drop)

  ;; --enable-threads
  (; 0xfe 0x00 ;) (func (export "atomic.notify") i32.const 1 i32.const 2 atomic.notify offset=3 drop)
  (; 0xfe 0x01 ;) (func (export "i32.atomic.wait") i32.const 1 i32.const 2 i64.const 3 i32.atomic.wait offset=3 drop)
  (; 0xfe 0x02 ;) (func (export "i64.atomic.wait") i32.const 1 i64.const 2 i64.const 3 i64.atomic.wait offset=3 drop)
  (; 0xfe 0x10 ;) (func (export "i32.atomic.load") i32.const 1 i32.atomic.load offset=3 drop)
  (; 0xfe 0x11 ;) (func (export "i64.atomic.load") i32.const 1 i64.atomic.load offset=7 drop)
  (; 0xfe 0x12 ;) (func (export "i32.atomic.load8_u") i32.const 1 i32.atomic.load8_u offset=3 drop)
  (; 0xfe 0x13 ;) (func (export "i32.atomic.load16_u") i32.const 1 i32.atomic.load16_u offset=3 drop)
  (; 0xfe 0x14 ;) (func (export "i64.atomic.load8_u") i32.const 1 i64.atomic.load8_u offset=3 drop)
  (; 0xfe 0x15 ;) (func (export "i64.atomic.load16_u") i32.const 1 i64.atomic.load16_u offset=3 drop)
  (; 0xfe 0x16 ;) (func (export "i64.atomic.load32_u") i32.const 1 i64.atomic.load32_u offset=3 drop)
  (; 0xfe 0x17 ;) (func (export "i32.atomic.store") i32.const 1 i32.const 2 i32.atomic.store offset=3)
  (; 0xfe 0x18 ;) (func (export "i64.atomic.store") i32.const 1 i64.const 2 i64.atomic.store offset=7)
  (; 0xfe 0x19 ;) (func (export "i32.atomic.store8") i32.const 1 i32.const 2 i32.atomic.store8 offset=3)
  (; 0xfe 0x1a ;) (func (export "i32.atomic.store16") i32.const 1 i32.const 2 i32.atomic.store16 offset=3)
  (; 0xfe 0x1b ;) (func (export "i64.atomic.store8") i32.const 1 i64.const 2 i64.atomic.store8 offset=3)
  (; 0xfe 0x1c ;) (func (export "i64.atomic.store16") i32.const 1 i64.const 2 i64.atomic.store16 offset=3)
  (; 0xfe 0x1d ;) (func (export "i64.atomic.store32") i32.const 1 i64.const 2 i64.atomic.store32 offset=3)
  (; 0xfe 0x1e ;) (func (export "i32.atomic.rmw.add") i32.const 1 i32.const 2 i32.atomic.rmw.add offset=3 drop)
  (; 0xfe 0x1f ;) (func (export "i64.atomic.rmw.add") i32.const 1 i64.const 2 i64.atomic.rmw.add offset=7 drop)
  (; 0xfe 0x20 ;) (func (export "i32.atomic.rmw8.add_u") i32.const 1 i32.const 2 i32.atomic.rmw8.add_u offset=3 drop)
  (; 0xfe 0x21 ;) (func (export "i32.atomic.rmw16.add_u") i32.const 1 i32.const 2 i32.atomic.rmw16.add_u offset=3 drop)
  (; 0xfe 0x22 ;) (func (export "i64.atomic.rmw8.add_u") i32.const 1 i64.const 2 i64.atomic.rmw8.add_u offset=3 drop)
  (; 0xfe 0x23 ;) (func (export "i64.atomic.rmw16.add_u") i32.const 1 i64.const 2 i64.atomic.rmw16.add_u offset=3 drop)
  (; 0xfe 0x24 ;) (func (export "i64.atomic.rmw32.add_u") i32.const 1 i64.const 2 i64.atomic.rmw32.add_u offset=3 drop)
  (; 0xfe 0x25 ;) (func (export "i32.atomic.rmw.sub") i32.const 1 i32.const 2 i32.atomic.rmw.sub offset=3 drop)
  (; 0xfe 0x26 ;) (func (export "i64.atomic.rmw.sub") i32.const 1 i64.const 2 i64.atomic.rmw.sub offset=7 drop)
  (; 0xfe 0x27 ;) (func (export "i32.atomic.rmw8.sub_u") i32.const 1 i32.const 2 i32.atomic.rmw8.sub_u offset=3 drop)
  (; 0xfe 0x28 ;) (func (export "i32.atomic.rmw16.sub_u") i32.const 1 i32.const 2 i32.atomic.rmw16.sub_u offset=3 drop)
  (; 0xfe 0x29 ;) (func (export "i64.atomic.rmw8.sub_u") i32.const 1 i64.const 2 i64.atomic.rmw8.sub_u offset=3 drop)
  (; 0xfe 0x2a ;) (func (export "i64.atomic.rmw16.sub_u") i32.const 1 i64.const 2 i64.atomic.rmw16.sub_u offset=3 drop)
  (; 0xfe 0x2b ;) (func (export "i64.atomic.rmw32.sub_u") i32.const 1 i64.const 2 i64.atomic.rmw32.sub_u offset=3 drop)
  (; 0xfe 0x2c ;) (func (export "i32.atomic.rmw.and") i32.const 1 i32.const 2 i32.atomic.rmw.and offset=3 drop)
  (; 0xfe 0x2d ;) (func (export "i64.atomic.rmw.and") i32.const 1 i64.const 2 i64.atomic.rmw.and offset=7 drop)
  (; 0xfe 0x2e ;) (func (export "i32.atomic.rmw8.and_u") i32.const 1 i32.const 2 i32.atomic.rmw8.and_u offset=3 drop)
  (; 0xfe 0x2f ;) (func (export "i32.atomic.rmw16.and_u") i32.const 1 i32.const 2 i32.atomic.rmw16.and_u offset=3 drop)
  (; 0xfe 0x30 ;) (func (export "i64.atomic.rmw8.and_u") i32.const 1 i64.const 2 i64.atomic.rmw8.and_u offset=3 drop)
  (; 0xfe 0x31 ;) (func (export "i64.atomic.rmw16.and_u") i32.const 1 i64.const 2 i64.atomic.rmw16.and_u offset=3 drop)
  (; 0xfe 0x32 ;) (func (export "i64.atomic.rmw32.and_u") i32.const 1 i64.const 2 i64.atomic.rmw32.and_u offset=3 drop)
  (; 0xfe 0x33 ;) (func (export "i32.atomic.rmw.or") i32.const 1 i32.const 2 i32.atomic.rmw.or offset=3 drop)
  (; 0xfe 0x34 ;) (func (export "i64.atomic.rmw.or") i32.const 1 i64.const 2 i64.atomic.rmw.or offset=7 drop)
  (; 0xfe 0x35 ;) (func (export "i32.atomic.rmw8.or_u") i32.const 1 i32.const 2 i32.atomic.rmw8.or_u offset=3 drop)
  (; 0xfe 0x36 ;) (func (export "i32.atomic.rmw16.or_u") i32.const 1 i32.const 2 i32.atomic.rmw16.or_u offset=3 drop)
  (; 0xfe 0x37 ;) (func (export "i64.atomic.rmw8.or_u") i32.const 1 i64.const 2 i64.atomic.rmw8.or_u offset=3 drop)
  (; 0xfe 0x38 ;) (func (export "i64.atomic.rmw16.or_u") i32.const 1 i64.const 2 i64.atomic.rmw16.or_u offset=3 drop)
  (; 0xfe 0x39 ;) (func (export "i64.atomic.rmw32.or_u") i32.const 1 i64.const 2 i64.atomic.rmw32.or_u offset=3 drop)
  (; 0xfe 0x3a ;) (func (export "i32.atomic.rmw.xor") i32.const 1 i32.const 2 i32.atomic.rmw.xor offset=3 drop)
  (; 0xfe 0x3b ;) (func (export "i64.atomic.rmw.xor") i32.const 1 i64.const 2 i64.atomic.rmw.xor offset=7 drop)
  (; 0xfe 0x3c ;) (func (export "i32.atomic.rmw8.xor_u") i32.const 1 i32.const 2 i32.atomic.rmw8.xor_u offset=3 drop)
  (; 0xfe 0x3d ;) (func (export "i32.atomic.rmw16.xor_u") i32.const 1 i32.const 2 i32.atomic.rmw16.xor_u offset=3 drop)
  (; 0xfe 0x3e ;) (func (export "i64.atomic.rmw8.xor_u") i32.const 1 i64.const 2 i64.atomic.rmw8.xor_u offset=3 drop)
  (; 0xfe 0x3f ;) (func (export "i64.atomic.rmw16.xor_u") i32.const 1 i64.const 2 i64.atomic.rmw16.xor_u offset=3 drop)
  (; 0xfe 0x40 ;) (func (export "i64.atomic.rmw32.xor_u") i32.const 1 i64.const 2 i64.atomic.rmw32.xor_u offset=3 drop)
  (; 0xfe 0x41 ;) (func (export "i32.atomic.rmw.xchg") i32.const 1 i32.const 2 i32.atomic.rmw.xchg offset=3 drop)
  (; 0xfe 0x42 ;) (func (export "i64.atomic.rmw.xchg") i32.const 1 i64.const 2 i64.atomic.rmw.xchg offset=7 drop)
  (; 0xfe 0x43 ;) (func (export "i32.atomic.rmw8.xchg_u") i32.const 1 i32.const 2 i32.atomic.rmw8.xchg_u offset=3 drop)
  (; 0xfe 0x44 ;) (func (export "i32.atomic.rmw16.xchg_u") i32.const 1 i32.const 2 i32.atomic.rmw16.xchg_u offset=3 drop)
  (; 0xfe 0x45 ;) (func (export "i64.atomic.rmw8.xchg_u") i32.const 1 i64.const 2 i64.atomic.rmw8.xchg_u offset=3 drop)
  (; 0xfe 0x46 ;) (func (export "i64.atomic.rmw16.xchg_u") i32.const 1 i64.const 2 i64.atomic.rmw16.xchg_u offset=3 drop)
  (; 0xfe 0x47 ;) (func (export "i64.atomic.rmw32.xchg_u") i32.const 1 i64.const 2 i64.atomic.rmw32.xchg_u offset=3 drop)

  (; 0xfe 0x48 ;) (func (export "i32.atomic.rmw.cmpxchg") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw.cmpxchg offset=3 drop)
  (; 0xfe 0x49 ;) (func (export "i64.atomic.rmw.cmpxchg") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw.cmpxchg offset=7 drop)
  (; 0xfe 0x4a ;) (func (export "i32.atomic.rmw8.cmpxchg_u") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw8.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4b ;) (func (export "i32.atomic.rmw16.cmpxchg_u") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw16.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4c ;) (func (export "i64.atomic.rmw8.cmpxchg_u") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw8.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4d ;) (func (export "i64.atomic.rmw16.cmpxchg_u") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw16.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4e ;) (func (export "i64.atomic.rmw32.cmpxchg_u") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw32.cmpxchg_u offset=3 drop)
)

(;; STDOUT ;;;
0000000: 0061 736d                                 ; WASM_BINARY_MAGIC
0000004: 0100 0000                                 ; WASM_BINARY_VERSION
; section "Type" (1)
0000008: 01                                        ; section code
0000009: 00                                        ; section size (guess)
000000a: 02                                        ; num types
; type 0
000000b: 60                                        ; func
000000c: 00                                        ; num params
000000d: 00                                        ; num results
; type 1
000000e: 60                                        ; func
000000f: 01                                        ; num params
0000010: 7f                                        ; i32
0000011: 00                                        ; num results
0000009: 08                                        ; FIXUP section size
; section "Import" (2)
0000012: 02                                        ; section code
0000013: 00                                        ; section size (guess)
0000014: 01                                        ; num imports
; import header 0
0000015: 04                                        ; string length
0000016: 686f 7374                                host  ; import module name
000001a: 05                                        ; string length
000001b: 7072 696e 74                             print  ; import field name
0000020: 00                                        ; import kind
0000021: 01                                        ; import signature index
0000013: 0e                                        ; FIXUP section size
; section "Function" (3)
0000022: 03                                        ; section code
0000023: 00                                        ; section size (guess)
0000024: 8f03                                      ; num functions
0000026: 00                                        ; function 0 signature index
0000027: 00                                        ; function 1 signature index
0000028: 00                                        ; function 2 signature index
0000029: 00                                        ; function 3 signature index
000002a: 00                                        ; function 4 signature index
000002b: 00                                        ; function 5 signature index
000002c: 00                                        ; function 6 signature index
000002d: 00                                        ; function 7 signature index
000002e: 00                                        ; function 8 signature index
000002f: 00                                        ; function 9 signature index
0000030: 00                                        ; function 10 signature index
0000031: 00                                        ; function 11 signature index
0000032: 00                                        ; function 12 signature index
0000033: 00                                        ; function 13 signature index
0000034: 00                                        ; function 14 signature index
0000035: 00                                        ; function 15 signature index
0000036: 00                                        ; function 16 signature index
0000037: 00                                        ; function 17 signature index
0000038: 00                                        ; function 18 signature index
0000039: 00                                        ; function 19 signature index
000003a: 00                                        ; function 20 signature index
000003b: 00                                        ; function 21 signature index
000003c: 00                                        ; function 22 signature index
000003d: 00                                        ; function 23 signature index
000003e: 00                                        ; function 24 signature index
000003f: 00                                        ; function 25 signature index
0000040: 00                                        ; function 26 signature index
0000041: 00                                        ; function 27 signature index
0000042: 00                                        ; function 28 signature index
0000043: 00                                        ; function 29 signature index
0000044: 00                                        ; function 30 signature index
0000045: 00                                        ; function 31 signature index
0000046: 00                                        ; function 32 signature index
0000047: 00                                        ; function 33 signature index
0000048: 00                                        ; function 34 signature index
0000049: 00                                        ; function 35 signature index
000004a: 00                                        ; function 36 signature index
000004b: 00                                        ; function 37 signature index
000004c: 00                                        ; function 38 signature index
000004d: 00                                        ; function 39 signature index
000004e: 00                                        ; function 40 signature index
000004f: 00                                        ; function 41 signature index
0000050: 00                                        ; function 42 signature index
0000051: 00                                        ; function 43 signature index
0000052: 00                                        ; function 44 signature index
0000053: 00                                        ; function 45 signature index
0000054: 00                                        ; function 46 signature index
0000055: 00                                        ; function 47 signature index
0000056: 00                                        ; function 48 signature index
0000057: 00                                        ; function 49 signature index
0000058: 00                                        ; function 50 signature index
0000059: 00                                        ; function 51 signature index
000005a: 00                                        ; function 52 signature index
000005b: 00                                        ; function 53 signature index
000005c: 00                                        ; function 54 signature index
000005d: 00                                        ; function 55 signature index
000005e: 00                                        ; function 56 signature index
000005f: 00                                        ; function 57 signature index
0000060: 00                                        ; function 58 signature index
0000061: 00                                        ; function 59 signature index
0000062: 00                                        ; function 60 signature index
0000063: 00                                        ; function 61 signature index
0000064: 00                                        ; function 62 signature index
0000065: 00                                        ; function 63 signature index
0000066: 00                                        ; function 64 signature index
0000067: 00                                        ; function 65 signature index
0000068: 00                                        ; function 66 signature index
0000069: 00                                        ; function 67 signature index
000006a: 00                                        ; function 68 signature index
000006b: 00                                        ; function 69 signature index
000006c: 00                                        ; function 70 signature index
000006d: 00                                        ; function 71 signature index
000006e: 00                                        ; function 72 signature index
000006f: 00                                        ; function 73 signature index
0000070: 00                                        ; function 74 signature index
0000071: 00                                        ; function 75 signature index
0000072: 00                                        ; function 76 signature index
0000073: 00                                        ; function 77 signature index
0000074: 00                                        ; function 78 signature index
0000075: 00                                        ; function 79 signature index
0000076: 00                                        ; function 80 signature index
0000077: 00                                        ; function 81 signature index
0000078: 00                                        ; function 82 signature index
0000079: 00                                        ; function 83 signature index
000007a: 00                                        ; function 84 signature index
000007b: 00                                        ; function 85 signature index
000007c: 00                                        ; function 86 signature index
000007d: 00                                        ; function 87 signature index
000007e: 00                                        ; function 88 signature index
000007f: 00                                        ; function 89 signature index
0000080: 00                                        ; function 90 signature index
0000081: 00                                        ; function 91 signature index
0000082: 00                                        ; function 92 signature index
0000083: 00                                        ; function 93 signature index
0000084: 00                                        ; function 94 signature index
0000085: 00                                        ; function 95 signature index
0000086: 00                                        ; function 96 signature index
0000087: 00                                        ; function 97 signature index
0000088: 00                                        ; function 98 signature index
0000089: 00                                        ; function 99 signature index
000008a: 00                                        ; function 100 signature index
000008b: 00                                        ; function 101 signature index
000008c: 00                                        ; function 102 signature index
000008d: 00                                        ; function 103 signature index
000008e: 00                                        ; function 104 signature index
000008f: 00                                        ; function 105 signature index
0000090: 00                                        ; function 106 signature index
0000091: 00                                        ; function 107 signature index
0000092: 00                                        ; function 108 signature index
0000093: 00                                        ; function 109 signature index
0000094: 00                                        ; function 110 signature index
0000095: 00                                        ; function 111 signature index
0000096: 00                                        ; function 112 signature index
0000097: 00                                        ; function 113 signature index
0000098: 00                                        ; function 114 signature index
0000099: 00                                        ; function 115 signature index
000009a: 00                                        ; function 116 signature index
000009b: 00                                        ; function 117 signature index
000009c: 00                                        ; function 118 signature index
000009d: 00                                        ; function 119 signature index
000009e: 00                                        ; function 120 signature index
000009f: 00                                        ; function 121 signature index
00000a0: 00                                        ; function 122 signature index
00000a1: 00                                        ; function 123 signature index
00000a2: 00                                        ; function 124 signature index
00000a3: 00                                        ; function 125 signature index
00000a4: 00                                        ; function 126 signature index
00000a5: 00                                        ; function 127 signature index
00000a6: 00                                        ; function 128 signature index
00000a7: 00                                        ; function 129 signature index
00000a8: 00                                        ; function 130 signature index
00000a9: 00                                        ; function 131 signature index
00000aa: 00                                        ; function 132 signature index
00000ab: 00                                        ; function 133 signature index
00000ac: 00                                        ; function 134 signature index
00000ad: 00                                        ; function 135 signature index
00000ae: 00                                        ; function 136 signature index
00000af: 00                                        ; function 137 signature index
00000b0: 00                                        ; function 138 signature index
00000b1: 00                                        ; function 139 signature index
00000b2: 00                                        ; function 140 signature index
00000b3: 00                                        ; function 141 signature index
00000b4: 00                                        ; function 142 signature index
00000b5: 00                                        ; function 143 signature index
00000b6: 00                                        ; function 144 signature index
00000b7: 00                                        ; function 145 signature index
00000b8: 00                                        ; function 146 signature index
00000b9: 00                                        ; function 147 signature index
00000ba: 00                                        ; function 148 signature index
00000bb: 00                                        ; function 149 signature index
00000bc: 00                                        ; function 150 signature index
00000bd: 00                                        ; function 151 signature index
00000be: 00                                        ; function 152 signature index
00000bf: 00                                        ; function 153 signature index
00000c0: 00                                        ; function 154 signature index
00000c1: 00                                        ; function 155 signature index
00000c2: 00                                        ; function 156 signature index
00000c3: 00                                        ; function 157 signature index
00000c4: 00                                        ; function 158 signature index
00000c5: 00                                        ; function 159 signature index
00000c6: 00                                        ; function 160 signature index
00000c7: 00                                        ; function 161 signature index
00000c8: 00                                        ; function 162 signature index
00000c9: 00                                        ; function 163 signature index
00000ca: 00                                        ; function 164 signature index
00000cb: 00                                        ; function 165 signature index
00000cc: 00                                        ; function 166 signature index
00000cd: 00                                        ; function 167 signature index
00000ce: 00                                        ; function 168 signature index
00000cf: 00                                        ; function 169 signature index
00000d0: 00                                        ; function 170 signature index
00000d1: 00                                        ; function 171 signature index
00000d2: 00                                        ; function 172 signature index
00000d3: 00                                        ; function 173 signature index
00000d4: 00                                        ; function 174 signature index
00000d5: 00                                        ; function 175 signature index
00000d6: 00                                        ; function 176 signature index
00000d7: 00                                        ; function 177 signature index
00000d8: 00                                        ; function 178 signature index
00000d9: 00                                        ; function 179 signature index
00000da: 00                                        ; function 180 signature index
00000db: 00                                        ; function 181 signature index
00000dc: 00                                        ; function 182 signature index
00000dd: 00                                        ; function 183 signature index
00000de: 00                                        ; function 184 signature index
00000df: 00                                        ; function 185 signature index
00000e0: 00                                        ; function 186 signature index
00000e1: 00                                        ; function 187 signature index
00000e2: 00                                        ; function 188 signature index
00000e3: 00                                        ; function 189 signature index
00000e4: 00                                        ; function 190 signature index
00000e5: 00                                        ; function 191 signature index
00000e6: 00                                        ; function 192 signature index
00000e7: 00                                        ; function 193 signature index
00000e8: 00                                        ; function 194 signature index
00000e9: 00                                        ; function 195 signature index
00000ea: 00                                        ; function 196 signature index
00000eb: 00                                        ; function 197 signature index
00000ec: 00                                        ; function 198 signature index
00000ed: 00                                        ; function 199 signature index
00000ee: 00                                        ; function 200 signature index
00000ef: 00                                        ; function 201 signature index
00000f0: 00                                        ; function 202 signature index
00000f1: 00                                        ; function 203 signature index
00000f2: 00                                        ; function 204 signature index
00000f3: 00                                        ; function 205 signature index
00000f4: 00                                        ; function 206 signature index
00000f5: 00                                        ; function 207 signature index
00000f6: 00                                        ; function 208 signature index
00000f7: 00                                        ; function 209 signature index
00000f8: 00                                        ; function 210 signature index
00000f9: 00                                        ; function 211 signature index
00000fa: 00                                        ; function 212 signature index
00000fb: 00                                        ; function 213 signature index
00000fc: 00                                        ; function 214 signature index
00000fd: 00                                        ; function 215 signature index
00000fe: 00                                        ; function 216 signature index
00000ff: 00                                        ; function 217 signature index
0000100: 00                                        ; function 218 signature index
0000101: 00                                        ; function 219 signature index
0000102: 00                                        ; function 220 signature index
0000103: 00                                        ; function 221 signature index
0000104: 00                                        ; function 222 signature index
0000105: 00                                        ; function 223 signature index
0000106: 00                                        ; function 224 signature index
0000107: 00                                        ; function 225 signature index
0000108: 00                                        ; function 226 signature index
0000109: 00                                        ; function 227 signature index
000010a: 00                                        ; function 228 signature index
000010b: 00                                        ; function 229 signature index
000010c: 00                                        ; function 230 signature index
000010d: 00                                        ; function 231 signature index
000010e: 00                                        ; function 232 signature index
000010f: 00                                        ; function 233 signature index
0000110: 00                                        ; function 234 signature index
0000111: 00                                        ; function 235 signature index
0000112: 00                                        ; function 236 signature index
0000113: 00                                        ; function 237 signature index
0000114: 00                                        ; function 238 signature index
0000115: 00                                        ; function 239 signature index
0000116: 00                                        ; function 240 signature index
0000117: 00                                        ; function 241 signature index
0000118: 00                                        ; function 242 signature index
0000119: 00                                        ; function 243 signature index
000011a: 00                                        ; function 244 signature index
000011b: 00                                        ; function 245 signature index
000011c: 00                                        ; function 246 signature index
000011d: 00                                        ; function 247 signature index
000011e: 00                                        ; function 248 signature index
000011f: 00                                        ; function 249 signature index
0000120: 00                                        ; function 250 signature index
0000121: 00                                        ; function 251 signature index
0000122: 00                                        ; function 252 signature index
0000123: 00                                        ; function 253 signature index
0000124: 00                                        ; function 254 signature index
0000125: 00                                        ; function 255 signature index
0000126: 00                                        ; function 256 signature index
0000127: 00                                        ; function 257 signature index
0000128: 00                                        ; function 258 signature index
0000129: 00                                        ; function 259 signature index
000012a: 00                                        ; function 260 signature index
000012b: 00                                        ; function 261 signature index
000012c: 00                                        ; function 262 signature index
000012d: 00                                        ; function 263 signature index
000012e: 00                                        ; function 264 signature index
000012f: 00                                        ; function 265 signature index
0000130: 00                                        ; function 266 signature index
0000131: 00                                        ; function 267 signature index
0000132: 00                                        ; function 268 signature index
0000133: 00                                        ; function 269 signature index
0000134: 00                                        ; function 270 signature index
0000135: 00                                        ; function 271 signature index
0000136: 00                                        ; function 272 signature index
0000137: 00                                        ; function 273 signature index
0000138: 00                                        ; function 274 signature index
0000139: 00                                        ; function 275 signature index
000013a: 00                                        ; function 276 signature index
000013b: 00                                        ; function 277 signature index
000013c: 00                                        ; function 278 signature index
000013d: 00                                        ; function 279 signature index
000013e: 00                                        ; function 280 signature index
000013f: 00                                        ; function 281 signature index
0000140: 00                                        ; function 282 signature index
0000141: 00                                        ; function 283 signature index
0000142: 00                                        ; function 284 signature index
0000143: 00                                        ; function 285 signature index
0000144: 00                                        ; function 286 signature index
0000145: 00                                        ; function 287 signature index
0000146: 00                                        ; function 288 signature index
0000147: 00                                        ; function 289 signature index
0000148: 00                                        ; function 290 signature index
0000149: 00                                        ; function 291 signature index
000014a: 00                                        ; function 292 signature index
000014b: 00                                        ; function 293 signature index
000014c: 00                                        ; function 294 signature index
000014d: 00                                        ; function 295 signature index
000014e: 00                                        ; function 296 signature index
000014f: 00                                        ; function 297 signature index
0000150: 00                                        ; function 298 signature index
0000151: 00                                        ; function 299 signature index
0000152: 00                                        ; function 300 signature index
0000153: 00                                        ; function 301 signature index
0000154: 00                                        ; function 302 signature index
0000155: 00                                        ; function 303 signature index
0000156: 00                                        ; function 304 signature index
0000157: 00                                        ; function 305 signature index
0000158: 00                                        ; function 306 signature index
0000159: 00                                        ; function 307 signature index
000015a: 00                                        ; function 308 signature index
000015b: 00                                        ; function 309 signature index
000015c: 00                                        ; function 310 signature index
000015d: 00                                        ; function 311 signature index
000015e: 00                                        ; function 312 signature index
000015f: 00                                        ; function 313 signature index
0000160: 00                                        ; function 314 signature index
0000161: 00                                        ; function 315 signature index
0000162: 00                                        ; function 316 signature index
0000163: 00                                        ; function 317 signature index
0000164: 00                                        ; function 318 signature index
0000165: 00                                        ; function 319 signature index
0000166: 00                                        ; function 320 signature index
0000167: 00                                        ; function 321 signature index
0000168: 00                                        ; function 322 signature index
0000169: 00                                        ; function 323 signature index
000016a: 00                                        ; function 324 signature index
000016b: 00                                        ; function 325 signature index
000016c: 00                                        ; function 326 signature index
000016d: 00                                        ; function 327 signature index
000016e: 00                                        ; function 328 signature index
000016f: 00                                        ; function 329 signature index
0000170: 00                                        ; function 330 signature index
0000171: 00                                        ; function 331 signature index
0000172: 00                                        ; function 332 signature index
0000173: 00                                        ; function 333 signature index
0000174: 00                                        ; function 334 signature index
0000175: 00                                        ; function 335 signature index
0000176: 00                                        ; function 336 signature index
0000177: 00                                        ; function 337 signature index
0000178: 00                                        ; function 338 signature index
0000179: 00                                        ; function 339 signature index
000017a: 00                                        ; function 340 signature index
000017b: 00                                        ; function 341 signature index
000017c: 00                                        ; function 342 signature index
000017d: 00                                        ; function 343 signature index
000017e: 00                                        ; function 344 signature index
000017f: 00                                        ; function 345 signature index
0000180: 00                                        ; function 346 signature index
0000181: 00                                        ; function 347 signature index
0000182: 00                                        ; function 348 signature index
0000183: 00                                        ; function 349 signature index
0000184: 00                                        ; function 350 signature index
0000185: 00                                        ; function 351 signature index
0000186: 00                                        ; function 352 signature index
0000187: 00                                        ; function 353 signature index
0000188: 00                                        ; function 354 signature index
0000189: 00                                        ; function 355 signature index
000018a: 00                                        ; function 356 signature index
000018b: 00                                        ; function 357 signature index
000018c: 00                                        ; function 358 signature index
000018d: 00                                        ; function 359 signature index
000018e: 00                                        ; function 360 signature index
000018f: 00                                        ; function 361 signature index
0000190: 00                                        ; function 362 signature index
0000191: 00                                        ; function 363 signature index
0000192: 00                                        ; function 364 signature index
0000193: 00                                        ; function 365 signature index
0000194: 00                                        ; function 366 signature index
0000195: 00                                        ; function 367 signature index
0000196: 00                                        ; function 368 signature index
0000197: 00                                        ; function 369 signature index
0000198: 00                                        ; function 370 signature index
0000199: 00                                        ; function 371 signature index
000019a: 00                                        ; function 372 signature index
000019b: 00                                        ; function 373 signature index
000019c: 00                                        ; function 374 signature index
000019d: 00                                        ; function 375 signature index
000019e: 00                                        ; function 376 signature index
000019f: 00                                        ; function 377 signature index
00001a0: 00                                        ; function 378 signature index
00001a1: 00                                        ; function 379 signature index
00001a2: 00                                        ; function 380 signature index
00001a3: 00                                        ; function 381 signature index
00001a4: 00                                        ; function 382 signature index
00001a5: 00                                        ; function 383 signature index
00001a6: 00                                        ; function 384 signature index
00001a7: 00                                        ; function 385 signature index
00001a8: 00                                        ; function 386 signature index
00001a9: 00                                        ; function 387 signature index
00001aa: 00                                        ; function 388 signature index
00001ab: 00                                        ; function 389 signature index
00001ac: 00                                        ; function 390 signature index
00001ad: 00                                        ; function 391 signature index
00001ae: 00                                        ; function 392 signature index
00001af: 00                                        ; function 393 signature index
00001b0: 00                                        ; function 394 signature index
00001b1: 00                                        ; function 395 signature index
00001b2: 00                                        ; function 396 signature index
00001b3: 00                                        ; function 397 signature index
00001b4: 00                                        ; function 398 signature index
; move data: [24, 1b5) -> [25, 1b6)
0000023: 9103                                      ; FIXUP section size
; section "Table" (4)
00001b6: 04                                        ; section code
00001b7: 00                                        ; section size (guess)
00001b8: 01                                        ; num tables
; table 0
00001b9: 70                                        ; funcref
00001ba: 01                                        ; limits: flags
00001bb: 02                                        ; limits: initial
00001bc: 02                                        ; limits: max
00001b7: 05                                        ; FIXUP section size
; section "Memory" (5)
00001bd: 05                                        ; section code
00001be: 00                                        ; section size (guess)
00001bf: 01                                        ; num memories
; memory 0
00001c0: 03                                        ; limits: flags
00001c1: 01                                        ; limits: initial
00001c2: 01                                        ; limits: max
00001be: 04                                        ; FIXUP section size
; section "Global" (6)
00001c3: 06                                        ; section code
00001c4: 00                                        ; section size (guess)
00001c5: 01                                        ; num globals
00001c6: 7f                                        ; i32
00001c7: 01                                        ; global mutability
00001c8: 41                                        ; i32.const
00001c9: 00                                        ; i32 literal
00001ca: 0b                                        ; end
00001c4: 06                                        ; FIXUP section size
; section "Export" (7)
00001cb: 07                                        ; section code
00001cc: 00                                        ; section size (guess)
00001cd: 8e03                                      ; num exports
00001cf: 0b                                        ; string length
00001d0: 756e 7265 6163 6861 626c 65              unreachable  ; export name
00001db: 00                                        ; export kind
00001dc: 02                                        ; export func index
00001dd: 02                                        ; string length
00001de: 6272                                     br  ; export name
00001e0: 00                                        ; export kind
00001e1: 03                                        ; export func index
00001e2: 08                                        ; string length
00001e3: 6272 5f74 6162 6c65                      br_table  ; export name
00001eb: 00                                        ; export kind
00001ec: 04                                        ; export func index
00001ed: 06                                        ; string length
00001ee: 7265 7475 726e                           return  ; export name
00001f4: 00                                        ; export kind
00001f5: 05                                        ; export func index
00001f6: 04                                        ; string length
00001f7: 6361 6c6c                                call  ; export name
00001fb: 00                                        ; export kind
00001fc: 06                                        ; export func index
00001fd: 0d                                        ; string length
00001fe: 6361 6c6c 5f69 6e64 6972 6563 74         call_indirect  ; export name
000020b: 00                                        ; export kind
000020c: 07                                        ; export func index
000020d: 0b                                        ; string length
000020e: 7265 7475 726e 5f63 616c 6c              return_call  ; export name
0000219: 00                                        ; export kind
000021a: 08                                        ; export func index
000021b: 14                                        ; string length
000021c: 7265 7475 726e 5f63 616c 6c5f 696e 6469  return_call_indi
000022c: 7265 6374                                rect  ; export name
0000230: 00                                        ; export kind
0000231: 09                                        ; export func index
0000232: 04                                        ; string length
0000233: 6472 6f70                                drop  ; export name
0000237: 00                                        ; export kind
0000238: 0a                                        ; export func index
0000239: 06                                        ; string length
000023a: 7365 6c65 6374                           select  ; export name
0000240: 00                                        ; export kind
0000241: 0b                                        ; export func index
0000242: 09                                        ; string length
0000243: 6765 745f 6c6f 6361 6c                   get_local  ; export name
000024c: 00                                        ; export kind
000024d: 0c                                        ; export func index
000024e: 09                                        ; string length
000024f: 7365 745f 6c6f 6361 6c                   set_local  ; export name
0000258: 00                                        ; export kind
0000259: 0d                                        ; export func index
000025a: 09                                        ; string length
000025b: 7465 655f 6c6f 6361 6c                   tee_local  ; export name
0000264: 00                                        ; export kind
0000265: 0e                                        ; export func index
0000266: 0a                                        ; string length
0000267: 6765 745f 676c 6f62 616c                 get_global  ; export name
0000271: 00                                        ; export kind
0000272: 0f                                        ; export func index
0000273: 0a                                        ; string length
0000274: 7365 745f 676c 6f62 616c                 set_global  ; export name
000027e: 00                                        ; export kind
000027f: 10                                        ; export func index
0000280: 08                                        ; string length
0000281: 6933 322e 6c6f 6164                      i32.load  ; export name
0000289: 00                                        ; export kind
000028a: 11                                        ; export func index
000028b: 08                                        ; string length
000028c: 6936 342e 6c6f 6164                      i64.load  ; export name
0000294: 00                                        ; export kind
0000295: 12                                        ; export func index
0000296: 08                                        ; string length
0000297: 6633 322e 6c6f 6164                      f32.load  ; export name
000029f: 00                                        ; export kind
00002a0: 13                                        ; export func index
00002a1: 08                                        ; string length
00002a2: 6636 342e 6c6f 6164                      f64.load  ; export name
00002aa: 00                                        ; export kind
00002ab: 14                                        ; export func index
00002ac: 0b                                        ; string length
00002ad: 6933 322e 6c6f 6164 385f 73              i32.load8_s  ; export name
00002b8: 00                                        ; export kind
00002b9: 15                                        ; export func index
00002ba: 0b                                        ; string length
00002bb: 6933 322e 6c6f 6164 385f 75              i32.load8_u  ; export name
00002c6: 00                                        ; export kind
00002c7: 16                                        ; export func index
00002c8: 0c                                        ; string length
00002c9: 6933 322e 6c6f 6164 3136 5f73            i32.load16_s  ; export name
00002d5: 00                                        ; export kind
00002d6: 17                                        ; export func index
00002d7: 0c                                        ; string length
00002d8: 6933 322e 6c6f 6164 3136 5f75            i32.load16_u  ; export name
00002e4: 00                                        ; export kind
00002e5: 18                                        ; export func index
00002e6: 0b                                        ; string length
00002e7: 6936 342e 6c6f 6164 385f 73              i64.load8_s  ; export name
00002f2: 00                                        ; export kind
00002f3: 19                                        ; export func index
00002f4: 0b                                        ; string length
00002f5: 6936 342e 6c6f 6164 385f 75              i64.load8_u  ; export name
0000300: 00                                        ; export kind
0000301: 1a                                        ; export func index
0000302: 0c                                        ; string length
0000303: 6936 342e 6c6f 6164 3136 5f73            i64.load16_s  ; export name
000030f: 00                                        ; export kind
0000310: 1b                                        ; export func index
0000311: 0c                                        ; string length
0000312: 6936 342e 6c6f 6164 3136 5f75            i64.load16_u  ; export name
000031e: 00                                        ; export kind
000031f: 1c                                        ; export func index
0000320: 0c                                        ; string length
0000321: 6936 342e 6c6f 6164 3332 5f73            i64.load32_s  ; export name
000032d: 00                                        ; export kind
000032e: 1d                                        ; export func index
000032f: 0c                                        ; string length
0000330: 6936 342e 6c6f 6164 3332 5f75            i64.load32_u  ; export name
000033c: 00                                        ; export kind
000033d: 1e                                        ; export func index
000033e: 09                                        ; string length
000033f: 6933 322e 7374 6f72 65                   i32.store  ; export name
0000348: 00                                        ; export kind
0000349: 1f                                        ; export func index
000034a: 09                                        ; string length
000034b: 6936 342e 7374 6f72 65                   i64.store  ; export name
0000354: 00                                        ; export kind
0000355: 20                                        ; export func index
0000356: 09                                        ; string length
0000357: 6633 322e 7374 6f72 65                   f32.store  ; export name
0000360: 00                                        ; export kind
0000361: 21                                        ; export func index
0000362: 09                                        ; string length
0000363: 6636 342e 7374 6f72 65                   f64.store  ; export name
000036c: 00                                        ; export kind
000036d: 22                                        ; export func index
000036e: 0a                                        ; string length
000036f: 6933 322e 7374 6f72 6538                 i32.store8  ; export name
0000379: 00                                        ; export kind
000037a: 23                                        ; export func index
000037b: 0b                                        ; string length
000037c: 6933 322e 7374 6f72 6531 36              i32.store16  ; export name
0000387: 00                                        ; export kind
0000388: 24                                        ; export func index
0000389: 0a                                        ; string length
000038a: 6936 342e 7374 6f72 6538                 i64.store8  ; export name
0000394: 00                                        ; export kind
0000395: 25                                        ; export func index
0000396: 0b                                        ; string length
0000397: 6936 342e 7374 6f72 6531 36              i64.store16  ; export name
00003a2: 00                                        ; export kind
00003a3: 26                                        ; export func index
00003a4: 0b                                        ; string length
00003a5: 6936 342e 7374 6f72 6533 32              i64.store32  ; export name
00003b0: 00                                        ; export kind
00003b1: 27                                        ; export func index
00003b2: 0e                                        ; string length
00003b3: 6375 7272 656e 745f 6d65 6d6f 7279       current_memory  ; export name
00003c1: 00                                        ; export kind
00003c2: 28                                        ; export func index
00003c3: 0b                                        ; string length
00003c4: 6772 6f77 5f6d 656d 6f72 79              grow_memory  ; export name
00003cf: 00                                        ; export kind
00003d0: 29                                        ; export func index
00003d1: 09                                        ; string length
00003d2: 6933 322e 636f 6e73 74                   i32.const  ; export name
00003db: 00                                        ; export kind
00003dc: 2a                                        ; export func index
00003dd: 09                                        ; string length
00003de: 6936 342e 636f 6e73 74                   i64.const  ; export name
00003e7: 00                                        ; export kind
00003e8: 2b                                        ; export func index
00003e9: 09                                        ; string length
00003ea: 6633 322e 636f 6e73 74                   f32.const  ; export name
00003f3: 00                                        ; export kind
00003f4: 2c                                        ; export func index
00003f5: 09                                        ; string length
00003f6: 6636 342e 636f 6e73 74                   f64.const  ; export name
00003ff: 00                                        ; export kind
0000400: 2d                                        ; export func index
0000401: 07                                        ; string length
0000402: 6933 322e 6571 7a                        i32.eqz  ; export name
0000409: 00                                        ; export kind
000040a: 2e                                        ; export func index
000040b: 06                                        ; string length
000040c: 6933 322e 6571                           i32.eq  ; export name
0000412: 00                                        ; export kind
0000413: 2f                                        ; export func index
0000414: 06                                        ; string length
0000415: 6933 322e 6e65                           i32.ne  ; export name
000041b: 00                                        ; export kind
000041c: 30                                        ; export func index
000041d: 08                                        ; string length
000041e: 6933 322e 6c74 5f73                      i32.lt_s  ; export name
0000426: 00                                        ; export kind
0000427: 31                                        ; export func index
0000428: 08                                        ; string length
0000429: 6933 322e 6c74 5f75                      i32.lt_u  ; export name
0000431: 00                                        ; export kind
0000432: 32                                        ; export func index
0000433: 08                                        ; string length
0000434: 6933 322e 6774 5f73                      i32.gt_s  ; export name
000043c: 00                                        ; export kind
000043d: 33                                        ; export func index
000043e: 08                                        ; string length
000043f: 6933 322e 6774 5f75                      i32.gt_u  ; export name
0000447: 00                                        ; export kind
0000448: 34                                        ; export func index
0000449: 08                                        ; string length
000044a: 6933 322e 6c65 5f73                      i32.le_s  ; export name
0000452: 00                                        ; export kind
0000453: 35                                        ; export func index
0000454: 08                                        ; string length
0000455: 6933 322e 6c65 5f75                      i32.le_u  ; export name
000045d: 00                                        ; export kind
000045e: 36                                        ; export func index
000045f: 08                                        ; string length
0000460: 6933 322e 6765 5f73                      i32.ge_s  ; export name
0000468: 00                                        ; export kind
0000469: 37                                        ; export func index
000046a: 08                                        ; string length
000046b: 6933 322e 6765 5f75                      i32.ge_u  ; export name
0000473: 00                                        ; export kind
0000474: 38                                        ; export func index
0000475: 07                                        ; string length
0000476: 6936 342e 6571 7a                        i64.eqz  ; export name
000047d: 00                                        ; export kind
000047e: 39                                        ; export func index
000047f: 06                                        ; string length
0000480: 6936 342e 6571                           i64.eq  ; export name
0000486: 00                                        ; export kind
0000487: 3a                                        ; export func index
0000488: 06                                        ; string length
0000489: 6936 342e 6e65                           i64.ne  ; export name
000048f: 00                                        ; export kind
0000490: 3b                                        ; export func index
0000491: 08                                        ; string length
0000492: 6936 342e 6c74 5f73                      i64.lt_s  ; export name
000049a: 00                                        ; export kind
000049b: 3c                                        ; export func index
000049c: 08                                        ; string length
000049d: 6936 342e 6c74 5f75                      i64.lt_u  ; export name
00004a5: 00                                        ; export kind
00004a6: 3d                                        ; export func index
00004a7: 08                                        ; string length
00004a8: 6936 342e 6774 5f73                      i64.gt_s  ; export name
00004b0: 00                                        ; export kind
00004b1: 3e                                        ; export func index
00004b2: 08                                        ; string length
00004b3: 6936 342e 6774 5f75                      i64.gt_u  ; export name
00004bb: 00                                        ; export kind
00004bc: 3f                                        ; export func index
00004bd: 08                                        ; string length
00004be: 6936 342e 6c65 5f73                      i64.le_s  ; export name
00004c6: 00                                        ; export kind
00004c7: 40                                        ; export func index
00004c8: 08                                        ; string length
00004c9: 6936 342e 6c65 5f75                      i64.le_u  ; export name
00004d1: 00                                        ; export kind
00004d2: 41                                        ; export func index
00004d3: 08                                        ; string length
00004d4: 6936 342e 6765 5f73                      i64.ge_s  ; export name
00004dc: 00                                        ; export kind
00004dd: 42                                        ; export func index
00004de: 08                                        ; string length
00004df: 6936 342e 6765 5f75                      i64.ge_u  ; export name
00004e7: 00                                        ; export kind
00004e8: 43                                        ; export func index
00004e9: 06                                        ; string length
00004ea: 6633 322e 6571                           f32.eq  ; export name
00004f0: 00                                        ; export kind
00004f1: 44                                        ; export func index
00004f2: 06                                        ; string length
00004f3: 6633 322e 6e65                           f32.ne  ; export name
00004f9: 00                                        ; export kind
00004fa: 45                                        ; export func index
00004fb: 06                                        ; string length
00004fc: 6633 322e 6c74                           f32.lt  ; export name
0000502: 00                                        ; export kind
0000503: 46                                        ; export func index
0000504: 06                                        ; string length
0000505: 6633 322e 6774                           f32.gt  ; export name
000050b: 00                                        ; export kind
000050c: 47                                        ; export func index
000050d: 06                                        ; string length
000050e: 6633 322e 6c65                           f32.le  ; export name
0000514: 00                                        ; export kind
0000515: 48                                        ; export func index
0000516: 06                                        ; string length
0000517: 6633 322e 6765                           f32.ge  ; export name
000051d: 00                                        ; export kind
000051e: 49                                        ; export func index
000051f: 06                                        ; string length
0000520: 6636 342e 6571                           f64.eq  ; export name
0000526: 00                                        ; export kind
0000527: 4a                                        ; export func index
0000528: 06                                        ; string length
0000529: 6636 342e 6e65                           f64.ne  ; export name
000052f: 00                                        ; export kind
0000530: 4b                                        ; export func index
0000531: 06                                        ; string length
0000532: 6636 342e 6c74                           f64.lt  ; export name
0000538: 00                                        ; export kind
0000539: 4c                                        ; export func index
000053a: 06                                        ; string length
000053b: 6636 342e 6774                           f64.gt  ; export name
0000541: 00                                        ; export kind
0000542: 4d                                        ; export func index
0000543: 06                                        ; string length
0000544: 6636 342e 6c65                           f64.le  ; export name
000054a: 00                                        ; export kind
000054b: 4e                                        ; export func index
000054c: 06                                        ; string length
000054d: 6636 342e 6765                           f64.ge  ; export name
0000553: 00                                        ; export kind
0000554: 4f                                        ; export func index
0000555: 07                                        ; string length
0000556: 6933 322e 636c 7a                        i32.clz  ; export name
000055d: 00                                        ; export kind
000055e: 50                                        ; export func index
000055f: 07                                        ; string length
0000560: 6933 322e 6374 7a                        i32.ctz  ; export name
0000567: 00                                        ; export kind
0000568: 51                                        ; export func index
0000569: 0a                                        ; string length
000056a: 6933 322e 706f 7063 6e74                 i32.popcnt  ; export name
0000574: 00                                        ; export kind
0000575: 52                                        ; export func index
0000576: 07                                        ; string length
0000577: 6933 322e 6164 64                        i32.add  ; export name
000057e: 00                                        ; export kind
000057f: 53                                        ; export func index
0000580: 07                                        ; string length
0000581: 6933 322e 7375 62                        i32.sub  ; export name
0000588: 00                                        ; export kind
0000589: 54                                        ; export func index
000058a: 07                                        ; string length
000058b: 6933 322e 6d75 6c                        i32.mul  ; export name
0000592: 00                                        ; export kind
0000593: 55                                        ; export func index
0000594: 09                                        ; string length
0000595: 6933 322e 6469 765f 73                   i32.div_s  ; export name
000059e: 00                                        ; export kind
000059f: 56                                        ; export func index
00005a0: 09                                        ; string length
00005a1: 6933 322e 6469 765f 75                   i32.div_u  ; export name
00005aa: 00                                        ; export kind
00005ab: 57                                        ; export func index
00005ac: 09                                        ; string length
00005ad: 6933 322e 7265 6d5f 73                   i32.rem_s  ; export name
00005b6: 00                                        ; export kind
00005b7: 58                                        ; export func index
00005b8: 09                                        ; string length
00005b9: 6933 322e 7265 6d5f 75                   i32.rem_u  ; export name
00005c2: 00                                        ; export kind
00005c3: 59                                        ; export func index
00005c4: 07                                        ; string length
00005c5: 6933 322e 616e 64                        i32.and  ; export name
00005cc: 00                                        ; export kind
00005cd: 5a                                        ; export func index
00005ce: 06                                        ; string length
00005cf: 6933 322e 6f72                           i32.or  ; export name
00005d5: 00                                        ; export kind
00005d6: 5b                                        ; export func index
00005d7: 07                                        ; string length
00005d8: 6933 322e 786f 72                        i32.xor  ; export name
00005df: 00                                        ; export kind
00005e0: 5c                                        ; export func index
00005e1: 07                                        ; string length
00005e2: 6933 322e 7368 6c                        i32.shl  ; export name
00005e9: 00                                        ; export kind
00005ea: 5d                                        ; export func index
00005eb: 09                                        ; string length
00005ec: 6933 322e 7368 725f 73                   i32.shr_s  ; export name
00005f5: 00                                        ; export kind
00005f6: 5e                                        ; export func index
00005f7: 09                                        ; string length
00005f8: 6933 322e 7368 725f 75                   i32.shr_u  ; export name
0000601: 00                                        ; export kind
0000602: 5f                                        ; export func index
0000603: 08                                        ; string length
0000604: 6933 322e 726f 746c                      i32.rotl  ; export name
000060c: 00                                        ; export kind
000060d: 60                                        ; export func index
000060e: 08                                        ; string length
000060f: 6933 322e 726f 7472                      i32.rotr  ; export name
0000617: 00                                        ; export kind
0000618: 61                                        ; export func index
0000619: 07                                        ; string length
000061a: 6936 342e 636c 7a                        i64.clz  ; export name
0000621: 00                                        ; export kind
0000622: 62                                        ; export func index
0000623: 07                                        ; string length
0000624: 6936 342e 6374 7a                        i64.ctz  ; export name
000062b: 00                                        ; export kind
000062c: 63                                        ; export func index
000062d: 0a                                        ; string length
000062e: 6936 342e 706f 7063 6e74                 i64.popcnt  ; export name
0000638: 00                                        ; export kind
0000639: 64                                        ; export func index
000063a: 07                                        ; string length
000063b: 6936 342e 6164 64                        i64.add  ; export name
0000642: 00                                        ; export kind
0000643: 65                                        ; export func index
0000644: 07                                        ; string length
0000645: 6936 342e 7375 62                        i64.sub  ; export name
000064c: 00                                        ; export kind
000064d: 66                                        ; export func index
000064e: 07                                        ; string length
000064f: 6936 342e 6d75 6c                        i64.mul  ; export name
0000656: 00                                        ; export kind
0000657: 67                                        ; export func index
0000658: 09                                        ; string length
0000659: 6936 342e 6469 765f 73                   i64.div_s  ; export name
0000662: 00                                        ; export kind
0000663: 68                                        ; export func index
0000664: 09                                        ; string length
0000665: 6936 342e 6469 765f 75                   i64.div_u  ; export name
000066e: 00                                        ; export kind
000066f: 69                                        ; export func index
0000670: 09                                        ; string length
0000671: 6936 342e 7265 6d5f 73                   i64.rem_s  ; export name
000067a: 00                                        ; export kind
000067b: 6a                                        ; export func index
000067c: 09                                        ; string length
000067d: 6936 342e 7265 6d5f 75                   i64.rem_u  ; export name
0000686: 00                                        ; export kind
0000687: 6b                                        ; export func index
0000688: 07                                        ; string length
0000689: 6936 342e 616e 64                        i64.and  ; export name
0000690: 00                                        ; export kind
0000691: 6c                                        ; export func index
0000692: 06                                        ; string length
0000693: 6936 342e 6f72                           i64.or  ; export name
0000699: 00                                        ; export kind
000069a: 6d                                        ; export func index
000069b: 07                                        ; string length
000069c: 6936 342e 786f 72                        i64.xor  ; export name
00006a3: 00                                        ; export kind
00006a4: 6e                                        ; export func index
00006a5: 07                                        ; string length
00006a6: 6936 342e 7368 6c                        i64.shl  ; export name
00006ad: 00                                        ; export kind
00006ae: 6f                                        ; export func index
00006af: 09                                        ; string length
00006b0: 6936 342e 7368 725f 73                   i64.shr_s  ; export name
00006b9: 00                                        ; export kind
00006ba: 70                                        ; export func index
00006bb: 09                                        ; string length
00006bc: 6936 342e 7368 725f 75                   i64.shr_u  ; export name
00006c5: 00                                        ; export kind
00006c6: 71                                        ; export func index
00006c7: 08                                        ; string length
00006c8: 6936 342e 726f 746c                      i64.rotl  ; export name
00006d0: 00                                        ; export kind
00006d1: 72                                        ; export func index
00006d2: 08                                        ; string length
00006d3: 6936 342e 726f 7472                      i64.rotr  ; export name
00006db: 00                                        ; export kind
00006dc: 73                                        ; export func index
00006dd: 07                                        ; string length
00006de: 6633 322e 6162 73                        f32.abs  ; export name
00006e5: 00                                        ; export kind
00006e6: 74                                        ; export func index
00006e7: 07                                        ; string length
00006e8: 6633 322e 6e65 67                        f32.neg  ; export name
00006ef: 00                                        ; export kind
00006f0: 75                                        ; export func index
00006f1: 08                                        ; string length
00006f2: 6633 322e 6365 696c                      f32.ceil  ; export name
00006fa: 00                                        ; export kind
00006fb: 76                                        ; export func index
00006fc: 09                                        ; string length
00006fd: 6633 322e 666c 6f6f 72                   f32.floor  ; export name
0000706: 00                                        ; export kind
0000707: 77                                        ; export func index
0000708: 09                                        ; string length
0000709: 6633 322e 7472 756e 63                   f32.trunc  ; export name
0000712: 00                                        ; export kind
0000713: 78                                        ; export func index
0000714: 0b                                        ; string length
0000715: 6633 322e 6e65 6172 6573 74              f32.nearest  ; export name
0000720: 00                                        ; export kind
0000721: 79                                        ; export func index
0000722: 08                                        ; string length
0000723: 6633 322e 7371 7274                      f32.sqrt  ; export name
000072b: 00                                        ; export kind
000072c: 7a                                        ; export func index
000072d: 07                                        ; string length
000072e: 6633 322e 6164 64                        f32.add  ; export name
0000735: 00                                        ; export kind
0000736: 7b                                        ; export func index
0000737: 07                                        ; string length
0000738: 6633 322e 7375 62                        f32.sub  ; export name
000073f: 00                                        ; export kind
0000740: 7c                                        ; export func index
0000741: 07                                        ; string length
0000742: 6633 322e 6d75 6c                        f32.mul  ; export name
0000749: 00                                        ; export kind
000074a: 7d                                        ; export func index
000074b: 07                                        ; string length
000074c: 6633 322e 6469 76                        f32.div  ; export name
0000753: 00                                        ; export kind
0000754: 7e                                        ; export func index
0000755: 07                                        ; string length
0000756: 6633 322e 6d69 6e                        f32.min  ; export name
000075d: 00                                        ; export kind
000075e: 7f                                        ; export func index
000075f: 07                                        ; string length
0000760: 6633 322e 6d61 78                        f32.max  ; export name
0000767: 00                                        ; export kind
0000768: 8001                                      ; export func index
000076a: 0c                                        ; string length
000076b: 6633 322e 636f 7079 7369 676e            f32.copysign  ; export name
0000777: 00                                        ; export kind
0000778: 8101                                      ; export func index
000077a: 07                                        ; string length
000077b: 6636 342e 6162 73                        f64.abs  ; export name
0000782: 00                                        ; export kind
0000783: 8201                                      ; export func index
0000785: 07                                        ; string length
0000786: 6636 342e 6e65 67                        f64.neg  ; export name
000078d: 00                                        ; export kind
000078e: 8301                                      ; export func index
0000790: 08                                        ; string length
0000791: 6636 342e 6365 696c                      f64.ceil  ; export name
0000799: 00                                        ; export kind
000079a: 8401                                      ; export func index
000079c: 09                                        ; string length
000079d: 6636 342e 666c 6f6f 72                   f64.floor  ; export name
00007a6: 00                                        ; export kind
00007a7: 8501                                      ; export func index
00007a9: 09                                        ; string length
00007aa: 6636 342e 7472 756e 63                   f64.trunc  ; export name
00007b3: 00                                        ; export kind
00007b4: 8601                                      ; export func index
00007b6: 0b                                        ; string length
00007b7: 6636 342e 6e65 6172 6573 74              f64.nearest  ; export name
00007c2: 00                                        ; export kind
00007c3: 8701                                      ; export func index
00007c5: 08                                        ; string length
00007c6: 6636 342e 7371 7274                      f64.sqrt  ; export name
00007ce: 00                                        ; export kind
00007cf: 8801                                      ; export func index
00007d1: 07                                        ; string length
00007d2: 6636 342e 6164 64                        f64.add  ; export name
00007d9: 00                                        ; export kind
00007da: 8901                                      ; export func index
00007dc: 07                                        ; string length
00007dd: 6636 342e 7375 62                        f64.sub  ; export name
00007e4: 00                                        ; export kind
00007e5: 8a01                                      ; export func index
00007e7: 07                                        ; string length
00007e8: 6636 342e 6d75 6c                        f64.mul  ; export name
00007ef: 00                                        ; export kind
00007f0: 8b01                                      ; export func index
00007f2: 07                                        ; string length
00007f3: 6636 342e 6469 76                        f64.div  ; export name
00007fa: 00                                        ; export kind
00007fb: 8c01                                      ; export func index
00007fd: 07                                        ; string length
00007fe: 6636 342e 6d69 6e                        f64.min  ; export name
0000805: 00                                        ; export kind
0000806: 8d01                                      ; export func index
0000808: 07                                        ; string length
0000809: 6636 342e 6d61 78                        f64.max  ; export name
0000810: 00                                        ; export kind
0000811: 8e01                                      ; export func index
0000813: 0c                                        ; string length
0000814: 6636 342e 636f 7079 7369 676e            f64.copysign  ; export name
0000820: 00                                        ; export kind
0000821: 8f01                                      ; export func index
0000823: 0c                                        ; string length
0000824: 6933 322e 7772 6170 2f69 3634            i32.wrap/i64  ; export name
0000830: 00                                        ; export kind
0000831: 9001                                      ; export func index
0000833: 0f                                        ; string length
0000834: 6933 322e 7472 756e 635f 732f 6633 32    i32.trunc_s/f32  ; export name
0000843: 00                                        ; export kind
0000844: 9101                                      ; export func index
0000846: 0f                                        ; string length
0000847: 6933 322e 7472 756e 635f 752f 6633 32    i32.trunc_u/f32  ; export name
0000856: 00                                        ; export kind
0000857: 9201                                      ; export func index
0000859: 0f                                        ; string length
000085a: 6933 322e 7472 756e 635f 732f 6636 34    i32.trunc_s/f64  ; export name
0000869: 00                                        ; export kind
000086a: 9301                                      ; export func index
000086c: 0f                                        ; string length
000086d: 6933 322e 7472 756e 635f 752f 6636 34    i32.trunc_u/f64  ; export name
000087c: 00                                        ; export kind
000087d: 9401                                      ; export func index
000087f: 10                                        ; string length
0000880: 6936 342e 6578 7465 6e64 5f73 2f69 3332  i64.extend_s/i32  ; export name
0000890: 00                                        ; export kind
0000891: 9501                                      ; export func index
0000893: 10                                        ; string length
0000894: 6936 342e 6578 7465 6e64 5f75 2f69 3332  i64.extend_u/i32  ; export name
00008a4: 00                                        ; export kind
00008a5: 9601                                      ; export func index
00008a7: 0f                                        ; string length
00008a8: 6936 342e 7472 756e 635f 732f 6633 32    i64.trunc_s/f32  ; export name
00008b7: 00                                        ; export kind
00008b8: 9701                                      ; export func index
00008ba: 0f                                        ; string length
00008bb: 6936 342e 7472 756e 635f 752f 6633 32    i64.trunc_u/f32  ; export name
00008ca: 00                                        ; export kind
00008cb: 9801                                      ; export func index
00008cd: 0f                                        ; string length
00008ce: 6936 342e 7472 756e 635f 732f 6636 34    i64.trunc_s/f64  ; export name
00008dd: 00                                        ; export kind
00008de: 9901                                      ; export func index
00008e0: 0f                                        ; string length
00008e1: 6936 342e 7472 756e 635f 752f 6636 34    i64.trunc_u/f64  ; export name
00008f0: 00                                        ; export kind
00008f1: 9a01                                      ; export func index
00008f3: 11                                        ; string length
00008f4: 6633 322e 636f 6e76 6572 745f 732f 6933  f32.convert_s/i3
0000904: 32                                       2  ; export name
0000905: 00                                        ; export kind
0000906: 9b01                                      ; export func index
0000908: 11                                        ; string length
0000909: 6633 322e 636f 6e76 6572 745f 752f 6933  f32.convert_u/i3
0000919: 32                                       2  ; export name
000091a: 00                                        ; export kind
000091b: 9c01                                      ; export func index
000091d: 11                                        ; string length
000091e: 6633 322e 636f 6e76 6572 745f 732f 6936  f32.convert_s/i6
000092e: 34                                       4  ; export name
000092f: 00                                        ; export kind
0000930: 9d01                                      ; export func index
0000932: 11                                        ; string length
0000933: 6633 322e 636f 6e76 6572 745f 752f 6936  f32.convert_u/i6
0000943: 34                                       4  ; export name
0000944: 00                                        ; export kind
0000945: 9e01                                      ; export func index
0000947: 0e                                        ; string length
0000948: 6633 322e 6465 6d6f 7465 2f66 3634       f32.demote/f64  ; export name
0000956: 00                                        ; export kind
0000957: 9f01                                      ; export func index
0000959: 11                                        ; string length
000095a: 6636 342e 636f 6e76 6572 745f 732f 6933  f64.convert_s/i3
000096a: 32                                       2  ; export name
000096b: 00                                        ; export kind
000096c: a001                                      ; export func index
000096e: 11                                        ; string length
000096f: 6636 342e 636f 6e76 6572 745f 752f 6933  f64.convert_u/i3
000097f: 32                                       2  ; export name
0000980: 00                                        ; export kind
0000981: a101                                      ; export func index
0000983: 11                                        ; string length
0000984: 6636 342e 636f 6e76 6572 745f 732f 6936  f64.convert_s/i6
0000994: 34                                       4  ; export name
0000995: 00                                        ; export kind
0000996: a201                                      ; export func index
0000998: 11                                        ; string length
0000999: 6636 342e 636f 6e76 6572 745f 752f 6936  f64.convert_u/i6
00009a9: 34                                       4  ; export name
00009aa: 00                                        ; export kind
00009ab: a301                                      ; export func index
00009ad: 0f                                        ; string length
00009ae: 6636 342e 7072 6f6d 6f74 652f 6633 32    f64.promote/f32  ; export name
00009bd: 00                                        ; export kind
00009be: a401                                      ; export func index
00009c0: 13                                        ; string length
00009c1: 6933 322e 7265 696e 7465 7270 7265 742f  i32.reinterpret/
00009d1: 6633 32                                  f32  ; export name
00009d4: 00                                        ; export kind
00009d5: a501                                      ; export func index
00009d7: 13                                        ; string length
00009d8: 6633 322e 7265 696e 7465 7270 7265 742f  f32.reinterpret/
00009e8: 6933 32                                  i32  ; export name
00009eb: 00                                        ; export kind
00009ec: a601                                      ; export func index
00009ee: 13                                        ; string length
00009ef: 6936 342e 7265 696e 7465 7270 7265 742f  i64.reinterpret/
00009ff: 6636 34                                  f64  ; export name
0000a02: 00                                        ; export kind
0000a03: a701                                      ; export func index
0000a05: 13                                        ; string length
0000a06: 6636 342e 7265 696e 7465 7270 7265 742f  f64.reinterpret/
0000a16: 6936 34                                  i64  ; export name
0000a19: 00                                        ; export kind
0000a1a: a801                                      ; export func index
0000a1c: 0d                                        ; string length
0000a1d: 6933 322e 6578 7465 6e64 385f 73         i32.extend8_s  ; export name
0000a2a: 00                                        ; export kind
0000a2b: a901                                      ; export func index
0000a2d: 0e                                        ; string length
0000a2e: 6933 322e 6578 7465 6e64 3136 5f73       i32.extend16_s  ; export name
0000a3c: 00                                        ; export kind
0000a3d: aa01                                      ; export func index
0000a3f: 0d                                        ; string length
0000a40: 6936 342e 6578 7465 6e64 385f 73         i64.extend8_s  ; export name
0000a4d: 00                                        ; export kind
0000a4e: ab01                                      ; export func index
0000a50: 0e                                        ; string length
0000a51: 6936 342e 6578 7465 6e64 3136 5f73       i64.extend16_s  ; export name
0000a5f: 00                                        ; export kind
0000a60: ac01                                      ; export func index
0000a62: 0e                                        ; string length
0000a63: 6936 342e 6578 7465 6e64 3332 5f73       i64.extend32_s  ; export name
0000a71: 00                                        ; export kind
0000a72: ad01                                      ; export func index
0000a74: 06                                        ; string length
0000a75: 616c 6c6f 6361                           alloca  ; export name
0000a7b: 00                                        ; export kind
0000a7c: ae01                                      ; export func index
0000a7e: 09                                        ; string length
0000a7f: 6272 5f75 6e6c 6573 73                   br_unless  ; export name
0000a88: 00                                        ; export kind
0000a89: af01                                      ; export func index
0000a8b: 09                                        ; string length
0000a8c: 6361 6c6c 5f68 6f73 74                   call_host  ; export name
0000a95: 00                                        ; export kind
0000a96: b001                                      ; export func index
0000a98: 04                                        ; string length
0000a99: 6461 7461                                data  ; export name
0000a9d: 00                                        ; export kind
0000a9e: b101                                      ; export func index
0000aa0: 09                                        ; string length
0000aa1: 6472 6f70 5f6b 6565 70                   drop_keep  ; export name
0000aaa: 00                                        ; export kind
0000aab: b201                                      ; export func index
0000aad: 13                                        ; string length
0000aae: 6933 322e 7472 756e 635f 733a 7361 742f  i32.trunc_s:sat/
0000abe: 6633 32                                  f32  ; export name
0000ac1: 00                                        ; export kind
0000ac2: b301                                      ; export func index
0000ac4: 13                                        ; string length
0000ac5: 6933 322e 7472 756e 635f 753a 7361 742f  i32.trunc_u:sat/
0000ad5: 6633 32                                  f32  ; export name
0000ad8: 00                                        ; export kind
0000ad9: b401                                      ; export func index
0000adb: 13                                        ; string length
0000adc: 6933 322e 7472 756e 635f 733a 7361 742f  i32.trunc_s:sat/
0000aec: 6636 34                                  f64  ; export name
0000aef: 00                                        ; export kind
0000af0: b501                                      ; export func index
0000af2: 13                                        ; string length
0000af3: 6933 322e 7472 756e 635f 753a 7361 742f  i32.trunc_u:sat/
0000b03: 6636 34                                  f64  ; export name
0000b06: 00                                        ; export kind
0000b07: b601                                      ; export func index
0000b09: 13                                        ; string length
0000b0a: 6936 342e 7472 756e 635f 733a 7361 742f  i64.trunc_s:sat/
0000b1a: 6633 32                                  f32  ; export name
0000b1d: 00                                        ; export kind
0000b1e: b701                                      ; export func index
0000b20: 13                                        ; string length
0000b21: 6936 342e 7472 756e 635f 753a 7361 742f  i64.trunc_u:sat/
0000b31: 6633 32                                  f32  ; export name
0000b34: 00                                        ; export kind
0000b35: b801                                      ; export func index
0000b37: 13                                        ; string length
0000b38: 6936 342e 7472 756e 635f 733a 7361 742f  i64.trunc_s:sat/
0000b48: 6636 34                                  f64  ; export name
0000b4b: 00                                        ; export kind
0000b4c: b901                                      ; export func index
0000b4e: 13                                        ; string length
0000b4f: 6936 342e 7472 756e 635f 753a 7361 742f  i64.trunc_u:sat/
0000b5f: 6636 34                                  f64  ; export name
0000b62: 00                                        ; export kind
0000b63: ba01                                      ; export func index
0000b65: 0b                                        ; string length
0000b66: 6d65 6d6f 7279 2e69 6e69 74              memory.init  ; export name
0000b71: 00                                        ; export kind
0000b72: bb01                                      ; export func index
0000b74: 09                                        ; string length
0000b75: 6461 7461 2e64 726f 70                   data.drop  ; export name
0000b7e: 00                                        ; export kind
0000b7f: bc01                                      ; export func index
0000b81: 0b                                        ; string length
0000b82: 6d65 6d6f 7279 2e63 6f70 79              memory.copy  ; export name
0000b8d: 00                                        ; export kind
0000b8e: bd01                                      ; export func index
0000b90: 0b                                        ; string length
0000b91: 6d65 6d6f 7279 2e66 696c 6c              memory.fill  ; export name
0000b9c: 00                                        ; export kind
0000b9d: be01                                      ; export func index
0000b9f: 0a                                        ; string length
0000ba0: 7461 626c 652e 696e 6974                 table.init  ; export name
0000baa: 00                                        ; export kind
0000bab: bf01                                      ; export func index
0000bad: 09                                        ; string length
0000bae: 656c 656d 2e64 726f 70                   elem.drop  ; export name
0000bb7: 00                                        ; export kind
0000bb8: c001                                      ; export func index
0000bba: 0a                                        ; string length
0000bbb: 7461 626c 652e 636f 7079                 table.copy  ; export name
0000bc5: 00                                        ; export kind
0000bc6: c101                                      ; export func index
0000bc8: 09                                        ; string length
0000bc9: 7631 3238 2e6c 6f61 64                   v128.load  ; export name
0000bd2: 00                                        ; export kind
0000bd3: c201                                      ; export func index
0000bd5: 0a                                        ; string length
0000bd6: 7631 3238 2e73 746f 7265                 v128.store  ; export name
0000be0: 00                                        ; export kind
0000be1: c301                                      ; export func index
0000be3: 0a                                        ; string length
0000be4: 7631 3238 2e63 6f6e 7374                 v128.const  ; export name
0000bee: 00                                        ; export kind
0000bef: c401                                      ; export func index
0000bf1: 0d                                        ; string length
0000bf2: 7638 7831 362e 7368 7566 666c 65         v8x16.shuffle  ; export name
0000bff: 00                                        ; export kind
0000c00: c501                                      ; export func index
0000c02: 0b                                        ; string length
0000c03: 6938 7831 362e 7370 6c61 74              i8x16.splat  ; export name
0000c0e: 00                                        ; export kind
0000c0f: c601                                      ; export func index
0000c11: 14                                        ; string length
0000c12: 6938 7831 362e 6578 7472 6163 745f 6c61  i8x16.extract_la
0000c22: 6e65 5f73                                ne_s  ; export name
0000c26: 00                                        ; export kind
0000c27: c701                                      ; export func index
0000c29: 14                                        ; string length
0000c2a: 6938 7831 362e 6578 7472 6163 745f 6c61  i8x16.extract_la
0000c3a: 6e65 5f75                                ne_u  ; export name
0000c3e: 00                                        ; export kind
0000c3f: c801                                      ; export func index
0000c41: 12                                        ; string length
0000c42: 6938 7831 362e 7265 706c 6163 655f 6c61  i8x16.replace_la
0000c52: 6e65                                     ne  ; export name
0000c54: 00                                        ; export kind
0000c55: c901                                      ; export func index
0000c57: 0b                                        ; string length
0000c58: 6931 3678 382e 7370 6c61 74              i16x8.splat  ; export name
0000c63: 00                                        ; export kind
0000c64: ca01                                      ; export func index
0000c66: 14                                        ; string length
0000c67: 6931 3678 382e 6578 7472 6163 745f 6c61  i16x8.extract_la
0000c77: 6e65 5f73                                ne_s  ; export name
0000c7b: 00                                        ; export kind
0000c7c: cb01                                      ; export func index
0000c7e: 14                                        ; string length
0000c7f: 6931 3678 382e 6578 7472 6163 745f 6c61  i16x8.extract_la
0000c8f: 6e65 5f75                                ne_u  ; export name
0000c93: 00                                        ; export kind
0000c94: cc01                                      ; export func index
0000c96: 12                                        ; string length
0000c97: 6931 3678 382e 7265 706c 6163 655f 6c61  i16x8.replace_la
0000ca7: 6e65                                     ne  ; export name
0000ca9: 00                                        ; export kind
0000caa: cd01                                      ; export func index
0000cac: 0b                                        ; string length
0000cad: 6933 3278 342e 7370 6c61 74              i32x4.splat  ; export name
0000cb8: 00                                        ; export kind
0000cb9: ce01                                      ; export func index
0000cbb: 12                                        ; string length
0000cbc: 6933 3278 342e 6578 7472 6163 745f 6c61  i32x4.extract_la
0000ccc: 6e65                                     ne  ; export name
0000cce: 00                                        ; export kind
0000ccf: cf01                                      ; export func index
0000cd1: 12                                        ; string length
0000cd2: 6933 3278 342e 7265 706c 6163 655f 6c61  i32x4.replace_la
0000ce2: 6e65                                     ne  ; export name
0000ce4: 00                                        ; export kind
0000ce5: d001                                      ; export func index
0000ce7: 0b                                        ; string length
0000ce8: 6936 3478 322e 7370 6c61 74              i64x2.splat  ; export name
0000cf3: 00                                        ; export kind
0000cf4: d101                                      ; export func index
0000cf6: 12                                        ; string length
0000cf7: 6936 3478 322e 6578 7472 6163 745f 6c61  i64x2.extract_la
0000d07: 6e65                                     ne  ; export name
0000d09: 00                                        ; export kind
0000d0a: d201                                      ; export func index
0000d0c: 12                                        ; string length
0000d0d: 6936 3478 322e 7265 706c 6163 655f 6c61  i64x2.replace_la
0000d1d: 6e65                                     ne  ; export name
0000d1f: 00                                        ; export kind
0000d20: d301                                      ; export func index
0000d22: 0b                                        ; string length
0000d23: 6633 3278 342e 7370 6c61 74              f32x4.splat  ; export name
0000d2e: 00                                        ; export kind
0000d2f: d401                                      ; export func index
0000d31: 12                                        ; string length
0000d32: 6633 3278 342e 6578 7472 6163 745f 6c61  f32x4.extract_la
0000d42: 6e65                                     ne  ; export name
0000d44: 00                                        ; export kind
0000d45: d501                                      ; export func index
0000d47: 12                                        ; string length
0000d48: 6633 3278 342e 7265 706c 6163 655f 6c61  f32x4.replace_la
0000d58: 6e65                                     ne  ; export name
0000d5a: 00                                        ; export kind
0000d5b: d601                                      ; export func index
0000d5d: 0b                                        ; string length
0000d5e: 6636 3478 322e 7370 6c61 74              f64x2.splat  ; export name
0000d69: 00                                        ; export kind
0000d6a: d701                                      ; export func index
0000d6c: 12                                        ; string length
0000d6d: 6636 3478 322e 6578 7472 6163 745f 6c61  f64x2.extract_la
0000d7d: 6e65                                     ne  ; export name
0000d7f: 00                                        ; export kind
0000d80: d801                                      ; export func index
0000d82: 12                                        ; string length
0000d83: 6636 3478 322e 7265 706c 6163 655f 6c61  f64x2.replace_la
0000d93: 6e65                                     ne  ; export name
0000d95: 00                                        ; export kind
0000d96: d901                                      ; export func index
0000d98: 08                                        ; string length
0000d99: 6938 7831 362e 6571                      i8x16.eq  ; export name
0000da1: 00                                        ; export kind
0000da2: da01                                      ; export func index
0000da4: 08                                        ; string length
0000da5: 6938 7831 362e 6e65                      i8x16.ne  ; export name
0000dad: 00                                        ; export kind
0000dae: db01                                      ; export func index
0000db0: 0a                                        ; string length
0000db1: 6938 7831 362e 6c74 5f73                 i8x16.lt_s  ; export name
0000dbb: 00                                        ; export kind
0000dbc: dc01                                      ; export func index
0000dbe: 0a                                        ; string length
0000dbf: 6938 7831 362e 6c74 5f75                 i8x16.lt_u  ; export name
0000dc9: 00                                        ; export kind
0000dca: dd01                                      ; export func index
0000dcc: 0a                                        ; string length
0000dcd: 6938 7831 362e 6774 5f73                 i8x16.gt_s  ; export name
0000dd7: 00                                        ; export kind
0000dd8: de01                                      ; export func index
0000dda: 0a                                        ; string length
0000ddb: 6938 7831 362e 6774 5f75                 i8x16.gt_u  ; export name
0000de5: 00                                        ; export kind
0000de6: df01                                      ; export func index
0000de8: 0a                                        ; string length
0000de9: 6938 7831 362e 6c65 5f73                 i8x16.le_s  ; export name
0000df3: 00                                        ; export kind
0000df4: e001                                      ; export func index
0000df6: 0a                                        ; string length
0000df7: 6938 7831 362e 6c65 5f75                 i8x16.le_u  ; export name
0000e01: 00                                        ; export kind
0000e02: e101                                      ; export func index
0000e04: 0a                                        ; string length
0000e05: 6938 7831 362e 6765 5f73                 i8x16.ge_s  ; export name
0000e0f: 00                                        ; export kind
0000e10: e201                                      ; export func index
0000e12: 0a                                        ; string length
0000e13: 6938 7831 362e 6765 5f75                 i8x16.ge_u  ; export name
0000e1d: 00                                        ; export kind
0000e1e: e301                                      ; export func index
0000e20: 08                                        ; string length
0000e21: 6931 3678 382e 6571                      i16x8.eq  ; export name
0000e29: 00                                        ; export kind
0000e2a: e401                                      ; export func index
0000e2c: 08                                        ; string length
0000e2d: 6931 3678 382e 6e65                      i16x8.ne  ; export name
0000e35: 00                                        ; export kind
0000e36: e501                                      ; export func index
0000e38: 0a                                        ; string length
0000e39: 6931 3678 382e 6c74 5f73                 i16x8.lt_s  ; export name
0000e43: 00                                        ; export kind
0000e44: e601                                      ; export func index
0000e46: 0a                                        ; string length
0000e47: 6931 3678 382e 6c74 5f75                 i16x8.lt_u  ; export name
0000e51: 00                                        ; export kind
0000e52: e701                                      ; export func index
0000e54: 0a                                        ; string length
0000e55: 6931 3678 382e 6774 5f73                 i16x8.gt_s  ; export name
0000e5f: 00                                        ; export kind
0000e60: e801                                      ; export func index
0000e62: 0a                                        ; string length
0000e63: 6931 3678 382e 6774 5f75                 i16x8.gt_u  ; export name
0000e6d: 00                                        ; export kind
0000e6e: e901                                      ; export func index
0000e70: 0a                                        ; string length
0000e71: 6931 3678 382e 6c65 5f73                 i16x8.le_s  ; export name
0000e7b: 00                                        ; export kind
0000e7c: ea01                                      ; export func index
0000e7e: 0a                                        ; string length
0000e7f: 6931 3678 382e 6c65 5f75                 i16x8.le_u  ; export name
0000e89: 00                                        ; export kind
0000e8a: eb01                                      ; export func index
0000e8c: 0a                                        ; string length
0000e8d: 6931 3678 382e 6765 5f73                 i16x8.ge_s  ; export name
0000e97: 00                                        ; export kind
0000e98: ec01                                      ; export func index
0000e9a: 0a                                        ; string length
0000e9b: 6931 3678 382e 6765 5f75                 i16x8.ge_u  ; export name
0000ea5: 00                                        ; export kind
0000ea6: ed01                                      ; export func index
0000ea8: 08                                        ; string length
0000ea9: 6933 3278 342e 6571                      i32x4.eq  ; export name
0000eb1: 00                                        ; export kind
0000eb2: ee01                                      ; export func index
0000eb4: 08                                        ; string length
0000eb5: 6933 3278 342e 6e65                      i32x4.ne  ; export name
0000ebd: 00                                        ; export kind
0000ebe: ef01                                      ; export func index
0000ec0: 0a                                        ; string length
0000ec1: 6933 3278 342e 6c74 5f73                 i32x4.lt_s  ; export name
0000ecb: 00                                        ; export kind
0000ecc: f001                                      ; export func index
0000ece: 0a                                        ; string length
0000ecf: 6933 3278 342e 6c74 5f75                 i32x4.lt_u  ; export name
0000ed9: 00                                        ; export kind
0000eda: f101                                      ; export func index
0000edc: 0a                                        ; string length
0000edd: 6933 3278 342e 6774 5f73                 i32x4.gt_s  ; export name
0000ee7: 00                                        ; export kind
0000ee8: f201                                      ; export func index
0000eea: 0a                                        ; string length
0000eeb: 6933 3278 342e 6774 5f75                 i32x4.gt_u  ; export name
0000ef5: 00                                        ; export kind
0000ef6: f301                                      ; export func index
0000ef8: 0a                                        ; string length
0000ef9: 6933 3278 342e 6c65 5f73                 i32x4.le_s  ; export name
0000f03: 00                                        ; export kind
0000f04: f401                                      ; export func index
0000f06: 0a                                        ; string length
0000f07: 6933 3278 342e 6c65 5f75                 i32x4.le_u  ; export name
0000f11: 00                                        ; export kind
0000f12: f501                                      ; export func index
0000f14: 0a                                        ; string length
0000f15: 6933 3278 342e 6765 5f73                 i32x4.ge_s  ; export name
0000f1f: 00                                        ; export kind
0000f20: f601                                      ; export func index
0000f22: 0a                                        ; string length
0000f23: 6933 3278 342e 6765 5f75                 i32x4.ge_u  ; export name
0000f2d: 00                                        ; export kind
0000f2e: f701                                      ; export func index
0000f30: 08                                        ; string length
0000f31: 6633 3278 342e 6571                      f32x4.eq  ; export name
0000f39: 00                                        ; export kind
0000f3a: f801                                      ; export func index
0000f3c: 08                                        ; string length
0000f3d: 6633 3278 342e 6e65                      f32x4.ne  ; export name
0000f45: 00                                        ; export kind
0000f46: f901                                      ; export func index
0000f48: 08                                        ; string length
0000f49: 6633 3278 342e 6c74                      f32x4.lt  ; export name
0000f51: 00                                        ; export kind
0000f52: fa01                                      ; export func index
0000f54: 08                                        ; string length
0000f55: 6633 3278 342e 6774                      f32x4.gt  ; export name
0000f5d: 00                                        ; export kind
0000f5e: fb01                                      ; export func index
0000f60: 08                                        ; string length
0000f61: 6633 3278 342e 6c65                      f32x4.le  ; export name
0000f69: 00                                        ; export kind
0000f6a: fc01                                      ; export func index
0000f6c: 08                                        ; string length
0000f6d: 6633 3278 342e 6765                      f32x4.ge  ; export name
0000f75: 00                                        ; export kind
0000f76: fd01                                      ; export func index
0000f78: 08                                        ; string length
0000f79: 6636 3478 322e 6571                      f64x2.eq  ; export name
0000f81: 00                                        ; export kind
0000f82: fe01                                      ; export func index
0000f84: 08                                        ; string length
0000f85: 6636 3478 322e 6e65                      f64x2.ne  ; export name
0000f8d: 00                                        ; export kind
0000f8e: ff01                                      ; export func index
0000f90: 08                                        ; string length
0000f91: 6636 3478 322e 6c74                      f64x2.lt  ; export name
0000f99: 00                                        ; export kind
0000f9a: 8002                                      ; export func index
0000f9c: 08                                        ; string length
0000f9d: 6636 3478 322e 6774                      f64x2.gt  ; export name
0000fa5: 00                                        ; export kind
0000fa6: 8102                                      ; export func index
0000fa8: 08                                        ; string length
0000fa9: 6636 3478 322e 6c65                      f64x2.le  ; export name
0000fb1: 00                                        ; export kind
0000fb2: 8202                                      ; export func index
0000fb4: 08                                        ; string length
0000fb5: 6636 3478 322e 6765                      f64x2.ge  ; export name
0000fbd: 00                                        ; export kind
0000fbe: 8302                                      ; export func index
0000fc0: 08                                        ; string length
0000fc1: 7631 3238 2e6e 6f74                      v128.not  ; export name
0000fc9: 00                                        ; export kind
0000fca: 8402                                      ; export func index
0000fcc: 08                                        ; string length
0000fcd: 7631 3238 2e61 6e64                      v128.and  ; export name
0000fd5: 00                                        ; export kind
0000fd6: 8502                                      ; export func index
0000fd8: 07                                        ; string length
0000fd9: 7631 3238 2e6f 72                        v128.or  ; export name
0000fe0: 00                                        ; export kind
0000fe1: 8602                                      ; export func index
0000fe3: 08                                        ; string length
0000fe4: 7631 3238 2e78 6f72                      v128.xor  ; export name
0000fec: 00                                        ; export kind
0000fed: 8702                                      ; export func index
0000fef: 0e                                        ; string length
0000ff0: 7631 3238 2e62 6974 7365 6c65 6374       v128.bitselect  ; export name
0000ffe: 00                                        ; export kind
0000fff: 8802                                      ; export func index
0001001: 09                                        ; string length
0001002: 6938 7831 362e 6e65 67                   i8x16.neg  ; export name
000100b: 00                                        ; export kind
000100c: 8902                                      ; export func index
000100e: 0e                                        ; string length
000100f: 6938 7831 362e 616e 795f 7472 7565       i8x16.any_true  ; export name
000101d: 00                                        ; export kind
000101e: 8a02                                      ; export func index
0001020: 0e                                        ; string length
0001021: 6938 7831 362e 616c 6c5f 7472 7565       i8x16.all_true  ; export name
000102f: 00                                        ; export kind
0001030: 8b02                                      ; export func index
0001032: 09                                        ; string length
0001033: 6938 7831 362e 7368 6c                   i8x16.shl  ; export name
000103c: 00                                        ; export kind
000103d: 8c02                                      ; export func index
000103f: 0b                                        ; string length
0001040: 6938 7831 362e 7368 725f 73              i8x16.shr_s  ; export name
000104b: 00                                        ; export kind
000104c: 8d02                                      ; export func index
000104e: 0b                                        ; string length
000104f: 6938 7831 362e 7368 725f 75              i8x16.shr_u  ; export name
000105a: 00                                        ; export kind
000105b: 8e02                                      ; export func index
000105d: 09                                        ; string length
000105e: 6938 7831 362e 6164 64                   i8x16.add  ; export name
0001067: 00                                        ; export kind
0001068: 8f02                                      ; export func index
000106a: 14                                        ; string length
000106b: 6938 7831 362e 6164 645f 7361 7475 7261  i8x16.add_satura
000107b: 7465 5f73                                te_s  ; export name
000107f: 00                                        ; export kind
0001080: 9002                                      ; export func index
0001082: 14                                        ; string length
0001083: 6938 7831 362e 6164 645f 7361 7475 7261  i8x16.add_satura
0001093: 7465 5f75                                te_u  ; export name
0001097: 00                                        ; export kind
0001098: 9102                                      ; export func index
000109a: 09                                        ; string length
000109b: 6938 7831 362e 7375 62                   i8x16.sub  ; export name
00010a4: 00                                        ; export kind
00010a5: 9202                                      ; export func index
00010a7: 14                                        ; string length
00010a8: 6938 7831 362e 7375 625f 7361 7475 7261  i8x16.sub_satura
00010b8: 7465 5f73                                te_s  ; export name
00010bc: 00                                        ; export kind
00010bd: 9302                                      ; export func index
00010bf: 14                                        ; string length
00010c0: 6938 7831 362e 7375 625f 7361 7475 7261  i8x16.sub_satura
00010d0: 7465 5f75                                te_u  ; export name
00010d4: 00                                        ; export kind
00010d5: 9402                                      ; export func index
00010d7: 09                                        ; string length
00010d8: 6938 7831 362e 6d75 6c                   i8x16.mul  ; export name
00010e1: 00                                        ; export kind
00010e2: 9502                                      ; export func index
00010e4: 09                                        ; string length
00010e5: 6931 3678 382e 6e65 67                   i16x8.neg  ; export name
00010ee: 00                                        ; export kind
00010ef: 9602                                      ; export func index
00010f1: 0e                                        ; string length
00010f2: 6931 3678 382e 616e 795f 7472 7565       i16x8.any_true  ; export name
0001100: 00                                        ; export kind
0001101: 9702                                      ; export func index
0001103: 0e                                        ; string length
0001104: 6931 3678 382e 616c 6c5f 7472 7565       i16x8.all_true  ; export name
0001112: 00                                        ; export kind
0001113: 9802                                      ; export func index
0001115: 09                                        ; string length
0001116: 6931 3678 382e 7368 6c                   i16x8.shl  ; export name
000111f: 00                                        ; export kind
0001120: 9902                                      ; export func index
0001122: 0b                                        ; string length
0001123: 6931 3678 382e 7368 725f 73              i16x8.shr_s  ; export name
000112e: 00                                        ; export kind
000112f: 9a02                                      ; export func index
0001131: 0b                                        ; string length
0001132: 6931 3678 382e 7368 725f 75              i16x8.shr_u  ; export name
000113d: 00                                        ; export kind
000113e: 9b02                                      ; export func index
0001140: 09                                        ; string length
0001141: 6931 3678 382e 6164 64                   i16x8.add  ; export name
000114a: 00                                        ; export kind
000114b: 9c02                                      ; export func index
000114d: 14                                        ; string length
000114e: 6931 3678 382e 6164 645f 7361 7475 7261  i16x8.add_satura
000115e: 7465 5f73                                te_s  ; export name
0001162: 00                                        ; export kind
0001163: 9d02                                      ; export func index
0001165: 14                                        ; string length
0001166: 6931 3678 382e 6164 645f 7361 7475 7261  i16x8.add_satura
0001176: 7465 5f75                                te_u  ; export name
000117a: 00                                        ; export kind
000117b: 9e02                                      ; export func index
000117d: 09                                        ; string length
000117e: 6931 3678 382e 7375 62                   i16x8.sub  ; export name
0001187: 00                                        ; export kind
0001188: 9f02                                      ; export func index
000118a: 14                                        ; string length
000118b: 6931 3678 382e 7375 625f 7361 7475 7261  i16x8.sub_satura
000119b: 7465 5f73                                te_s  ; export name
000119f: 00                                        ; export kind
00011a0: a002                                      ; export func index
00011a2: 14                                        ; string length
00011a3: 6931 3678 382e 7375 625f 7361 7475 7261  i16x8.sub_satura
00011b3: 7465 5f75                                te_u  ; export name
00011b7: 00                                        ; export kind
00011b8: a102                                      ; export func index
00011ba: 09                                        ; string length
00011bb: 6931 3678 382e 6d75 6c                   i16x8.mul  ; export name
00011c4: 00                                        ; export kind
00011c5: a202                                      ; export func index
00011c7: 09                                        ; string length
00011c8: 6933 3278 342e 6e65 67                   i32x4.neg  ; export name
00011d1: 00                                        ; export kind
00011d2: a302                                      ; export func index
00011d4: 0e                                        ; string length
00011d5: 6933 3278 342e 616e 795f 7472 7565       i32x4.any_true  ; export name
00011e3: 00                                        ; export kind
00011e4: a402                                      ; export func index
00011e6: 0e                                        ; string length
00011e7: 6933 3278 342e 616c 6c5f 7472 7565       i32x4.all_true  ; export name
00011f5: 00                                        ; export kind
00011f6: a502                                      ; export func index
00011f8: 09                                        ; string length
00011f9: 6933 3278 342e 7368 6c                   i32x4.shl  ; export name
0001202: 00                                        ; export kind
0001203: a602                                      ; export func index
0001205: 0b                                        ; string length
0001206: 6933 3278 342e 7368 725f 73              i32x4.shr_s  ; export name
0001211: 00                                        ; export kind
0001212: a702                                      ; export func index
0001214: 0b                                        ; string length
0001215: 6933 3278 342e 7368 725f 75              i32x4.shr_u  ; export name
0001220: 00                                        ; export kind
0001221: a802                                      ; export func index
0001223: 09                                        ; string length
0001224: 6933 3278 342e 6164 64                   i32x4.add  ; export name
000122d: 00                                        ; export kind
000122e: a902                                      ; export func index
0001230: 09                                        ; string length
0001231: 6933 3278 342e 7375 62                   i32x4.sub  ; export name
000123a: 00                                        ; export kind
000123b: aa02                                      ; export func index
000123d: 09                                        ; string length
000123e: 6933 3278 342e 6d75 6c                   i32x4.mul  ; export name
0001247: 00                                        ; export kind
0001248: ab02                                      ; export func index
000124a: 09                                        ; string length
000124b: 6936 3478 322e 6e65 67                   i64x2.neg  ; export name
0001254: 00                                        ; export kind
0001255: ac02                                      ; export func index
0001257: 0e                                        ; string length
0001258: 6936 3478 322e 616e 795f 7472 7565       i64x2.any_true  ; export name
0001266: 00                                        ; export kind
0001267: ad02                                      ; export func index
0001269: 0e                                        ; string length
000126a: 6936 3478 322e 616c 6c5f 7472 7565       i64x2.all_true  ; export name
0001278: 00                                        ; export kind
0001279: ae02                                      ; export func index
000127b: 09                                        ; string length
000127c: 6936 3478 322e 7368 6c                   i64x2.shl  ; export name
0001285: 00                                        ; export kind
0001286: af02                                      ; export func index
0001288: 0b                                        ; string length
0001289: 6936 3478 322e 7368 725f 73              i64x2.shr_s  ; export name
0001294: 00                                        ; export kind
0001295: b002                                      ; export func index
0001297: 0b                                        ; string length
0001298: 6936 3478 322e 7368 725f 75              i64x2.shr_u  ; export name
00012a3: 00                                        ; export kind
00012a4: b102                                      ; export func index
00012a6: 09                                        ; string length
00012a7: 6936 3478 322e 6164 64                   i64x2.add  ; export name
00012b0: 00                                        ; export kind
00012b1: b202                                      ; export func index
00012b3: 09                                        ; string length
00012b4: 6936 3478 322e 7375 62                   i64x2.sub  ; export name
00012bd: 00                                        ; export kind
00012be: b302                                      ; export func index
00012c0: 09                                        ; string length
00012c1: 6633 3278 342e 6162 73                   f32x4.abs  ; export name
00012ca: 00                                        ; export kind
00012cb: b402                                      ; export func index
00012cd: 09                                        ; string length
00012ce: 6633 3278 342e 6e65 67                   f32x4.neg  ; export name
00012d7: 00                                        ; export kind
00012d8: b502                                      ; export func index
00012da: 0a                                        ; string length
00012db: 6633 3278 342e 7371 7274                 f32x4.sqrt  ; export name
00012e5: 00                                        ; export kind
00012e6: b602                                      ; export func index
00012e8: 09                                        ; string length
00012e9: 6633 3278 342e 6164 64                   f32x4.add  ; export name
00012f2: 00                                        ; export kind
00012f3: b702                                      ; export func index
00012f5: 09                                        ; string length
00012f6: 6633 3278 342e 7375 62                   f32x4.sub  ; export name
00012ff: 00                                        ; export kind
0001300: b802                                      ; export func index
0001302: 09                                        ; string length
0001303: 6633 3278 342e 6d75 6c                   f32x4.mul  ; export name
000130c: 00                                        ; export kind
000130d: b902                                      ; export func index
000130f: 09                                        ; string length
0001310: 6633 3278 342e 6469 76                   f32x4.div  ; export name
0001319: 00                                        ; export kind
000131a: ba02                                      ; export func index
000131c: 09                                        ; string length
000131d: 6633 3278 342e 6d69 6e                   f32x4.min  ; export name
0001326: 00                                        ; export kind
0001327: bb02                                      ; export func index
0001329: 09                                        ; string length
000132a: 6633 3278 342e 6d61 78                   f32x4.max  ; export name
0001333: 00                                        ; export kind
0001334: bc02                                      ; export func index
0001336: 09                                        ; string length
0001337: 6636 3478 322e 6162 73                   f64x2.abs  ; export name
0001340: 00                                        ; export kind
0001341: bd02                                      ; export func index
0001343: 09                                        ; string length
0001344: 6636 3478 322e 6e65 67                   f64x2.neg  ; export name
000134d: 00                                        ; export kind
000134e: be02                                      ; export func index
0001350: 0a                                        ; string length
0001351: 6636 3478 322e 7371 7274                 f64x2.sqrt  ; export name
000135b: 00                                        ; export kind
000135c: bf02                                      ; export func index
000135e: 09                                        ; string length
000135f: 6636 3478 322e 6164 64                   f64x2.add  ; export name
0001368: 00                                        ; export kind
0001369: c002                                      ; export func index
000136b: 09                                        ; string length
000136c: 6636 3478 322e 7375 62                   f64x2.sub  ; export name
0001375: 00                                        ; export kind
0001376: c102                                      ; export func index
0001378: 09                                        ; string length
0001379: 6636 3478 322e 6d75 6c                   f64x2.mul  ; export name
0001382: 00                                        ; export kind
0001383: c202                                      ; export func index
0001385: 09                                        ; string length
0001386: 6636 3478 322e 6469 76                   f64x2.div  ; export name
000138f: 00                                        ; export kind
0001390: c302                                      ; export func index
0001392: 09                                        ; string length
0001393: 6636 3478 322e 6d69 6e                   f64x2.min  ; export name
000139c: 00                                        ; export kind
000139d: c402                                      ; export func index
000139f: 09                                        ; string length
00013a0: 6636 3478 322e 6d61 78                   f64x2.max  ; export name
00013a9: 00                                        ; export kind
00013aa: c502                                      ; export func index
00013ac: 17                                        ; string length
00013ad: 6933 3278 342e 7472 756e 635f 7361 745f  i32x4.trunc_sat_
00013bd: 6633 3278 345f 73                        f32x4_s  ; export name
00013c4: 00                                        ; export kind
00013c5: c602                                      ; export func index
00013c7: 17                                        ; string length
00013c8: 6933 3278 342e 7472 756e 635f 7361 745f  i32x4.trunc_sat_
00013d8: 6633 3278 345f 75                        f32x4_u  ; export name
00013df: 00                                        ; export kind
00013e0: c702                                      ; export func index
00013e2: 17                                        ; string length
00013e3: 6936 3478 322e 7472 756e 635f 7361 745f  i64x2.trunc_sat_
00013f3: 6636 3478 325f 73                        f64x2_s  ; export name
00013fa: 00                                        ; export kind
00013fb: c802                                      ; export func index
00013fd: 17                                        ; string length
00013fe: 6936 3478 322e 7472 756e 635f 7361 745f  i64x2.trunc_sat_
000140e: 6636 3478 325f 75                        f64x2_u  ; export name
0001415: 00                                        ; export kind
0001416: c902                                      ; export func index
0001418: 15                                        ; string length
0001419: 6633 3278 342e 636f 6e76 6572 745f 6933  f32x4.convert_i3
0001429: 3278 345f 73                             2x4_s  ; export name
000142e: 00                                        ; export kind
000142f: ca02                                      ; export func index
0001431: 15                                        ; string length
0001432: 6633 3278 342e 636f 6e76 6572 745f 6933  f32x4.convert_i3
0001442: 3278 345f 75                             2x4_u  ; export name
0001447: 00                                        ; export kind
0001448: cb02                                      ; export func index
000144a: 15                                        ; string length
000144b: 6636 3478 322e 636f 6e76 6572 745f 6936  f64x2.convert_i6
000145b: 3478 325f 73                             4x2_s  ; export name
0001460: 00                                        ; export kind
0001461: cc02                                      ; export func index
0001463: 15                                        ; string length
0001464: 6636 3478 322e 636f 6e76 6572 745f 6936  f64x2.convert_i6
0001474: 3478 325f 75                             4x2_u  ; export name
0001479: 00                                        ; export kind
000147a: cd02                                      ; export func index
000147c: 0d                                        ; string length
000147d: 6174 6f6d 6963 2e6e 6f74 6966 79         atomic.notify  ; export name
000148a: 00                                        ; export kind
000148b: ce02                                      ; export func index
000148d: 0f                                        ; string length
000148e: 6933 322e 6174 6f6d 6963 2e77 6169 74    i32.atomic.wait  ; export name
000149d: 00                                        ; export kind
000149e: cf02                                      ; export func index
00014a0: 0f                                        ; string length
00014a1: 6936 342e 6174 6f6d 6963 2e77 6169 74    i64.atomic.wait  ; export name
00014b0: 00                                        ; export kind
00014b1: d002                                      ; export func index
00014b3: 0f                                        ; string length
00014b4: 6933 322e 6174 6f6d 6963 2e6c 6f61 64    i32.atomic.load  ; export name
00014c3: 00                                        ; export kind
00014c4: d102                                      ; export func index
00014c6: 0f                                        ; string length
00014c7: 6936 342e 6174 6f6d 6963 2e6c 6f61 64    i64.atomic.load  ; export name
00014d6: 00                                        ; export kind
00014d7: d202                                      ; export func index
00014d9: 12                                        ; string length
00014da: 6933 322e 6174 6f6d 6963 2e6c 6f61 6438  i32.atomic.load8
00014ea: 5f75                                     _u  ; export name
00014ec: 00                                        ; export kind
00014ed: d302                                      ; export func index
00014ef: 13                                        ; string length
00014f0: 6933 322e 6174 6f6d 6963 2e6c 6f61 6431  i32.atomic.load1
0001500: 365f 75                                  6_u  ; export name
0001503: 00                                        ; export kind
0001504: d402                                      ; export func index
0001506: 12                                        ; string length
0001507: 6936 342e 6174 6f6d 6963 2e6c 6f61 6438  i64.atomic.load8
0001517: 5f75                                     _u  ; export name
0001519: 00                                        ; export kind
000151a: d502                                      ; export func index
000151c: 13                                        ; string length
000151d: 6936 342e 6174 6f6d 6963 2e6c 6f61 6431  i64.atomic.load1
000152d: 365f 75                                  6_u  ; export name
0001530: 00                                        ; export kind
0001531: d602                                      ; export func index
0001533: 13                                        ; string length
0001534: 6936 342e 6174 6f6d 6963 2e6c 6f61 6433  i64.atomic.load3
0001544: 325f 75                                  2_u  ; export name
0001547: 00                                        ; export kind
0001548: d702                                      ; export func index
000154a: 10                                        ; string length
000154b: 6933 322e 6174 6f6d 6963 2e73 746f 7265  i32.atomic.store  ; export name
000155b: 00                                        ; export kind
000155c: d802                                      ; export func index
000155e: 10                                        ; string length
000155f: 6936 342e 6174 6f6d 6963 2e73 746f 7265  i64.atomic.store  ; export name
000156f: 00                                        ; export kind
0001570: d902                                      ; export func index
0001572: 11                                        ; string length
0001573: 6933 322e 6174 6f6d 6963 2e73 746f 7265  i32.atomic.store
0001583: 38                                       8  ; export name
0001584: 00                                        ; export kind
0001585: da02                                      ; export func index
0001587: 12                                        ; string length
0001588: 6933 322e 6174 6f6d 6963 2e73 746f 7265  i32.atomic.store
0001598: 3136                                     16  ; export name
000159a: 00                                        ; export kind
000159b: db02                                      ; export func index
000159d: 11                                        ; string length
000159e: 6936 342e 6174 6f6d 6963 2e73 746f 7265  i64.atomic.store
00015ae: 38                                       8  ; export name
00015af: 00                                        ; export kind
00015b0: dc02                                      ; export func index
00015b2: 12                                        ; string length
00015b3: 6936 342e 6174 6f6d 6963 2e73 746f 7265  i64.atomic.store
00015c3: 3136                                     16  ; export name
00015c5: 00                                        ; export kind
00015c6: dd02                                      ; export func index
00015c8: 12                                        ; string length
00015c9: 6936 342e 6174 6f6d 6963 2e73 746f 7265  i64.atomic.store
00015d9: 3332                                     32  ; export name
00015db: 00                                        ; export kind
00015dc: de02                                      ; export func index
00015de: 12                                        ; string length
00015df: 6933 322e 6174 6f6d 6963 2e72 6d77 2e61  i32.atomic.rmw.a
00015ef: 6464                                     dd  ; export name
00015f1: 00                                        ; export kind
00015f2: df02                                      ; export func index
00015f4: 12                                        ; string length
00015f5: 6936 342e 6174 6f6d 6963 2e72 6d77 2e61  i64.atomic.rmw.a
0001605: 6464                                     dd  ; export name
0001607: 00                                        ; export kind
0001608: e002                                      ; export func index
000160a: 15                                        ; string length
000160b: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
000161b: 6164 645f 75                             add_u  ; export name
0001620: 00                                        ; export kind
0001621: e102                                      ; export func index
0001623: 16                                        ; string length
0001624: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
0001634: 2e61 6464 5f75                           .add_u  ; export name
000163a: 00                                        ; export kind
000163b: e202                                      ; export func index
000163d: 15                                        ; string length
000163e: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
000164e: 6164 645f 75                             add_u  ; export name
0001653: 00                                        ; export kind
0001654: e302                                      ; export func index
0001656: 16                                        ; string length
0001657: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
0001667: 2e61 6464 5f75                           .add_u  ; export name
000166d: 00                                        ; export kind
000166e: e402                                      ; export func index
0001670: 16                                        ; string length
0001671: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
0001681: 2e61 6464 5f75                           .add_u  ; export name
0001687: 00                                        ; export kind
0001688: e502                                      ; export func index
000168a: 12                                        ; string length
000168b: 6933 322e 6174 6f6d 6963 2e72 6d77 2e73  i32.atomic.rmw.s
000169b: 7562                                     ub  ; export name
000169d: 00                                        ; export kind
000169e: e602                                      ; export func index
00016a0: 12                                        ; string length
00016a1: 6936 342e 6174 6f6d 6963 2e72 6d77 2e73  i64.atomic.rmw.s
00016b1: 7562                                     ub  ; export name
00016b3: 00                                        ; export kind
00016b4: e702                                      ; export func index
00016b6: 15                                        ; string length
00016b7: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
00016c7: 7375 625f 75                             sub_u  ; export name
00016cc: 00                                        ; export kind
00016cd: e802                                      ; export func index
00016cf: 16                                        ; string length
00016d0: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
00016e0: 2e73 7562 5f75                           .sub_u  ; export name
00016e6: 00                                        ; export kind
00016e7: e902                                      ; export func index
00016e9: 15                                        ; string length
00016ea: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
00016fa: 7375 625f 75                             sub_u  ; export name
00016ff: 00                                        ; export kind
0001700: ea02                                      ; export func index
0001702: 16                                        ; string length
0001703: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
0001713: 2e73 7562 5f75                           .sub_u  ; export name
0001719: 00                                        ; export kind
000171a: eb02                                      ; export func index
000171c: 16                                        ; string length
000171d: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
000172d: 2e73 7562 5f75                           .sub_u  ; export name
0001733: 00                                        ; export kind
0001734: ec02                                      ; export func index
0001736: 12                                        ; string length
0001737: 6933 322e 6174 6f6d 6963 2e72 6d77 2e61  i32.atomic.rmw.a
0001747: 6e64                                     nd  ; export name
0001749: 00                                        ; export kind
000174a: ed02                                      ; export func index
000174c: 12                                        ; string length
000174d: 6936 342e 6174 6f6d 6963 2e72 6d77 2e61  i64.atomic.rmw.a
000175d: 6e64                                     nd  ; export name
000175f: 00                                        ; export kind
0001760: ee02                                      ; export func index
0001762: 15                                        ; string length
0001763: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
0001773: 616e 645f 75                             and_u  ; export name
0001778: 00                                        ; export kind
0001779: ef02                                      ; export func index
000177b: 16                                        ; string length
000177c: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
000178c: 2e61 6e64 5f75                           .and_u  ; export name
0001792: 00                                        ; export kind
0001793: f002                                      ; export func index
0001795: 15                                        ; string length
0001796: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
00017a6: 616e 645f 75                             and_u  ; export name
00017ab: 00                                        ; export kind
00017ac: f102                                      ; export func index
00017ae: 16                                        ; string length
00017af: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
00017bf: 2e61 6e64 5f75                           .and_u  ; export name
00017c5: 00                                        ; export kind
00017c6: f202                                      ; export func index
00017c8: 16                                        ; string length
00017c9: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
00017d9: 2e61 6e64 5f75                           .and_u  ; export name
00017df: 00                                        ; export kind
00017e0: f302                                      ; export func index
00017e2: 11                                        ; string length
00017e3: 6933 322e 6174 6f6d 6963 2e72 6d77 2e6f  i32.atomic.rmw.o
00017f3: 72                                       r  ; export name
00017f4: 00                                        ; export kind
00017f5: f402                                      ; export func index
00017f7: 11                                        ; string length
00017f8: 6936 342e 6174 6f6d 6963 2e72 6d77 2e6f  i64.atomic.rmw.o
0001808: 72                                       r  ; export name
0001809: 00                                        ; export kind
000180a: f502                                      ; export func index
000180c: 14                                        ; string length
000180d: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
000181d: 6f72 5f75                                or_u  ; export name
0001821: 00                                        ; export kind
0001822: f602                                      ; export func index
0001824: 15                                        ; string length
0001825: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
0001835: 2e6f 725f 75                             .or_u  ; export name
000183a: 00                                        ; export kind
000183b: f702                                      ; export func index
000183d: 14                                        ; string length
000183e: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
000184e: 6f72 5f75                                or_u  ; export name
0001852: 00                                        ; export kind
0001853: f802                                      ; export func index
0001855: 15                                        ; string length
0001856: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
0001866: 2e6f 725f 75                             .or_u  ; export name
000186b: 00                                        ; export kind
000186c: f902                                      ; export func index
000186e: 15                                        ; string length
000186f: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
000187f: 2e6f 725f 75                             .or_u  ; export name
0001884: 00                                        ; export kind
0001885: fa02                                      ; export func index
0001887: 12                                        ; string length
0001888: 6933 322e 6174 6f6d 6963 2e72 6d77 2e78  i32.atomic.rmw.x
0001898: 6f72                                     or  ; export name
000189a: 00                                        ; export kind
000189b: fb02                                      ; export func index
000189d: 12                                        ; string length
000189e: 6936 342e 6174 6f6d 6963 2e72 6d77 2e78  i64.atomic.rmw.x
00018ae: 6f72                                     or  ; export name
00018b0: 00                                        ; export kind
00018b1: fc02                                      ; export func index
00018b3: 15                                        ; string length
00018b4: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
00018c4: 786f 725f 75                             xor_u  ; export name
00018c9: 00                                        ; export kind
00018ca: fd02                                      ; export func index
00018cc: 16                                        ; string length
00018cd: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
00018dd: 2e78 6f72 5f75                           .xor_u  ; export name
00018e3: 00                                        ; export kind
00018e4: fe02                                      ; export func index
00018e6: 15                                        ; string length
00018e7: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
00018f7: 786f 725f 75                             xor_u  ; export name
00018fc: 00                                        ; export kind
00018fd: ff02                                      ; export func index
00018ff: 16                                        ; string length
0001900: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
0001910: 2e78 6f72 5f75                           .xor_u  ; export name
0001916: 00                                        ; export kind
0001917: 8003                                      ; export func index
0001919: 16                                        ; string length
000191a: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
000192a: 2e78 6f72 5f75                           .xor_u  ; export name
0001930: 00                                        ; export kind
0001931: 8103                                      ; export func index
0001933: 13                                        ; string length
0001934: 6933 322e 6174 6f6d 6963 2e72 6d77 2e78  i32.atomic.rmw.x
0001944: 6368 67                                  chg  ; export name
0001947: 00                                        ; export kind
0001948: 8203                                      ; export func index
000194a: 13                                        ; string length
000194b: 6936 342e 6174 6f6d 6963 2e72 6d77 2e78  i64.atomic.rmw.x
000195b: 6368 67                                  chg  ; export name
000195e: 00                                        ; export kind
000195f: 8303                                      ; export func index
0001961: 16                                        ; string length
0001962: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
0001972: 7863 6867 5f75                           xchg_u  ; export name
0001978: 00                                        ; export kind
0001979: 8403                                      ; export func index
000197b: 17                                        ; string length
000197c: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
000198c: 2e78 6368 675f 75                        .xchg_u  ; export name
0001993: 00                                        ; export kind
0001994: 8503                                      ; export func index
0001996: 16                                        ; string length
0001997: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
00019a7: 7863 6867 5f75                           xchg_u  ; export name
00019ad: 00                                        ; export kind
00019ae: 8603                                      ; export func index
00019b0: 17                                        ; string length
00019b1: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
00019c1: 2e78 6368 675f 75                        .xchg_u  ; export name
00019c8: 00                                        ; export kind
00019c9: 8703                                      ; export func index
00019cb: 17                                        ; string length
00019cc: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
00019dc: 2e78 6368 675f 75                        .xchg_u  ; export name
00019e3: 00                                        ; export kind
00019e4: 8803                                      ; export func index
00019e6: 16                                        ; string length
00019e7: 6933 322e 6174 6f6d 6963 2e72 6d77 2e63  i32.atomic.rmw.c
00019f7: 6d70 7863 6867                           mpxchg  ; export name
00019fd: 00                                        ; export kind
00019fe: 8903                                      ; export func index
0001a00: 16                                        ; string length
0001a01: 6936 342e 6174 6f6d 6963 2e72 6d77 2e63  i64.atomic.rmw.c
0001a11: 6d70 7863 6867                           mpxchg  ; export name
0001a17: 00                                        ; export kind
0001a18: 8a03                                      ; export func index
0001a1a: 19                                        ; string length
0001a1b: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
0001a2b: 636d 7078 6368 675f 75                   cmpxchg_u  ; export name
0001a34: 00                                        ; export kind
0001a35: 8b03                                      ; export func index
0001a37: 1a                                        ; string length
0001a38: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
0001a48: 2e63 6d70 7863 6867 5f75                 .cmpxchg_u  ; export name
0001a52: 00                                        ; export kind
0001a53: 8c03                                      ; export func index
0001a55: 19                                        ; string length
0001a56: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
0001a66: 636d 7078 6368 675f 75                   cmpxchg_u  ; export name
0001a6f: 00                                        ; export kind
0001a70: 8d03                                      ; export func index
0001a72: 1a                                        ; string length
0001a73: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
0001a83: 2e63 6d70 7863 6867 5f75                 .cmpxchg_u  ; export name
0001a8d: 00                                        ; export kind
0001a8e: 8e03                                      ; export func index
0001a90: 1a                                        ; string length
0001a91: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
0001aa1: 2e63 6d70 7863 6867 5f75                 .cmpxchg_u  ; export name
0001aab: 00                                        ; export kind
0001aac: 8f03                                      ; export func index
; move data: [1cd, 1aae) -> [1ce, 1aaf)
00001cc: e131                                      ; FIXUP section size
; section "Elem" (9)
0001aaf: 09                                        ; section code
0001ab0: 00                                        ; section size (guess)
0001ab1: 02                                        ; num elem segments
; elem segment header 0
0001ab2: 00                                      
0001ab3: 41                                        ; i32.const
0001ab4: 00                                        ; i32 literal
0001ab5: 0b                                        ; end
0001ab6: 02                                        ; num elem exprs
0001ab7: 01                                        ; elem expr function index
0001ab8: 01                                        ; elem expr function index
; elem segment header 1
0001ab9: 01                                      
0001aba: 70                                        ; funcref
0001abb: 00                                        ; num elem exprs
0001ab0: 0b                                        ; FIXUP section size
; section "DataCount" (12)
0001abc: 0c                                        ; section code
0001abd: 00                                        ; section size (guess)
0001abe: 01                                        ; data count
0001abd: 01                                        ; FIXUP section size
; section "Code" (10)
0001abf: 0a                                        ; section code
0001ac0: 00                                        ; section size (guess)
0001ac1: 8f03                                      ; num functions
; function body 0
0001ac3: 00                                        ; func body size (guess)
0001ac4: 00                                        ; local decl count
0001ac5: 0b                                        ; end
0001ac3: 02                                        ; FIXUP func body size
; function body 1
0001ac6: 00                                        ; func body size (guess)
0001ac7: 00                                        ; local decl count
0001ac8: 00                                        ; unreachable
0001ac9: 0b                                        ; end
0001ac6: 03                                        ; FIXUP func body size
; function body 2
0001aca: 00                                        ; func body size (guess)
0001acb: 00                                        ; local decl count
0001acc: 0c                                        ; br
0001acd: 00                                        ; break depth
0001ace: 0b                                        ; end
0001aca: 04                                        ; FIXUP func body size
; function body 3
0001acf: 00                                        ; func body size (guess)
0001ad0: 00                                        ; local decl count
0001ad1: 41                                        ; i32.const
0001ad2: 01                                        ; i32 literal
0001ad3: 0e                                        ; br_table
0001ad4: 00                                        ; num targets
0001ad5: 00                                        ; break depth for default
0001ad6: 0b                                        ; end
0001acf: 07                                        ; FIXUP func body size
; function body 4
0001ad7: 00                                        ; func body size (guess)
0001ad8: 00                                        ; local decl count
0001ad9: 0f                                        ; return
0001ada: 0b                                        ; end
0001ad7: 03                                        ; FIXUP func body size
; function body 5
0001adb: 00                                        ; func body size (guess)
0001adc: 00                                        ; local decl count
0001add: 10                                        ; call
0001ade: 01                                        ; function index
0001adf: 0b                                        ; end
0001adb: 04                                        ; FIXUP func body size
; function body 6
0001ae0: 00                                        ; func body size (guess)
0001ae1: 00                                        ; local decl count
0001ae2: 41                                        ; i32.const
0001ae3: 01                                        ; i32 literal
0001ae4: 11                                        ; call_indirect
0001ae5: 00                                        ; signature index
0001ae6: 00                                        ; table index
0001ae7: 0b                                        ; end
0001ae0: 07                                        ; FIXUP func body size
; function body 7
0001ae8: 00                                        ; func body size (guess)
0001ae9: 00                                        ; local decl count
0001aea: 12                                        ; return_call
0001aeb: 01                                        ; function index
0001aec: 0b                                        ; end
0001ae8: 04                                        ; FIXUP func body size
; function body 8
0001aed: 00                                        ; func body size (guess)
0001aee: 00                                        ; local decl count
0001aef: 41                                        ; i32.const
0001af0: 01                                        ; i32 literal
0001af1: 13                                        ; return_call_indirect
0001af2: 00                                        ; signature index
0001af3: 00                                        ; table index
0001af4: 0b                                        ; end
0001aed: 07                                        ; FIXUP func body size
; function body 9
0001af5: 00                                        ; func body size (guess)
0001af6: 00                                        ; local decl count
0001af7: 41                                        ; i32.const
0001af8: 01                                        ; i32 literal
0001af9: 1a                                        ; drop
0001afa: 0b                                        ; end
0001af5: 05                                        ; FIXUP func body size
; function body 10
0001afb: 00                                        ; func body size (guess)
0001afc: 00                                        ; local decl count
0001afd: 41                                        ; i32.const
0001afe: 01                                        ; i32 literal
0001aff: 41                                        ; i32.const
0001b00: 02                                        ; i32 literal
0001b01: 41                                        ; i32.const
0001b02: 03                                        ; i32 literal
0001b03: 1b                                        ; select
0001b04: 1a                                        ; drop
0001b05: 0b                                        ; end
0001afb: 0a                                        ; FIXUP func body size
; function body 11
0001b06: 00                                        ; func body size (guess)
0001b07: 01                                        ; local decl count
0001b08: 01                                        ; local type count
0001b09: 7f                                        ; i32
0001b0a: 20                                        ; local.get
0001b0b: 00                                        ; local index
0001b0c: 1a                                        ; drop
0001b0d: 0b                                        ; end
0001b06: 07                                        ; FIXUP func body size
; function body 12
0001b0e: 00                                        ; func body size (guess)
0001b0f: 01                                        ; local decl count
0001b10: 01                                        ; local type count
0001b11: 7f                                        ; i32
0001b12: 41                                        ; i32.const
0001b13: 01                                        ; i32 literal
0001b14: 21                                        ; local.set
0001b15: 00                                        ; local index
0001b16: 0b                                        ; end
0001b0e: 08                                        ; FIXUP func body size
; function body 13
0001b17: 00                                        ; func body size (guess)
0001b18: 01                                        ; local decl count
0001b19: 01                                        ; local type count
0001b1a: 7f                                        ; i32
0001b1b: 41                                        ; i32.const
0001b1c: 01                                        ; i32 literal
0001b1d: 22                                        ; local.tee
0001b1e: 00                                        ; local index
0001b1f: 1a                                        ; drop
0001b20: 0b                                        ; end
0001b17: 09                                        ; FIXUP func body size
; function body 14
0001b21: 00                                        ; func body size (guess)
0001b22: 00                                        ; local decl count
0001b23: 23                                        ; global.get
0001b24: 00                                        ; global index
0001b25: 1a                                        ; drop
0001b26: 0b                                        ; end
0001b21: 05                                        ; FIXUP func body size
; function body 15
0001b27: 00                                        ; func body size (guess)
0001b28: 00                                        ; local decl count
0001b29: 41                                        ; i32.const
0001b2a: 01                                        ; i32 literal
0001b2b: 24                                        ; global.set
0001b2c: 00                                        ; global index
0001b2d: 0b                                        ; end
0001b27: 06                                        ; FIXUP func body size
; function body 16
0001b2e: 00                                        ; func body size (guess)
0001b2f: 00                                        ; local decl count
0001b30: 41                                        ; i32.const
0001b31: 01                                        ; i32 literal
0001b32: 28                                        ; i32.load
0001b33: 02                                        ; alignment
0001b34: 02                                        ; load offset
0001b35: 1a                                        ; drop
0001b36: 0b                                        ; end
0001b2e: 08                                        ; FIXUP func body size
; function body 17
0001b37: 00                                        ; func body size (guess)
0001b38: 00                                        ; local decl count
0001b39: 41                                        ; i32.const
0001b3a: 01                                        ; i32 literal
0001b3b: 29                                        ; i64.load
0001b3c: 03                                        ; alignment
0001b3d: 02                                        ; load offset
0001b3e: 1a                                        ; drop
0001b3f: 0b                                        ; end
0001b37: 08                                        ; FIXUP func body size
; function body 18
0001b40: 00                                        ; func body size (guess)
0001b41: 00                                        ; local decl count
0001b42: 41                                        ; i32.const
0001b43: 01                                        ; i32 literal
0001b44: 2a                                        ; f32.load
0001b45: 02                                        ; alignment
0001b46: 02                                        ; load offset
0001b47: 1a                                        ; drop
0001b48: 0b                                        ; end
0001b40: 08                                        ; FIXUP func body size
; function body 19
0001b49: 00                                        ; func body size (guess)
0001b4a: 00                                        ; local decl count
0001b4b: 41                                        ; i32.const
0001b4c: 01                                        ; i32 literal
0001b4d: 2b                                        ; f64.load
0001b4e: 03                                        ; alignment
0001b4f: 02                                        ; load offset
0001b50: 1a                                        ; drop
0001b51: 0b                                        ; end
0001b49: 08                                        ; FIXUP func body size
; function body 20
0001b52: 00                                        ; func body size (guess)
0001b53: 00                                        ; local decl count
0001b54: 41                                        ; i32.const
0001b55: 01                                        ; i32 literal
0001b56: 2c                                        ; i32.load8_s
0001b57: 00                                        ; alignment
0001b58: 02                                        ; load offset
0001b59: 1a                                        ; drop
0001b5a: 0b                                        ; end
0001b52: 08                                        ; FIXUP func body size
; function body 21
0001b5b: 00                                        ; func body size (guess)
0001b5c: 00                                        ; local decl count
0001b5d: 41                                        ; i32.const
0001b5e: 01                                        ; i32 literal
0001b5f: 2d                                        ; i32.load8_u
0001b60: 00                                        ; alignment
0001b61: 02                                        ; load offset
0001b62: 1a                                        ; drop
0001b63: 0b                                        ; end
0001b5b: 08                                        ; FIXUP func body size
; function body 22
0001b64: 00                                        ; func body size (guess)
0001b65: 00                                        ; local decl count
0001b66: 41                                        ; i32.const
0001b67: 01                                        ; i32 literal
0001b68: 2e                                        ; i32.load16_s
0001b69: 01                                        ; alignment
0001b6a: 02                                        ; load offset
0001b6b: 1a                                        ; drop
0001b6c: 0b                                        ; end
0001b64: 08                                        ; FIXUP func body size
; function body 23
0001b6d: 00                                        ; func body size (guess)
0001b6e: 00                                        ; local decl count
0001b6f: 41                                        ; i32.const
0001b70: 01                                        ; i32 literal
0001b71: 2f                                        ; i32.load16_u
0001b72: 01                                        ; alignment
0001b73: 02                                        ; load offset
0001b74: 1a                                        ; drop
0001b75: 0b                                        ; end
0001b6d: 08                                        ; FIXUP func body size
; function body 24
0001b76: 00                                        ; func body size (guess)
0001b77: 00                                        ; local decl count
0001b78: 41                                        ; i32.const
0001b79: 01                                        ; i32 literal
0001b7a: 30                                        ; i64.load8_s
0001b7b: 00                                        ; alignment
0001b7c: 02                                        ; load offset
0001b7d: 1a                                        ; drop
0001b7e: 0b                                        ; end
0001b76: 08                                        ; FIXUP func body size
; function body 25
0001b7f: 00                                        ; func body size (guess)
0001b80: 00                                        ; local decl count
0001b81: 41                                        ; i32.const
0001b82: 01                                        ; i32 literal
0001b83: 31                                        ; i64.load8_u
0001b84: 00                                        ; alignment
0001b85: 02                                        ; load offset
0001b86: 1a                                        ; drop
0001b87: 0b                                        ; end
0001b7f: 08                                        ; FIXUP func body size
; function body 26
0001b88: 00                                        ; func body size (guess)
0001b89: 00                                        ; local decl count
0001b8a: 41                                        ; i32.const
0001b8b: 01                                        ; i32 literal
0001b8c: 32                                        ; i64.load16_s
0001b8d: 01                                        ; alignment
0001b8e: 02                                        ; load offset
0001b8f: 1a                                        ; drop
0001b90: 0b                                        ; end
0001b88: 08                                        ; FIXUP func body size
; function body 27
0001b91: 00                                        ; func body size (guess)
0001b92: 00                                        ; local decl count
0001b93: 41                                        ; i32.const
0001b94: 01                                        ; i32 literal
0001b95: 33                                        ; i64.load16_u
0001b96: 01                                        ; alignment
0001b97: 02                                        ; load offset
0001b98: 1a                                        ; drop
0001b99: 0b                                        ; end
0001b91: 08                                        ; FIXUP func body size
; function body 28
0001b9a: 00                                        ; func body size (guess)
0001b9b: 00                                        ; local decl count
0001b9c: 41                                        ; i32.const
0001b9d: 01                                        ; i32 literal
0001b9e: 34                                        ; i64.load32_s
0001b9f: 02                                        ; alignment
0001ba0: 02                                        ; load offset
0001ba1: 1a                                        ; drop
0001ba2: 0b                                        ; end
0001b9a: 08                                        ; FIXUP func body size
; function body 29
0001ba3: 00                                        ; func body size (guess)
0001ba4: 00                                        ; local decl count
0001ba5: 41                                        ; i32.const
0001ba6: 01                                        ; i32 literal
0001ba7: 35                                        ; i64.load32_u
0001ba8: 02                                        ; alignment
0001ba9: 02                                        ; load offset
0001baa: 1a                                        ; drop
0001bab: 0b                                        ; end
0001ba3: 08                                        ; FIXUP func body size
; function body 30
0001bac: 00                                        ; func body size (guess)
0001bad: 00                                        ; local decl count
0001bae: 41                                        ; i32.const
0001baf: 01                                        ; i32 literal
0001bb0: 41                                        ; i32.const
0001bb1: 02                                        ; i32 literal
0001bb2: 36                                        ; i32.store
0001bb3: 02                                        ; alignment
0001bb4: 02                                        ; store offset
0001bb5: 0b                                        ; end
0001bac: 09                                        ; FIXUP func body size
; function body 31
0001bb6: 00                                        ; func body size (guess)
0001bb7: 00                                        ; local decl count
0001bb8: 41                                        ; i32.const
0001bb9: 01                                        ; i32 literal
0001bba: 42                                        ; i64.const
0001bbb: 02                                        ; i64 literal
0001bbc: 37                                        ; i64.store
0001bbd: 03                                        ; alignment
0001bbe: 02                                        ; store offset
0001bbf: 0b                                        ; end
0001bb6: 09                                        ; FIXUP func body size
; function body 32
0001bc0: 00                                        ; func body size (guess)
0001bc1: 00                                        ; local decl count
0001bc2: 41                                        ; i32.const
0001bc3: 01                                        ; i32 literal
0001bc4: 43                                        ; f32.const
0001bc5: 0000 0040                                 ; f32 literal
0001bc9: 38                                        ; f32.store
0001bca: 02                                        ; alignment
0001bcb: 02                                        ; store offset
0001bcc: 0b                                        ; end
0001bc0: 0c                                        ; FIXUP func body size
; function body 33
0001bcd: 00                                        ; func body size (guess)
0001bce: 00                                        ; local decl count
0001bcf: 41                                        ; i32.const
0001bd0: 01                                        ; i32 literal
0001bd1: 44                                        ; f64.const
0001bd2: 0000 0000 0000 0040                       ; f64 literal
0001bda: 39                                        ; f64.store
0001bdb: 03                                        ; alignment
0001bdc: 02                                        ; store offset
0001bdd: 0b                                        ; end
0001bcd: 10                                        ; FIXUP func body size
; function body 34
0001bde: 00                                        ; func body size (guess)
0001bdf: 00                                        ; local decl count
0001be0: 41                                        ; i32.const
0001be1: 01                                        ; i32 literal
0001be2: 41                                        ; i32.const
0001be3: 02                                        ; i32 literal
0001be4: 3a                                        ; i32.store8
0001be5: 00                                        ; alignment
0001be6: 02                                        ; store offset
0001be7: 0b                                        ; end
0001bde: 09                                        ; FIXUP func body size
; function body 35
0001be8: 00                                        ; func body size (guess)
0001be9: 00                                        ; local decl count
0001bea: 41                                        ; i32.const
0001beb: 01                                        ; i32 literal
0001bec: 41                                        ; i32.const
0001bed: 02                                        ; i32 literal
0001bee: 3b                                        ; i32.store16
0001bef: 01                                        ; alignment
0001bf0: 02                                        ; store offset
0001bf1: 0b                                        ; end
0001be8: 09                                        ; FIXUP func body size
; function body 36
0001bf2: 00                                        ; func body size (guess)
0001bf3: 00                                        ; local decl count
0001bf4: 41                                        ; i32.const
0001bf5: 01                                        ; i32 literal
0001bf6: 42                                        ; i64.const
0001bf7: 02                                        ; i64 literal
0001bf8: 3c                                        ; i64.store8
0001bf9: 00                                        ; alignment
0001bfa: 02                                        ; store offset
0001bfb: 0b                                        ; end
0001bf2: 09                                        ; FIXUP func body size
; function body 37
0001bfc: 00                                        ; func body size (guess)
0001bfd: 00                                        ; local decl count
0001bfe: 41                                        ; i32.const
0001bff: 01                                        ; i32 literal
0001c00: 42                                        ; i64.const
0001c01: 02                                        ; i64 literal
0001c02: 3d                                        ; i64.store16
0001c03: 01                                        ; alignment
0001c04: 02                                        ; store offset
0001c05: 0b                                        ; end
0001bfc: 09                                        ; FIXUP func body size
; function body 38
0001c06: 00                                        ; func body size (guess)
0001c07: 00                                        ; local decl count
0001c08: 41                                        ; i32.const
0001c09: 01                                        ; i32 literal
0001c0a: 42                                        ; i64.const
0001c0b: 02                                        ; i64 literal
0001c0c: 3e                                        ; i64.store32
0001c0d: 02                                        ; alignment
0001c0e: 02                                        ; store offset
0001c0f: 0b                                        ; end
0001c06: 09                                        ; FIXUP func body size
; function body 39
0001c10: 00                                        ; func body size (guess)
0001c11: 00                                        ; local decl count
0001c12: 3f                                        ; memory.size
0001c13: 00                                        ; memory.size reserved
0001c14: 1a                                        ; drop
0001c15: 0b                                        ; end
0001c10: 05                                        ; FIXUP func body size
; function body 40
0001c16: 00                                        ; func body size (guess)
0001c17: 00                                        ; local decl count
0001c18: 41                                        ; i32.const
0001c19: 01                                        ; i32 literal
0001c1a: 40                                        ; memory.grow
0001c1b: 00                                        ; memory.grow reserved
0001c1c: 1a                                        ; drop
0001c1d: 0b                                        ; end
0001c16: 07                                        ; FIXUP func body size
; function body 41
0001c1e: 00                                        ; func body size (guess)
0001c1f: 00                                        ; local decl count
0001c20: 41                                        ; i32.const
0001c21: 01                                        ; i32 literal
0001c22: 1a                                        ; drop
0001c23: 0b                                        ; end
0001c1e: 05                                        ; FIXUP func body size
; function body 42
0001c24: 00                                        ; func body size (guess)
0001c25: 00                                        ; local decl count
0001c26: 42                                        ; i64.const
0001c27: 01                                        ; i64 literal
0001c28: 1a                                        ; drop
0001c29: 0b                                        ; end
0001c24: 05                                        ; FIXUP func body size
; function body 43
0001c2a: 00                                        ; func body size (guess)
0001c2b: 00                                        ; local decl count
0001c2c: 43                                        ; f32.const
0001c2d: 0000 803f                                 ; f32 literal
0001c31: 1a                                        ; drop
0001c32: 0b                                        ; end
0001c2a: 08                                        ; FIXUP func body size
; function body 44
0001c33: 00                                        ; func body size (guess)
0001c34: 00                                        ; local decl count
0001c35: 44                                        ; f64.const
0001c36: 0000 0000 0000 f03f                       ; f64 literal
0001c3e: 1a                                        ; drop
0001c3f: 0b                                        ; end
0001c33: 0c                                        ; FIXUP func body size
; function body 45
0001c40: 00                                        ; func body size (guess)
0001c41: 00                                        ; local decl count
0001c42: 41                                        ; i32.const
0001c43: 01                                        ; i32 literal
0001c44: 45                                        ; i32.eqz
0001c45: 1a                                        ; drop
0001c46: 0b                                        ; end
0001c40: 06                                        ; FIXUP func body size
; function body 46
0001c47: 00                                        ; func body size (guess)
0001c48: 00                                        ; local decl count
0001c49: 41                                        ; i32.const
0001c4a: 01                                        ; i32 literal
0001c4b: 41                                        ; i32.const
0001c4c: 02                                        ; i32 literal
0001c4d: 46                                        ; i32.eq
0001c4e: 1a                                        ; drop
0001c4f: 0b                                        ; end
0001c47: 08                                        ; FIXUP func body size
; function body 47
0001c50: 00                                        ; func body size (guess)
0001c51: 00                                        ; local decl count
0001c52: 41                                        ; i32.const
0001c53: 01                                        ; i32 literal
0001c54: 41                                        ; i32.const
0001c55: 02                                        ; i32 literal
0001c56: 47                                        ; i32.ne
0001c57: 1a                                        ; drop
0001c58: 0b                                        ; end
0001c50: 08                                        ; FIXUP func body size
; function body 48
0001c59: 00                                        ; func body size (guess)
0001c5a: 00                                        ; local decl count
0001c5b: 41                                        ; i32.const
0001c5c: 01                                        ; i32 literal
0001c5d: 41                                        ; i32.const
0001c5e: 02                                        ; i32 literal
0001c5f: 48                                        ; i32.lt_s
0001c60: 1a                                        ; drop
0001c61: 0b                                        ; end
0001c59: 08                                        ; FIXUP func body size
; function body 49
0001c62: 00                                        ; func body size (guess)
0001c63: 00                                        ; local decl count
0001c64: 41                                        ; i32.const
0001c65: 01                                        ; i32 literal
0001c66: 41                                        ; i32.const
0001c67: 02                                        ; i32 literal
0001c68: 49                                        ; i32.lt_u
0001c69: 1a                                        ; drop
0001c6a: 0b                                        ; end
0001c62: 08                                        ; FIXUP func body size
; function body 50
0001c6b: 00                                        ; func body size (guess)
0001c6c: 00                                        ; local decl count
0001c6d: 41                                        ; i32.const
0001c6e: 01                                        ; i32 literal
0001c6f: 41                                        ; i32.const
0001c70: 02                                        ; i32 literal
0001c71: 4a                                        ; i32.gt_s
0001c72: 1a                                        ; drop
0001c73: 0b                                        ; end
0001c6b: 08                                        ; FIXUP func body size
; function body 51
0001c74: 00                                        ; func body size (guess)
0001c75: 00                                        ; local decl count
0001c76: 41                                        ; i32.const
0001c77: 01                                        ; i32 literal
0001c78: 41                                        ; i32.const
0001c79: 02                                        ; i32 literal
0001c7a: 4b                                        ; i32.gt_u
0001c7b: 1a                                        ; drop
0001c7c: 0b                                        ; end
0001c74: 08                                        ; FIXUP func body size
; function body 52
0001c7d: 00                                        ; func body size (guess)
0001c7e: 00                                        ; local decl count
0001c7f: 41                                        ; i32.const
0001c80: 01                                        ; i32 literal
0001c81: 41                                        ; i32.const
0001c82: 02                                        ; i32 literal
0001c83: 4c                                        ; i32.le_s
0001c84: 1a                                        ; drop
0001c85: 0b                                        ; end
0001c7d: 08                                        ; FIXUP func body size
; function body 53
0001c86: 00                                        ; func body size (guess)
0001c87: 00                                        ; local decl count
0001c88: 41                                        ; i32.const
0001c89: 01                                        ; i32 literal
0001c8a: 41                                        ; i32.const
0001c8b: 02                                        ; i32 literal
0001c8c: 4d                                        ; i32.le_u
0001c8d: 1a                                        ; drop
0001c8e: 0b                                        ; end
0001c86: 08                                        ; FIXUP func body size
; function body 54
0001c8f: 00                                        ; func body size (guess)
0001c90: 00                                        ; local decl count
0001c91: 41                                        ; i32.const
0001c92: 01                                        ; i32 literal
0001c93: 41                                        ; i32.const
0001c94: 02                                        ; i32 literal
0001c95: 4e                                        ; i32.ge_s
0001c96: 1a                                        ; drop
0001c97: 0b                                        ; end
0001c8f: 08                                        ; FIXUP func body size
; function body 55
0001c98: 00                                        ; func body size (guess)
0001c99: 00                                        ; local decl count
0001c9a: 41                                        ; i32.const
0001c9b: 01                                        ; i32 literal
0001c9c: 41                                        ; i32.const
0001c9d: 02                                        ; i32 literal
0001c9e: 4f                                        ; i32.ge_u
0001c9f: 1a                                        ; drop
0001ca0: 0b                                        ; end
0001c98: 08                                        ; FIXUP func body size
; function body 56
0001ca1: 00                                        ; func body size (guess)
0001ca2: 00                                        ; local decl count
0001ca3: 42                                        ; i64.const
0001ca4: 01                                        ; i64 literal
0001ca5: 50                                        ; i64.eqz
0001ca6: 1a                                        ; drop
0001ca7: 0b                                        ; end
0001ca1: 06                                        ; FIXUP func body size
; function body 57
0001ca8: 00                                        ; func body size (guess)
0001ca9: 00                                        ; local decl count
0001caa: 42                                        ; i64.const
0001cab: 01                                        ; i64 literal
0001cac: 42                                        ; i64.const
0001cad: 02                                        ; i64 literal
0001cae: 51                                        ; i64.eq
0001caf: 1a                                        ; drop
0001cb0: 0b                                        ; end
0001ca8: 08                                        ; FIXUP func body size
; function body 58
0001cb1: 00                                        ; func body size (guess)
0001cb2: 00                                        ; local decl count
0001cb3: 42                                        ; i64.const
0001cb4: 01                                        ; i64 literal
0001cb5: 42                                        ; i64.const
0001cb6: 02                                        ; i64 literal
0001cb7: 52                                        ; i64.ne
0001cb8: 1a                                        ; drop
0001cb9: 0b                                        ; end
0001cb1: 08                                        ; FIXUP func body size
; function body 59
0001cba: 00                                        ; func body size (guess)
0001cbb: 00                                        ; local decl count
0001cbc: 42                                        ; i64.const
0001cbd: 01                                        ; i64 literal
0001cbe: 42                                        ; i64.const
0001cbf: 02                                        ; i64 literal
0001cc0: 53                                        ; i64.lt_s
0001cc1: 1a                                        ; drop
0001cc2: 0b                                        ; end
0001cba: 08                                        ; FIXUP func body size
; function body 60
0001cc3: 00                                        ; func body size (guess)
0001cc4: 00                                        ; local decl count
0001cc5: 42                                        ; i64.const
0001cc6: 01                                        ; i64 literal
0001cc7: 42                                        ; i64.const
0001cc8: 02                                        ; i64 literal
0001cc9: 54                                        ; i64.lt_u
0001cca: 1a                                        ; drop
0001ccb: 0b                                        ; end
0001cc3: 08                                        ; FIXUP func body size
; function body 61
0001ccc: 00                                        ; func body size (guess)
0001ccd: 00                                        ; local decl count
0001cce: 42                                        ; i64.const
0001ccf: 01                                        ; i64 literal
0001cd0: 42                                        ; i64.const
0001cd1: 02                                        ; i64 literal
0001cd2: 55                                        ; i64.gt_s
0001cd3: 1a                                        ; drop
0001cd4: 0b                                        ; end
0001ccc: 08                                        ; FIXUP func body size
; function body 62
0001cd5: 00                                        ; func body size (guess)
0001cd6: 00                                        ; local decl count
0001cd7: 42                                        ; i64.const
0001cd8: 01                                        ; i64 literal
0001cd9: 42                                        ; i64.const
0001cda: 02                                        ; i64 literal
0001cdb: 56                                        ; i64.gt_u
0001cdc: 1a                                        ; drop
0001cdd: 0b                                        ; end
0001cd5: 08                                        ; FIXUP func body size
; function body 63
0001cde: 00                                        ; func body size (guess)
0001cdf: 00                                        ; local decl count
0001ce0: 42                                        ; i64.const
0001ce1: 01                                        ; i64 literal
0001ce2: 42                                        ; i64.const
0001ce3: 02                                        ; i64 literal
0001ce4: 57                                        ; i64.le_s
0001ce5: 1a                                        ; drop
0001ce6: 0b                                        ; end
0001cde: 08                                        ; FIXUP func body size
; function body 64
0001ce7: 00                                        ; func body size (guess)
0001ce8: 00                                        ; local decl count
0001ce9: 42                                        ; i64.const
0001cea: 01                                        ; i64 literal
0001ceb: 42                                        ; i64.const
0001cec: 02                                        ; i64 literal
0001ced: 58                                        ; i64.le_u
0001cee: 1a                                        ; drop
0001cef: 0b                                        ; end
0001ce7: 08                                        ; FIXUP func body size
; function body 65
0001cf0: 00                                        ; func body size (guess)
0001cf1: 00                                        ; local decl count
0001cf2: 42                                        ; i64.const
0001cf3: 01                                        ; i64 literal
0001cf4: 42                                        ; i64.const
0001cf5: 02                                        ; i64 literal
0001cf6: 59                                        ; i64.ge_s
0001cf7: 1a                                        ; drop
0001cf8: 0b                                        ; end
0001cf0: 08                                        ; FIXUP func body size
; function body 66
0001cf9: 00                                        ; func body size (guess)
0001cfa: 00                                        ; local decl count
0001cfb: 42                                        ; i64.const
0001cfc: 01                                        ; i64 literal
0001cfd: 42                                        ; i64.const
0001cfe: 02                                        ; i64 literal
0001cff: 5a                                        ; i64.ge_u
0001d00: 1a                                        ; drop
0001d01: 0b                                        ; end
0001cf9: 08                                        ; FIXUP func body size
; function body 67
0001d02: 00                                        ; func body size (guess)
0001d03: 00                                        ; local decl count
0001d04: 43                                        ; f32.const
0001d05: 0000 803f                                 ; f32 literal
0001d09: 43                                        ; f32.const
0001d0a: 0000 0040                                 ; f32 literal
0001d0e: 5b                                        ; f32.eq
0001d0f: 1a                                        ; drop
0001d10: 0b                                        ; end
0001d02: 0e                                        ; FIXUP func body size
; function body 68
0001d11: 00                                        ; func body size (guess)
0001d12: 00                                        ; local decl count
0001d13: 43                                        ; f32.const
0001d14: 0000 803f                                 ; f32 literal
0001d18: 43                                        ; f32.const
0001d19: 0000 0040                                 ; f32 literal
0001d1d: 5c                                        ; f32.ne
0001d1e: 1a                                        ; drop
0001d1f: 0b                                        ; end
0001d11: 0e                                        ; FIXUP func body size
; function body 69
0001d20: 00                                        ; func body size (guess)
0001d21: 00                                        ; local decl count
0001d22: 43                                        ; f32.const
0001d23: 0000 803f                                 ; f32 literal
0001d27: 43                                        ; f32.const
0001d28: 0000 0040                                 ; f32 literal
0001d2c: 5d                                        ; f32.lt
0001d2d: 1a                                        ; drop
0001d2e: 0b                                        ; end
0001d20: 0e                                        ; FIXUP func body size
; function body 70
0001d2f: 00                                        ; func body size (guess)
0001d30: 00                                        ; local decl count
0001d31: 43                                        ; f32.const
0001d32: 0000 803f                                 ; f32 literal
0001d36: 43                                        ; f32.const
0001d37: 0000 0040                                 ; f32 literal
0001d3b: 5e                                        ; f32.gt
0001d3c: 1a                                        ; drop
0001d3d: 0b                                        ; end
0001d2f: 0e                                        ; FIXUP func body size
; function body 71
0001d3e: 00                                        ; func body size (guess)
0001d3f: 00                                        ; local decl count
0001d40: 43                                        ; f32.const
0001d41: 0000 803f                                 ; f32 literal
0001d45: 43                                        ; f32.const
0001d46: 0000 0040                                 ; f32 literal
0001d4a: 5f                                        ; f32.le
0001d4b: 1a                                        ; drop
0001d4c: 0b                                        ; end
0001d3e: 0e                                        ; FIXUP func body size
; function body 72
0001d4d: 00                                        ; func body size (guess)
0001d4e: 00                                        ; local decl count
0001d4f: 43                                        ; f32.const
0001d50: 0000 803f                                 ; f32 literal
0001d54: 43                                        ; f32.const
0001d55: 0000 0040                                 ; f32 literal
0001d59: 60                                        ; f32.ge
0001d5a: 1a                                        ; drop
0001d5b: 0b                                        ; end
0001d4d: 0e                                        ; FIXUP func body size
; function body 73
0001d5c: 00                                        ; func body size (guess)
0001d5d: 00                                        ; local decl count
0001d5e: 44                                        ; f64.const
0001d5f: 0000 0000 0000 f03f                       ; f64 literal
0001d67: 44                                        ; f64.const
0001d68: 0000 0000 0000 0040                       ; f64 literal
0001d70: 61                                        ; f64.eq
0001d71: 1a                                        ; drop
0001d72: 0b                                        ; end
0001d5c: 16                                        ; FIXUP func body size
; function body 74
0001d73: 00                                        ; func body size (guess)
0001d74: 00                                        ; local decl count
0001d75: 44                                        ; f64.const
0001d76: 0000 0000 0000 f03f                       ; f64 literal
0001d7e: 44                                        ; f64.const
0001d7f: 0000 0000 0000 0040                       ; f64 literal
0001d87: 62                                        ; f64.ne
0001d88: 1a                                        ; drop
0001d89: 0b                                        ; end
0001d73: 16                                        ; FIXUP func body size
; function body 75
0001d8a: 00                                        ; func body size (guess)
0001d8b: 00                                        ; local decl count
0001d8c: 44                                        ; f64.const
0001d8d: 0000 0000 0000 f03f                       ; f64 literal
0001d95: 44                                        ; f64.const
0001d96: 0000 0000 0000 0040                       ; f64 literal
0001d9e: 63                                        ; f64.lt
0001d9f: 1a                                        ; drop
0001da0: 0b                                        ; end
0001d8a: 16                                        ; FIXUP func body size
; function body 76
0001da1: 00                                        ; func body size (guess)
0001da2: 00                                        ; local decl count
0001da3: 44                                        ; f64.const
0001da4: 0000 0000 0000 f03f                       ; f64 literal
0001dac: 44                                        ; f64.const
0001dad: 0000 0000 0000 0040                       ; f64 literal
0001db5: 64                                        ; f64.gt
0001db6: 1a                                        ; drop
0001db7: 0b                                        ; end
0001da1: 16                                        ; FIXUP func body size
; function body 77
0001db8: 00                                        ; func body size (guess)
0001db9: 00                                        ; local decl count
0001dba: 44                                        ; f64.const
0001dbb: 0000 0000 0000 f03f                       ; f64 literal
0001dc3: 44                                        ; f64.const
0001dc4: 0000 0000 0000 0040                       ; f64 literal
0001dcc: 65                                        ; f64.le
0001dcd: 1a                                        ; drop
0001dce: 0b                                        ; end
0001db8: 16                                        ; FIXUP func body size
; function body 78
0001dcf: 00                                        ; func body size (guess)
0001dd0: 00                                        ; local decl count
0001dd1: 44                                        ; f64.const
0001dd2: 0000 0000 0000 f03f                       ; f64 literal
0001dda: 44                                        ; f64.const
0001ddb: 0000 0000 0000 0040                       ; f64 literal
0001de3: 66                                        ; f64.ge
0001de4: 1a                                        ; drop
0001de5: 0b                                        ; end
0001dcf: 16                                        ; FIXUP func body size
; function body 79
0001de6: 00                                        ; func body size (guess)
0001de7: 00                                        ; local decl count
0001de8: 41                                        ; i32.const
0001de9: 01                                        ; i32 literal
0001dea: 67                                        ; i32.clz
0001deb: 1a                                        ; drop
0001dec: 0b                                        ; end
0001de6: 06                                        ; FIXUP func body size
; function body 80
0001ded: 00                                        ; func body size (guess)
0001dee: 00                                        ; local decl count
0001def: 41                                        ; i32.const
0001df0: 01                                        ; i32 literal
0001df1: 68                                        ; i32.ctz
0001df2: 1a                                        ; drop
0001df3: 0b                                        ; end
0001ded: 06                                        ; FIXUP func body size
; function body 81
0001df4: 00                                        ; func body size (guess)
0001df5: 00                                        ; local decl count
0001df6: 41                                        ; i32.const
0001df7: 01                                        ; i32 literal
0001df8: 69                                        ; i32.popcnt
0001df9: 1a                                        ; drop
0001dfa: 0b                                        ; end
0001df4: 06                                        ; FIXUP func body size
; function body 82
0001dfb: 00                                        ; func body size (guess)
0001dfc: 00                                        ; local decl count
0001dfd: 41                                        ; i32.const
0001dfe: 01                                        ; i32 literal
0001dff: 41                                        ; i32.const
0001e00: 02                                        ; i32 literal
0001e01: 6a                                        ; i32.add
0001e02: 1a                                        ; drop
0001e03: 0b                                        ; end
0001dfb: 08                                        ; FIXUP func body size
; function body 83
0001e04: 00                                        ; func body size (guess)
0001e05: 00                                        ; local decl count
0001e06: 41                                        ; i32.const
0001e07: 01                                        ; i32 literal
0001e08: 41                                        ; i32.const
0001e09: 02                                        ; i32 literal
0001e0a: 6b                                        ; i32.sub
0001e0b: 1a                                        ; drop
0001e0c: 0b                                        ; end
0001e04: 08                                        ; FIXUP func body size
; function body 84
0001e0d: 00                                        ; func body size (guess)
0001e0e: 00                                        ; local decl count
0001e0f: 41                                        ; i32.const
0001e10: 01                                        ; i32 literal
0001e11: 41                                        ; i32.const
0001e12: 02                                        ; i32 literal
0001e13: 6c                                        ; i32.mul
0001e14: 1a                                        ; drop
0001e15: 0b                                        ; end
0001e0d: 08                                        ; FIXUP func body size
; function body 85
0001e16: 00                                        ; func body size (guess)
0001e17: 00                                        ; local decl count
0001e18: 41                                        ; i32.const
0001e19: 01                                        ; i32 literal
0001e1a: 41                                        ; i32.const
0001e1b: 02                                        ; i32 literal
0001e1c: 6d                                        ; i32.div_s
0001e1d: 1a                                        ; drop
0001e1e: 0b                                        ; end
0001e16: 08                                        ; FIXUP func body size
; function body 86
0001e1f: 00                                        ; func body size (guess)
0001e20: 00                                        ; local decl count
0001e21: 41                                        ; i32.const
0001e22: 01                                        ; i32 literal
0001e23: 41                                        ; i32.const
0001e24: 02                                        ; i32 literal
0001e25: 6e                                        ; i32.div_u
0001e26: 1a                                        ; drop
0001e27: 0b                                        ; end
0001e1f: 08                                        ; FIXUP func body size
; function body 87
0001e28: 00                                        ; func body size (guess)
0001e29: 00                                        ; local decl count
0001e2a: 41                                        ; i32.const
0001e2b: 01                                        ; i32 literal
0001e2c: 41                                        ; i32.const
0001e2d: 02                                        ; i32 literal
0001e2e: 6f                                        ; i32.rem_s
0001e2f: 1a                                        ; drop
0001e30: 0b                                        ; end
0001e28: 08                                        ; FIXUP func body size
; function body 88
0001e31: 00                                        ; func body size (guess)
0001e32: 00                                        ; local decl count
0001e33: 41                                        ; i32.const
0001e34: 01                                        ; i32 literal
0001e35: 41                                        ; i32.const
0001e36: 02                                        ; i32 literal
0001e37: 70                                        ; i32.rem_u
0001e38: 1a                                        ; drop
0001e39: 0b                                        ; end
0001e31: 08                                        ; FIXUP func body size
; function body 89
0001e3a: 00                                        ; func body size (guess)
0001e3b: 00                                        ; local decl count
0001e3c: 41                                        ; i32.const
0001e3d: 01                                        ; i32 literal
0001e3e: 41                                        ; i32.const
0001e3f: 02                                        ; i32 literal
0001e40: 71                                        ; i32.and
0001e41: 1a                                        ; drop
0001e42: 0b                                        ; end
0001e3a: 08                                        ; FIXUP func body size
; function body 90
0001e43: 00                                        ; func body size (guess)
0001e44: 00                                        ; local decl count
0001e45: 41                                        ; i32.const
0001e46: 01                                        ; i32 literal
0001e47: 41                                        ; i32.const
0001e48: 02                                        ; i32 literal
0001e49: 72                                        ; i32.or
0001e4a: 1a                                        ; drop
0001e4b: 0b                                        ; end
0001e43: 08                                        ; FIXUP func body size
; function body 91
0001e4c: 00                                        ; func body size (guess)
0001e4d: 00                                        ; local decl count
0001e4e: 41                                        ; i32.const
0001e4f: 01                                        ; i32 literal
0001e50: 41                                        ; i32.const
0001e51: 02                                        ; i32 literal
0001e52: 73                                        ; i32.xor
0001e53: 1a                                        ; drop
0001e54: 0b                                        ; end
0001e4c: 08                                        ; FIXUP func body size
; function body 92
0001e55: 00                                        ; func body size (guess)
0001e56: 00                                        ; local decl count
0001e57: 41                                        ; i32.const
0001e58: 01                                        ; i32 literal
0001e59: 41                                        ; i32.const
0001e5a: 02                                        ; i32 literal
0001e5b: 74                                        ; i32.shl
0001e5c: 1a                                        ; drop
0001e5d: 0b                                        ; end
0001e55: 08                                        ; FIXUP func body size
; function body 93
0001e5e: 00                                        ; func body size (guess)
0001e5f: 00                                        ; local decl count
0001e60: 41                                        ; i32.const
0001e61: 01                                        ; i32 literal
0001e62: 41                                        ; i32.const
0001e63: 02                                        ; i32 literal
0001e64: 75                                        ; i32.shr_s
0001e65: 1a                                        ; drop
0001e66: 0b                                        ; end
0001e5e: 08                                        ; FIXUP func body size
; function body 94
0001e67: 00                                        ; func body size (guess)
0001e68: 00                                        ; local decl count
0001e69: 41                                        ; i32.const
0001e6a: 01                                        ; i32 literal
0001e6b: 41                                        ; i32.const
0001e6c: 02                                        ; i32 literal
0001e6d: 76                                        ; i32.shr_u
0001e6e: 1a                                        ; drop
0001e6f: 0b                                        ; end
0001e67: 08                                        ; FIXUP func body size
; function body 95
0001e70: 00                                        ; func body size (guess)
0001e71: 00                                        ; local decl count
0001e72: 41                                        ; i32.const
0001e73: 01                                        ; i32 literal
0001e74: 41                                        ; i32.const
0001e75: 02                                        ; i32 literal
0001e76: 77                                        ; i32.rotl
0001e77: 1a                                        ; drop
0001e78: 0b                                        ; end
0001e70: 08                                        ; FIXUP func body size
; function body 96
0001e79: 00                                        ; func body size (guess)
0001e7a: 00                                        ; local decl count
0001e7b: 41                                        ; i32.const
0001e7c: 01                                        ; i32 literal
0001e7d: 41                                        ; i32.const
0001e7e: 02                                        ; i32 literal
0001e7f: 78                                        ; i32.rotr
0001e80: 1a                                        ; drop
0001e81: 0b                                        ; end
0001e79: 08                                        ; FIXUP func body size
; function body 97
0001e82: 00                                        ; func body size (guess)
0001e83: 00                                        ; local decl count
0001e84: 42                                        ; i64.const
0001e85: 01                                        ; i64 literal
0001e86: 79                                        ; i64.clz
0001e87: 1a                                        ; drop
0001e88: 0b                                        ; end
0001e82: 06                                        ; FIXUP func body size
; function body 98
0001e89: 00                                        ; func body size (guess)
0001e8a: 00                                        ; local decl count
0001e8b: 42                                        ; i64.const
0001e8c: 01                                        ; i64 literal
0001e8d: 7a                                        ; i64.ctz
0001e8e: 1a                                        ; drop
0001e8f: 0b                                        ; end
0001e89: 06                                        ; FIXUP func body size
; function body 99
0001e90: 00                                        ; func body size (guess)
0001e91: 00                                        ; local decl count
0001e92: 42                                        ; i64.const
0001e93: 01                                        ; i64 literal
0001e94: 7b                                        ; i64.popcnt
0001e95: 1a                                        ; drop
0001e96: 0b                                        ; end
0001e90: 06                                        ; FIXUP func body size
; function body 100
0001e97: 00                                        ; func body size (guess)
0001e98: 00                                        ; local decl count
0001e99: 42                                        ; i64.const
0001e9a: 01                                        ; i64 literal
0001e9b: 42                                        ; i64.const
0001e9c: 02                                        ; i64 literal
0001e9d: 7c                                        ; i64.add
0001e9e: 1a                                        ; drop
0001e9f: 0b                                        ; end
0001e97: 08                                        ; FIXUP func body size
; function body 101
0001ea0: 00                                        ; func body size (guess)
0001ea1: 00                                        ; local decl count
0001ea2: 42                                        ; i64.const
0001ea3: 01                                        ; i64 literal
0001ea4: 42                                        ; i64.const
0001ea5: 02                                        ; i64 literal
0001ea6: 7d                                        ; i64.sub
0001ea7: 1a                                        ; drop
0001ea8: 0b                                        ; end
0001ea0: 08                                        ; FIXUP func body size
; function body 102
0001ea9: 00                                        ; func body size (guess)
0001eaa: 00                                        ; local decl count
0001eab: 42                                        ; i64.const
0001eac: 01                                        ; i64 literal
0001ead: 42                                        ; i64.const
0001eae: 02                                        ; i64 literal
0001eaf: 7e                                        ; i64.mul
0001eb0: 1a                                        ; drop
0001eb1: 0b                                        ; end
0001ea9: 08                                        ; FIXUP func body size
; function body 103
0001eb2: 00                                        ; func body size (guess)
0001eb3: 00                                        ; local decl count
0001eb4: 42                                        ; i64.const
0001eb5: 01                                        ; i64 literal
0001eb6: 42                                        ; i64.const
0001eb7: 02                                        ; i64 literal
0001eb8: 7f                                        ; i64.div_s
0001eb9: 1a                                        ; drop
0001eba: 0b                                        ; end
0001eb2: 08                                        ; FIXUP func body size
; function body 104
0001ebb: 00                                        ; func body size (guess)
0001ebc: 00                                        ; local decl count
0001ebd: 42                                        ; i64.const
0001ebe: 01                                        ; i64 literal
0001ebf: 42                                        ; i64.const
0001ec0: 02                                        ; i64 literal
0001ec1: 80                                        ; i64.div_u
0001ec2: 1a                                        ; drop
0001ec3: 0b                                        ; end
0001ebb: 08                                        ; FIXUP func body size
; function body 105
0001ec4: 00                                        ; func body size (guess)
0001ec5: 00                                        ; local decl count
0001ec6: 42                                        ; i64.const
0001ec7: 01                                        ; i64 literal
0001ec8: 42                                        ; i64.const
0001ec9: 02                                        ; i64 literal
0001eca: 81                                        ; i64.rem_s
0001ecb: 1a                                        ; drop
0001ecc: 0b                                        ; end
0001ec4: 08                                        ; FIXUP func body size
; function body 106
0001ecd: 00                                        ; func body size (guess)
0001ece: 00                                        ; local decl count
0001ecf: 42                                        ; i64.const
0001ed0: 01                                        ; i64 literal
0001ed1: 42                                        ; i64.const
0001ed2: 02                                        ; i64 literal
0001ed3: 82                                        ; i64.rem_u
0001ed4: 1a                                        ; drop
0001ed5: 0b                                        ; end
0001ecd: 08                                        ; FIXUP func body size
; function body 107
0001ed6: 00                                        ; func body size (guess)
0001ed7: 00                                        ; local decl count
0001ed8: 42                                        ; i64.const
0001ed9: 01                                        ; i64 literal
0001eda: 42                                        ; i64.const
0001edb: 02                                        ; i64 literal
0001edc: 83                                        ; i64.and
0001edd: 1a                                        ; drop
0001ede: 0b                                        ; end
0001ed6: 08                                        ; FIXUP func body size
; function body 108
0001edf: 00                                        ; func body size (guess)
0001ee0: 00                                        ; local decl count
0001ee1: 42                                        ; i64.const
0001ee2: 01                                        ; i64 literal
0001ee3: 42                                        ; i64.const
0001ee4: 02                                        ; i64 literal
0001ee5: 84                                        ; i64.or
0001ee6: 1a                                        ; drop
0001ee7: 0b                                        ; end
0001edf: 08                                        ; FIXUP func body size
; function body 109
0001ee8: 00                                        ; func body size (guess)
0001ee9: 00                                        ; local decl count
0001eea: 42                                        ; i64.const
0001eeb: 01                                        ; i64 literal
0001eec: 42                                        ; i64.const
0001eed: 02                                        ; i64 literal
0001eee: 85                                        ; i64.xor
0001eef: 1a                                        ; drop
0001ef0: 0b                                        ; end
0001ee8: 08                                        ; FIXUP func body size
; function body 110
0001ef1: 00                                        ; func body size (guess)
0001ef2: 00                                        ; local decl count
0001ef3: 42                                        ; i64.const
0001ef4: 01                                        ; i64 literal
0001ef5: 42                                        ; i64.const
0001ef6: 02                                        ; i64 literal
0001ef7: 86                                        ; i64.shl
0001ef8: 1a                                        ; drop
0001ef9: 0b                                        ; end
0001ef1: 08                                        ; FIXUP func body size
; function body 111
0001efa: 00                                        ; func body size (guess)
0001efb: 00                                        ; local decl count
0001efc: 42                                        ; i64.const
0001efd: 01                                        ; i64 literal
0001efe: 42                                        ; i64.const
0001eff: 02                                        ; i64 literal
0001f00: 87                                        ; i64.shr_s
0001f01: 1a                                        ; drop
0001f02: 0b                                        ; end
0001efa: 08                                        ; FIXUP func body size
; function body 112
0001f03: 00                                        ; func body size (guess)
0001f04: 00                                        ; local decl count
0001f05: 42                                        ; i64.const
0001f06: 01                                        ; i64 literal
0001f07: 42                                        ; i64.const
0001f08: 02                                        ; i64 literal
0001f09: 88                                        ; i64.shr_u
0001f0a: 1a                                        ; drop
0001f0b: 0b                                        ; end
0001f03: 08                                        ; FIXUP func body size
; function body 113
0001f0c: 00                                        ; func body size (guess)
0001f0d: 00                                        ; local decl count
0001f0e: 42                                        ; i64.const
0001f0f: 01                                        ; i64 literal
0001f10: 42                                        ; i64.const
0001f11: 02                                        ; i64 literal
0001f12: 89                                        ; i64.rotl
0001f13: 1a                                        ; drop
0001f14: 0b                                        ; end
0001f0c: 08                                        ; FIXUP func body size
; function body 114
0001f15: 00                                        ; func body size (guess)
0001f16: 00                                        ; local decl count
0001f17: 42                                        ; i64.const
0001f18: 01                                        ; i64 literal
0001f19: 42                                        ; i64.const
0001f1a: 02                                        ; i64 literal
0001f1b: 8a                                        ; i64.rotr
0001f1c: 1a                                        ; drop
0001f1d: 0b                                        ; end
0001f15: 08                                        ; FIXUP func body size
; function body 115
0001f1e: 00                                        ; func body size (guess)
0001f1f: 00                                        ; local decl count
0001f20: 43                                        ; f32.const
0001f21: 0000 803f                                 ; f32 literal
0001f25: 8b                                        ; f32.abs
0001f26: 1a                                        ; drop
0001f27: 0b                                        ; end
0001f1e: 09                                        ; FIXUP func body size
; function body 116
0001f28: 00                                        ; func body size (guess)
0001f29: 00                                        ; local decl count
0001f2a: 43                                        ; f32.const
0001f2b: 0000 803f                                 ; f32 literal
0001f2f: 8c                                        ; f32.neg
0001f30: 1a                                        ; drop
0001f31: 0b                                        ; end
0001f28: 09                                        ; FIXUP func body size
; function body 117
0001f32: 00                                        ; func body size (guess)
0001f33: 00                                        ; local decl count
0001f34: 43                                        ; f32.const
0001f35: 0000 803f                                 ; f32 literal
0001f39: 8d                                        ; f32.ceil
0001f3a: 1a                                        ; drop
0001f3b: 0b                                        ; end
0001f32: 09                                        ; FIXUP func body size
; function body 118
0001f3c: 00                                        ; func body size (guess)
0001f3d: 00                                        ; local decl count
0001f3e: 43                                        ; f32.const
0001f3f: 0000 803f                                 ; f32 literal
0001f43: 8e                                        ; f32.floor
0001f44: 1a                                        ; drop
0001f45: 0b                                        ; end
0001f3c: 09                                        ; FIXUP func body size
; function body 119
0001f46: 00                                        ; func body size (guess)
0001f47: 00                                        ; local decl count
0001f48: 43                                        ; f32.const
0001f49: 0000 803f                                 ; f32 literal
0001f4d: 8f                                        ; f32.trunc
0001f4e: 1a                                        ; drop
0001f4f: 0b                                        ; end
0001f46: 09                                        ; FIXUP func body size
; function body 120
0001f50: 00                                        ; func body size (guess)
0001f51: 00                                        ; local decl count
0001f52: 43                                        ; f32.const
0001f53: 0000 803f                                 ; f32 literal
0001f57: 90                                        ; f32.nearest
0001f58: 1a                                        ; drop
0001f59: 0b                                        ; end
0001f50: 09                                        ; FIXUP func body size
; function body 121
0001f5a: 00                                        ; func body size (guess)
0001f5b: 00                                        ; local decl count
0001f5c: 43                                        ; f32.const
0001f5d: 0000 803f                                 ; f32 literal
0001f61: 91                                        ; f32.sqrt
0001f62: 1a                                        ; drop
0001f63: 0b                                        ; end
0001f5a: 09                                        ; FIXUP func body size
; function body 122
0001f64: 00                                        ; func body size (guess)
0001f65: 00                                        ; local decl count
0001f66: 43                                        ; f32.const
0001f67: 0000 803f                                 ; f32 literal
0001f6b: 43                                        ; f32.const
0001f6c: 0000 0040                                 ; f32 literal
0001f70: 92                                        ; f32.add
0001f71: 1a                                        ; drop
0001f72: 0b                                        ; end
0001f64: 0e                                        ; FIXUP func body size
; function body 123
0001f73: 00                                        ; func body size (guess)
0001f74: 00                                        ; local decl count
0001f75: 43                                        ; f32.const
0001f76: 0000 803f                                 ; f32 literal
0001f7a: 43                                        ; f32.const
0001f7b: 0000 0040                                 ; f32 literal
0001f7f: 93                                        ; f32.sub
0001f80: 1a                                        ; drop
0001f81: 0b                                        ; end
0001f73: 0e                                        ; FIXUP func body size
; function body 124
0001f82: 00                                        ; func body size (guess)
0001f83: 00                                        ; local decl count
0001f84: 43                                        ; f32.const
0001f85: 0000 803f                                 ; f32 literal
0001f89: 43                                        ; f32.const
0001f8a: 0000 0040                                 ; f32 literal
0001f8e: 94                                        ; f32.mul
0001f8f: 1a                                        ; drop
0001f90: 0b                                        ; end
0001f82: 0e                                        ; FIXUP func body size
; function body 125
0001f91: 00                                        ; func body size (guess)
0001f92: 00                                        ; local decl count
0001f93: 43                                        ; f32.const
0001f94: 0000 803f                                 ; f32 literal
0001f98: 43                                        ; f32.const
0001f99: 0000 0040                                 ; f32 literal
0001f9d: 95                                        ; f32.div
0001f9e: 1a                                        ; drop
0001f9f: 0b                                        ; end
0001f91: 0e                                        ; FIXUP func body size
; function body 126
0001fa0: 00                                        ; func body size (guess)
0001fa1: 00                                        ; local decl count
0001fa2: 43                                        ; f32.const
0001fa3: 0000 803f                                 ; f32 literal
0001fa7: 43                                        ; f32.const
0001fa8: 0000 0040                                 ; f32 literal
0001fac: 96                                        ; f32.min
0001fad: 1a                                        ; drop
0001fae: 0b                                        ; end
0001fa0: 0e                                        ; FIXUP func body size
; function body 127
0001faf: 00                                        ; func body size (guess)
0001fb0: 00                                        ; local decl count
0001fb1: 43                                        ; f32.const
0001fb2: 0000 803f                                 ; f32 literal
0001fb6: 43                                        ; f32.const
0001fb7: 0000 0040                                 ; f32 literal
0001fbb: 97                                        ; f32.max
0001fbc: 1a                                        ; drop
0001fbd: 0b                                        ; end
0001faf: 0e                                        ; FIXUP func body size
; function body 128
0001fbe: 00                                        ; func body size (guess)
0001fbf: 00                                        ; local decl count
0001fc0: 43                                        ; f32.const
0001fc1: 0000 803f                                 ; f32 literal
0001fc5: 43                                        ; f32.const
0001fc6: 0000 0040                                 ; f32 literal
0001fca: 98                                        ; f32.copysign
0001fcb: 1a                                        ; drop
0001fcc: 0b                                        ; end
0001fbe: 0e                                        ; FIXUP func body size
; function body 129
0001fcd: 00                                        ; func body size (guess)
0001fce: 00                                        ; local decl count
0001fcf: 44                                        ; f64.const
0001fd0: 0000 0000 0000 f03f                       ; f64 literal
0001fd8: 99                                        ; f64.abs
0001fd9: 1a                                        ; drop
0001fda: 0b                                        ; end
0001fcd: 0d                                        ; FIXUP func body size
; function body 130
0001fdb: 00                                        ; func body size (guess)
0001fdc: 00                                        ; local decl count
0001fdd: 44                                        ; f64.const
0001fde: 0000 0000 0000 f03f                       ; f64 literal
0001fe6: 9a                                        ; f64.neg
0001fe7: 1a                                        ; drop
0001fe8: 0b                                        ; end
0001fdb: 0d                                        ; FIXUP func body size
; function body 131
0001fe9: 00                                        ; func body size (guess)
0001fea: 00                                        ; local decl count
0001feb: 44                                        ; f64.const
0001fec: 0000 0000 0000 f03f                       ; f64 literal
0001ff4: 9b                                        ; f64.ceil
0001ff5: 1a                                        ; drop
0001ff6: 0b                                        ; end
0001fe9: 0d                                        ; FIXUP func body size
; function body 132
0001ff7: 00                                        ; func body size (guess)
0001ff8: 00                                        ; local decl count
0001ff9: 44                                        ; f64.const
0001ffa: 0000 0000 0000 f03f                       ; f64 literal
0002002: 9c                                        ; f64.floor
0002003: 1a                                        ; drop
0002004: 0b                                        ; end
0001ff7: 0d                                        ; FIXUP func body size
; function body 133
0002005: 00                                        ; func body size (guess)
0002006: 00                                        ; local decl count
0002007: 44                                        ; f64.const
0002008: 0000 0000 0000 f03f                       ; f64 literal
0002010: 9d                                        ; f64.trunc
0002011: 1a                                        ; drop
0002012: 0b                                        ; end
0002005: 0d                                        ; FIXUP func body size
; function body 134
0002013: 00                                        ; func body size (guess)
0002014: 00                                        ; local decl count
0002015: 44                                        ; f64.const
0002016: 0000 0000 0000 f03f                       ; f64 literal
000201e: 9e                                        ; f64.nearest
000201f: 1a                                        ; drop
0002020: 0b                                        ; end
0002013: 0d                                        ; FIXUP func body size
; function body 135
0002021: 00                                        ; func body size (guess)
0002022: 00                                        ; local decl count
0002023: 44                                        ; f64.const
0002024: 0000 0000 0000 f03f                       ; f64 literal
000202c: 9f                                        ; f64.sqrt
000202d: 1a                                        ; drop
000202e: 0b                                        ; end
0002021: 0d                                        ; FIXUP func body size
; function body 136
000202f: 00                                        ; func body size (guess)
0002030: 00                                        ; local decl count
0002031: 44                                        ; f64.const
0002032: 0000 0000 0000 f03f                       ; f64 literal
000203a: 44                                        ; f64.const
000203b: 0000 0000 0000 0040                       ; f64 literal
0002043: a0                                        ; f64.add
0002044: 1a                                        ; drop
0002045: 0b                                        ; end
000202f: 16                                        ; FIXUP func body size
; function body 137
0002046: 00                                        ; func body size (guess)
0002047: 00                                        ; local decl count
0002048: 44                                        ; f64.const
0002049: 0000 0000 0000 f03f                       ; f64 literal
0002051: 44                                        ; f64.const
0002052: 0000 0000 0000 0040                       ; f64 literal
000205a: a1                                        ; f64.sub
000205b: 1a                                        ; drop
000205c: 0b                                        ; end
0002046: 16                                        ; FIXUP func body size
; function body 138
000205d: 00                                        ; func body size (guess)
000205e: 00                                        ; local decl count
000205f: 44                                        ; f64.const
0002060: 0000 0000 0000 f03f                       ; f64 literal
0002068: 44                                        ; f64.const
0002069: 0000 0000 0000 0040                       ; f64 literal
0002071: a2                                        ; f64.mul
0002072: 1a                                        ; drop
0002073: 0b                                        ; end
000205d: 16                                        ; FIXUP func body size
; function body 139
0002074: 00                                        ; func body size (guess)
0002075: 00                                        ; local decl count
0002076: 44                                        ; f64.const
0002077: 0000 0000 0000 f03f                       ; f64 literal
000207f: 44                                        ; f64.const
0002080: 0000 0000 0000 0040                       ; f64 literal
0002088: a3                                        ; f64.div
0002089: 1a                                        ; drop
000208a: 0b                                        ; end
0002074: 16                                        ; FIXUP func body size
; function body 140
000208b: 00                                        ; func body size (guess)
000208c: 00                                        ; local decl count
000208d: 44                                        ; f64.const
000208e: 0000 0000 0000 f03f                       ; f64 literal
0002096: 44                                        ; f64.const
0002097: 0000 0000 0000 0040                       ; f64 literal
000209f: a4                                        ; f64.min
00020a0: 1a                                        ; drop
00020a1: 0b                                        ; end
000208b: 16                                        ; FIXUP func body size
; function body 141
00020a2: 00                                        ; func body size (guess)
00020a3: 00                                        ; local decl count
00020a4: 44                                        ; f64.const
00020a5: 0000 0000 0000 f03f                       ; f64 literal
00020ad: 44                                        ; f64.const
00020ae: 0000 0000 0000 0040                       ; f64 literal
00020b6: a5                                        ; f64.max
00020b7: 1a                                        ; drop
00020b8: 0b                                        ; end
00020a2: 16                                        ; FIXUP func body size
; function body 142
00020b9: 00                                        ; func body size (guess)
00020ba: 00                                        ; local decl count
00020bb: 44                                        ; f64.const
00020bc: 0000 0000 0000 f03f                       ; f64 literal
00020c4: 44                                        ; f64.const
00020c5: 0000 0000 0000 0040                       ; f64 literal
00020cd: a6                                        ; f64.copysign
00020ce: 1a                                        ; drop
00020cf: 0b                                        ; end
00020b9: 16                                        ; FIXUP func body size
; function body 143
00020d0: 00                                        ; func body size (guess)
00020d1: 00                                        ; local decl count
00020d2: 42                                        ; i64.const
00020d3: 01                                        ; i64 literal
00020d4: a7                                        ; i32.wrap_i64
00020d5: 1a                                        ; drop
00020d6: 0b                                        ; end
00020d0: 06                                        ; FIXUP func body size
; function body 144
00020d7: 00                                        ; func body size (guess)
00020d8: 00                                        ; local decl count
00020d9: 43                                        ; f32.const
00020da: 0000 803f                                 ; f32 literal
00020de: a8                                        ; i32.trunc_f32_s
00020df: 1a                                        ; drop
00020e0: 0b                                        ; end
00020d7: 09                                        ; FIXUP func body size
; function body 145
00020e1: 00                                        ; func body size (guess)
00020e2: 00                                        ; local decl count
00020e3: 43                                        ; f32.const
00020e4: 0000 803f                                 ; f32 literal
00020e8: a9                                        ; i32.trunc_f32_u
00020e9: 1a                                        ; drop
00020ea: 0b                                        ; end
00020e1: 09                                        ; FIXUP func body size
; function body 146
00020eb: 00                                        ; func body size (guess)
00020ec: 00                                        ; local decl count
00020ed: 44                                        ; f64.const
00020ee: 0000 0000 0000 f03f                       ; f64 literal
00020f6: aa                                        ; i32.trunc_f64_s
00020f7: 1a                                        ; drop
00020f8: 0b                                        ; end
00020eb: 0d                                        ; FIXUP func body size
; function body 147
00020f9: 00                                        ; func body size (guess)
00020fa: 00                                        ; local decl count
00020fb: 44                                        ; f64.const
00020fc: 0000 0000 0000 f03f                       ; f64 literal
0002104: ab                                        ; i32.trunc_f64_u
0002105: 1a                                        ; drop
0002106: 0b                                        ; end
00020f9: 0d                                        ; FIXUP func body size
; function body 148
0002107: 00                                        ; func body size (guess)
0002108: 00                                        ; local decl count
0002109: 41                                        ; i32.const
000210a: 01                                        ; i32 literal
000210b: ac                                        ; i64.extend_i32_s
000210c: 1a                                        ; drop
000210d: 0b                                        ; end
0002107: 06                                        ; FIXUP func body size
; function body 149
000210e: 00                                        ; func body size (guess)
000210f: 00                                        ; local decl count
0002110: 41                                        ; i32.const
0002111: 01                                        ; i32 literal
0002112: ad                                        ; i64.extend_i32_u
0002113: 1a                                        ; drop
0002114: 0b                                        ; end
000210e: 06                                        ; FIXUP func body size
; function body 150
0002115: 00                                        ; func body size (guess)
0002116: 00                                        ; local decl count
0002117: 43                                        ; f32.const
0002118: 0000 803f                                 ; f32 literal
000211c: ae                                        ; i64.trunc_f32_s
000211d: 1a                                        ; drop
000211e: 0b                                        ; end
0002115: 09                                        ; FIXUP func body size
; function body 151
000211f: 00                                        ; func body size (guess)
0002120: 00                                        ; local decl count
0002121: 43                                        ; f32.const
0002122: 0000 803f                                 ; f32 literal
0002126: af                                        ; i64.trunc_f32_u
0002127: 1a                                        ; drop
0002128: 0b                                        ; end
000211f: 09                                        ; FIXUP func body size
; function body 152
0002129: 00                                        ; func body size (guess)
000212a: 00                                        ; local decl count
000212b: 44                                        ; f64.const
000212c: 0000 0000 0000 f03f                       ; f64 literal
0002134: b0                                        ; i64.trunc_f64_s
0002135: 1a                                        ; drop
0002136: 0b                                        ; end
0002129: 0d                                        ; FIXUP func body size
; function body 153
0002137: 00                                        ; func body size (guess)
0002138: 00                                        ; local decl count
0002139: 44                                        ; f64.const
000213a: 0000 0000 0000 f03f                       ; f64 literal
0002142: b1                                        ; i64.trunc_f64_u
0002143: 1a                                        ; drop
0002144: 0b                                        ; end
0002137: 0d                                        ; FIXUP func body size
; function body 154
0002145: 00                                        ; func body size (guess)
0002146: 00                                        ; local decl count
0002147: 41                                        ; i32.const
0002148: 01                                        ; i32 literal
0002149: b2                                        ; f32.convert_i32_s
000214a: 1a                                        ; drop
000214b: 0b                                        ; end
0002145: 06                                        ; FIXUP func body size
; function body 155
000214c: 00                                        ; func body size (guess)
000214d: 00                                        ; local decl count
000214e: 41                                        ; i32.const
000214f: 01                                        ; i32 literal
0002150: b3                                        ; f32.convert_i32_u
0002151: 1a                                        ; drop
0002152: 0b                                        ; end
000214c: 06                                        ; FIXUP func body size
; function body 156
0002153: 00                                        ; func body size (guess)
0002154: 00                                        ; local decl count
0002155: 42                                        ; i64.const
0002156: 01                                        ; i64 literal
0002157: b4                                        ; f32.convert_i64_s
0002158: 1a                                        ; drop
0002159: 0b                                        ; end
0002153: 06                                        ; FIXUP func body size
; function body 157
000215a: 00                                        ; func body size (guess)
000215b: 00                                        ; local decl count
000215c: 42                                        ; i64.const
000215d: 01                                        ; i64 literal
000215e: b5                                        ; f32.convert_i64_u
000215f: 1a                                        ; drop
0002160: 0b                                        ; end
000215a: 06                                        ; FIXUP func body size
; function body 158
0002161: 00                                        ; func body size (guess)
0002162: 00                                        ; local decl count
0002163: 44                                        ; f64.const
0002164: 0000 0000 0000 f03f                       ; f64 literal
000216c: b6                                        ; f32.demote_f64
000216d: 1a                                        ; drop
000216e: 0b                                        ; end
0002161: 0d                                        ; FIXUP func body size
; function body 159
000216f: 00                                        ; func body size (guess)
0002170: 00                                        ; local decl count
0002171: 41                                        ; i32.const
0002172: 01                                        ; i32 literal
0002173: b7                                        ; f64.convert_i32_s
0002174: 1a                                        ; drop
0002175: 0b                                        ; end
000216f: 06                                        ; FIXUP func body size
; function body 160
0002176: 00                                        ; func body size (guess)
0002177: 00                                        ; local decl count
0002178: 41                                        ; i32.const
0002179: 01                                        ; i32 literal
000217a: b8                                        ; f64.convert_i32_u
000217b: 1a                                        ; drop
000217c: 0b                                        ; end
0002176: 06                                        ; FIXUP func body size
; function body 161
000217d: 00                                        ; func body size (guess)
000217e: 00                                        ; local decl count
000217f: 42                                        ; i64.const
0002180: 01                                        ; i64 literal
0002181: b9                                        ; f64.convert_i64_s
0002182: 1a                                        ; drop
0002183: 0b                                        ; end
000217d: 06                                        ; FIXUP func body size
; function body 162
0002184: 00                                        ; func body size (guess)
0002185: 00                                        ; local decl count
0002186: 42                                        ; i64.const
0002187: 01                                        ; i64 literal
0002188: ba                                        ; f64.convert_i64_u
0002189: 1a                                        ; drop
000218a: 0b                                        ; end
0002184: 06                                        ; FIXUP func body size
; function body 163
000218b: 00                                        ; func body size (guess)
000218c: 00                                        ; local decl count
000218d: 43                                        ; f32.const
000218e: 0000 803f                                 ; f32 literal
0002192: bb                                        ; f64.promote_f32
0002193: 1a                                        ; drop
0002194: 0b                                        ; end
000218b: 09                                        ; FIXUP func body size
; function body 164
0002195: 00                                        ; func body size (guess)
0002196: 00                                        ; local decl count
0002197: 41                                        ; i32.const
0002198: 01                                        ; i32 literal
0002199: be                                        ; f32.reinterpret_i32
000219a: 1a                                        ; drop
000219b: 0b                                        ; end
0002195: 06                                        ; FIXUP func body size
; function body 165
000219c: 00                                        ; func body size (guess)
000219d: 00                                        ; local decl count
000219e: 43                                        ; f32.const
000219f: 0000 803f                                 ; f32 literal
00021a3: bc                                        ; i32.reinterpret_f32
00021a4: 1a                                        ; drop
00021a5: 0b                                        ; end
000219c: 09                                        ; FIXUP func body size
; function body 166
00021a6: 00                                        ; func body size (guess)
00021a7: 00                                        ; local decl count
00021a8: 42                                        ; i64.const
00021a9: 01                                        ; i64 literal
00021aa: bf                                        ; f64.reinterpret_i64
00021ab: 1a                                        ; drop
00021ac: 0b                                        ; end
00021a6: 06                                        ; FIXUP func body size
; function body 167
00021ad: 00                                        ; func body size (guess)
00021ae: 00                                        ; local decl count
00021af: 44                                        ; f64.const
00021b0: 0000 0000 0000 f03f                       ; f64 literal
00021b8: bd                                        ; i64.reinterpret_f64
00021b9: 1a                                        ; drop
00021ba: 0b                                        ; end
00021ad: 0d                                        ; FIXUP func body size
; function body 168
00021bb: 00                                        ; func body size (guess)
00021bc: 00                                        ; local decl count
00021bd: 41                                        ; i32.const
00021be: 01                                        ; i32 literal
00021bf: c0                                        ; i32.extend8_s
00021c0: 1a                                        ; drop
00021c1: 0b                                        ; end
00021bb: 06                                        ; FIXUP func body size
; function body 169
00021c2: 00                                        ; func body size (guess)
00021c3: 00                                        ; local decl count
00021c4: 41                                        ; i32.const
00021c5: 01                                        ; i32 literal
00021c6: c1                                        ; i32.extend16_s
00021c7: 1a                                        ; drop
00021c8: 0b                                        ; end
00021c2: 06                                        ; FIXUP func body size
; function body 170
00021c9: 00                                        ; func body size (guess)
00021ca: 00                                        ; local decl count
00021cb: 42                                        ; i64.const
00021cc: 01                                        ; i64 literal
00021cd: c2                                        ; i64.extend8_s
00021ce: 1a                                        ; drop
00021cf: 0b                                        ; end
00021c9: 06                                        ; FIXUP func body size
; function body 171
00021d0: 00                                        ; func body size (guess)
00021d1: 00                                        ; local decl count
00021d2: 42                                        ; i64.const
00021d3: 01                                        ; i64 literal
00021d4: c3                                        ; i64.extend16_s
00021d5: 1a                                        ; drop
00021d6: 0b                                        ; end
00021d0: 06                                        ; FIXUP func body size
; function body 172
00021d7: 00                                        ; func body size (guess)
00021d8: 00                                        ; local decl count
00021d9: 42                                        ; i64.const
00021da: 01                                        ; i64 literal
00021db: c4                                        ; i64.extend32_s
00021dc: 1a                                        ; drop
00021dd: 0b                                        ; end
00021d7: 06                                        ; FIXUP func body size
; function body 173
00021de: 00                                        ; func body size (guess)
00021df: 01                                        ; local decl count
00021e0: 01                                        ; local type count
00021e1: 7f                                        ; i32
00021e2: 0b                                        ; end
00021de: 04                                        ; FIXUP func body size
; function body 174
00021e3: 00                                        ; func body size (guess)
00021e4: 00                                        ; local decl count
00021e5: 41                                        ; i32.const
00021e6: 01                                        ; i32 literal
00021e7: 0d                                        ; br_if
00021e8: 00                                        ; break depth
00021e9: 0b                                        ; end
00021e3: 06                                        ; FIXUP func body size
; function body 175
00021ea: 00                                        ; func body size (guess)
00021eb: 00                                        ; local decl count
00021ec: 41                                        ; i32.const
00021ed: 01                                        ; i32 literal
00021ee: 10                                        ; call
00021ef: 00                                        ; function index
00021f0: 0b                                        ; end
00021ea: 06                                        ; FIXUP func body size
; function body 176
00021f1: 00                                        ; func body size (guess)
00021f2: 00                                        ; local decl count
00021f3: 41                                        ; i32.const
00021f4: 01                                        ; i32 literal
00021f5: 0e                                        ; br_table
00021f6: 00                                        ; num targets
00021f7: 00                                        ; break depth for default
00021f8: 0b                                        ; end
00021f1: 07                                        ; FIXUP func body size
; function body 177
00021f9: 00                                        ; func body size (guess)
00021fa: 00                                        ; local decl count
00021fb: 02                                        ; block
00021fc: 7f                                        ; i32
00021fd: 41                                        ; i32.const
00021fe: 01                                        ; i32 literal
00021ff: 41                                        ; i32.const
0002200: 02                                        ; i32 literal
0002201: 0c                                        ; br
0002202: 00                                        ; break depth
0002203: 0b                                        ; end
0002204: 1a                                        ; drop
0002205: 0b                                        ; end
00021f9: 0c                                        ; FIXUP func body size
; function body 178
0002206: 00                                        ; func body size (guess)
0002207: 00                                        ; local decl count
0002208: 43                                        ; f32.const
0002209: 0000 803f                                 ; f32 literal
000220d: fc                                        ; prefix
000220e: 00                                        ; i32.trunc_sat_f32_s
000220f: 1a                                        ; drop
0002210: 0b                                        ; end
0002206: 0a                                        ; FIXUP func body size
; function body 179
0002211: 00                                        ; func body size (guess)
0002212: 00                                        ; local decl count
0002213: 43                                        ; f32.const
0002214: 0000 803f                                 ; f32 literal
0002218: fc                                        ; prefix
0002219: 01                                        ; i32.trunc_sat_f32_u
000221a: 1a                                        ; drop
000221b: 0b                                        ; end
0002211: 0a                                        ; FIXUP func body size
; function body 180
000221c: 00                                        ; func body size (guess)
000221d: 00                                        ; local decl count
000221e: 44                                        ; f64.const
000221f: 0000 0000 0000 f03f                       ; f64 literal
0002227: fc                                        ; prefix
0002228: 02                                        ; i32.trunc_sat_f64_s
0002229: 1a                                        ; drop
000222a: 0b                                        ; end
000221c: 0e                                        ; FIXUP func body size
; function body 181
000222b: 00                                        ; func body size (guess)
000222c: 00                                        ; local decl count
000222d: 44                                        ; f64.const
000222e: 0000 0000 0000 f03f                       ; f64 literal
0002236: fc                                        ; prefix
0002237: 03                                        ; i32.trunc_sat_f64_u
0002238: 1a                                        ; drop
0002239: 0b                                        ; end
000222b: 0e                                        ; FIXUP func body size
; function body 182
000223a: 00                                        ; func body size (guess)
000223b: 00                                        ; local decl count
000223c: 43                                        ; f32.const
000223d: 0000 803f                                 ; f32 literal
0002241: fc                                        ; prefix
0002242: 04                                        ; i64.trunc_sat_f32_s
0002243: 1a                                        ; drop
0002244: 0b                                        ; end
000223a: 0a                                        ; FIXUP func body size
; function body 183
0002245: 00                                        ; func body size (guess)
0002246: 00                                        ; local decl count
0002247: 43                                        ; f32.const
0002248: 0000 803f                                 ; f32 literal
000224c: fc                                        ; prefix
000224d: 05                                        ; i64.trunc_sat_f32_u
000224e: 1a                                        ; drop
000224f: 0b                                        ; end
0002245: 0a                                        ; FIXUP func body size
; function body 184
0002250: 00                                        ; func body size (guess)
0002251: 00                                        ; local decl count
0002252: 44                                        ; f64.const
0002253: 0000 0000 0000 f03f                       ; f64 literal
000225b: fc                                        ; prefix
000225c: 06                                        ; i64.trunc_sat_f64_s
000225d: 1a                                        ; drop
000225e: 0b                                        ; end
0002250: 0e                                        ; FIXUP func body size
; function body 185
000225f: 00                                        ; func body size (guess)
0002260: 00                                        ; local decl count
0002261: 44                                        ; f64.const
0002262: 0000 0000 0000 f03f                       ; f64 literal
000226a: fc                                        ; prefix
000226b: 07                                        ; i64.trunc_sat_f64_u
000226c: 1a                                        ; drop
000226d: 0b                                        ; end
000225f: 0e                                        ; FIXUP func body size
; function body 186
000226e: 00                                        ; func body size (guess)
000226f: 00                                        ; local decl count
0002270: 41                                        ; i32.const
0002271: 01                                        ; i32 literal
0002272: 41                                        ; i32.const
0002273: 02                                        ; i32 literal
0002274: 41                                        ; i32.const
0002275: 03                                        ; i32 literal
0002276: fc                                        ; prefix
0002277: 08                                        ; memory.init
0002278: 00                                        ; memory.init segment
0002279: 00                                        ; memory.init reserved
000227a: 0b                                        ; end
000226e: 0c                                        ; FIXUP func body size
; function body 187
000227b: 00                                        ; func body size (guess)
000227c: 00                                        ; local decl count
000227d: fc                                        ; prefix
000227e: 09                                        ; data.drop
000227f: 00                                        ; data.drop segment
0002280: 0b                                        ; end
000227b: 05                                        ; FIXUP func body size
; function body 188
0002281: 00                                        ; func body size (guess)
0002282: 00                                        ; local decl count
0002283: 41                                        ; i32.const
0002284: 01                                        ; i32 literal
0002285: 41                                        ; i32.const
0002286: 02                                        ; i32 literal
0002287: 41                                        ; i32.const
0002288: 03                                        ; i32 literal
0002289: fc                                        ; prefix
000228a: 0a                                        ; memory.copy
000228b: 00                                        ; memory.copy reserved
000228c: 00                                        ; memory.copy reserved
000228d: 0b                                        ; end
0002281: 0c                                        ; FIXUP func body size
; function body 189
000228e: 00                                        ; func body size (guess)
000228f: 00                                        ; local decl count
0002290: 41                                        ; i32.const
0002291: 01                                        ; i32 literal
0002292: 41                                        ; i32.const
0002293: 02                                        ; i32 literal
0002294: 41                                        ; i32.const
0002295: 03                                        ; i32 literal
0002296: fc                                        ; prefix
0002297: 0b                                        ; memory.fill
0002298: 00                                        ; memory.fill reserved
0002299: 0b                                        ; end
000228e: 0b                                        ; FIXUP func body size
; function body 190
000229a: 00                                        ; func body size (guess)
000229b: 00                                        ; local decl count
000229c: 41                                        ; i32.const
000229d: 01                                        ; i32 literal
000229e: 41                                        ; i32.const
000229f: 02                                        ; i32 literal
00022a0: 41                                        ; i32.const
00022a1: 03                                        ; i32 literal
00022a2: fc                                        ; prefix
00022a3: 0c                                        ; table.init
00022a4: 00                                        ; table.init segment
00022a5: 00                                        ; table.init reserved
00022a6: 0b                                        ; end
000229a: 0c                                        ; FIXUP func body size
; function body 191
00022a7: 00                                        ; func body size (guess)
00022a8: 00                                        ; local decl count
00022a9: fc                                        ; prefix
00022aa: 0d                                        ; elem.drop
00022ab: 00                                        ; elem.drop segment
00022ac: 0b                                        ; end
00022a7: 05                                        ; FIXUP func body size
; function body 192
00022ad: 00                                        ; func body size (guess)
00022ae: 00                                        ; local decl count
00022af: 41                                        ; i32.const
00022b0: 01                                        ; i32 literal
00022b1: 41                                        ; i32.const
00022b2: 02                                        ; i32 literal
00022b3: 41                                        ; i32.const
00022b4: 03                                        ; i32 literal
00022b5: fc                                        ; prefix
00022b6: 0e                                        ; table.copy
00022b7: 00                                        ; table.copy reserved
00022b8: 00                                        ; table.copy reserved
00022b9: 0b                                        ; end
00022ad: 0c                                        ; FIXUP func body size
; function body 193
00022ba: 00                                        ; func body size (guess)
00022bb: 00                                        ; local decl count
00022bc: 41                                        ; i32.const
00022bd: 01                                        ; i32 literal
00022be: fd                                        ; prefix
00022bf: 00                                        ; v128.load
00022c0: 04                                        ; alignment
00022c1: 03                                        ; load offset
00022c2: 1a                                        ; drop
00022c3: 0b                                        ; end
00022ba: 09                                        ; FIXUP func body size
; function body 194
00022c4: 00                                        ; func body size (guess)
00022c5: 00                                        ; local decl count
00022c6: 41                                        ; i32.const
00022c7: 01                                        ; i32 literal
00022c8: fd                                        ; prefix
00022c9: 02                                        ; v128.const
00022ca: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00022da: fd                                        ; prefix
00022db: 01                                        ; v128.store
00022dc: 04                                        ; alignment
00022dd: 03                                        ; store offset
00022de: 0b                                        ; end
00022c4: 1a                                        ; FIXUP func body size
; function body 195
00022df: 00                                        ; func body size (guess)
00022e0: 00                                        ; local decl count
00022e1: fd                                        ; prefix
00022e2: 02                                        ; v128.const
00022e3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00022f3: 1a                                        ; drop
00022f4: 0b                                        ; end
00022df: 15                                        ; FIXUP func body size
; function body 196
00022f5: 00                                        ; func body size (guess)
00022f6: 00                                        ; local decl count
00022f7: fd                                        ; prefix
00022f8: 02                                        ; v128.const
00022f9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002309: fd                                        ; prefix
000230a: 02                                        ; v128.const
000230b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000231b: fd                                        ; prefix
000231c: 03                                        ; v8x16.shuffle
000231d: 0101 0101 0101 0101 0101 0101 0101 0101   ; Simd Lane[16] literal
000232d: 1a                                        ; drop
000232e: 0b                                        ; end
00022f5: 39                                        ; FIXUP func body size
; function body 197
000232f: 00                                        ; func body size (guess)
0002330: 00                                        ; local decl count
0002331: 41                                        ; i32.const
0002332: 01                                        ; i32 literal
0002333: fd                                        ; prefix
0002334: 04                                        ; i8x16.splat
0002335: 1a                                        ; drop
0002336: 0b                                        ; end
000232f: 07                                        ; FIXUP func body size
; function body 198
0002337: 00                                        ; func body size (guess)
0002338: 00                                        ; local decl count
0002339: fd                                        ; prefix
000233a: 02                                        ; v128.const
000233b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000234b: fd                                        ; prefix
000234c: 05                                        ; i8x16.extract_lane_s
000234d: 0f                                        ; Simd Lane literal
000234e: 1a                                        ; drop
000234f: 0b                                        ; end
0002337: 18                                        ; FIXUP func body size
; function body 199
0002350: 00                                        ; func body size (guess)
0002351: 00                                        ; local decl count
0002352: fd                                        ; prefix
0002353: 02                                        ; v128.const
0002354: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002364: fd                                        ; prefix
0002365: 06                                        ; i8x16.extract_lane_u
0002366: 0f                                        ; Simd Lane literal
0002367: 1a                                        ; drop
0002368: 0b                                        ; end
0002350: 18                                        ; FIXUP func body size
; function body 200
0002369: 00                                        ; func body size (guess)
000236a: 00                                        ; local decl count
000236b: fd                                        ; prefix
000236c: 02                                        ; v128.const
000236d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000237d: 41                                        ; i32.const
000237e: 00                                        ; i32 literal
000237f: fd                                        ; prefix
0002380: 07                                        ; i8x16.replace_lane
0002381: 0f                                        ; Simd Lane literal
0002382: 1a                                        ; drop
0002383: 0b                                        ; end
0002369: 1a                                        ; FIXUP func body size
; function body 201
0002384: 00                                        ; func body size (guess)
0002385: 00                                        ; local decl count
0002386: 41                                        ; i32.const
0002387: 01                                        ; i32 literal
0002388: fd                                        ; prefix
0002389: 08                                        ; i16x8.splat
000238a: 1a                                        ; drop
000238b: 0b                                        ; end
0002384: 07                                        ; FIXUP func body size
; function body 202
000238c: 00                                        ; func body size (guess)
000238d: 00                                        ; local decl count
000238e: fd                                        ; prefix
000238f: 02                                        ; v128.const
0002390: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00023a0: fd                                        ; prefix
00023a1: 09                                        ; i16x8.extract_lane_s
00023a2: 07                                        ; Simd Lane literal
00023a3: 1a                                        ; drop
00023a4: 0b                                        ; end
000238c: 18                                        ; FIXUP func body size
; function body 203
00023a5: 00                                        ; func body size (guess)
00023a6: 00                                        ; local decl count
00023a7: fd                                        ; prefix
00023a8: 02                                        ; v128.const
00023a9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00023b9: fd                                        ; prefix
00023ba: 0a                                        ; i16x8.extract_lane_u
00023bb: 07                                        ; Simd Lane literal
00023bc: 1a                                        ; drop
00023bd: 0b                                        ; end
00023a5: 18                                        ; FIXUP func body size
; function body 204
00023be: 00                                        ; func body size (guess)
00023bf: 00                                        ; local decl count
00023c0: fd                                        ; prefix
00023c1: 02                                        ; v128.const
00023c2: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00023d2: 41                                        ; i32.const
00023d3: 00                                        ; i32 literal
00023d4: fd                                        ; prefix
00023d5: 0b                                        ; i16x8.replace_lane
00023d6: 07                                        ; Simd Lane literal
00023d7: 1a                                        ; drop
00023d8: 0b                                        ; end
00023be: 1a                                        ; FIXUP func body size
; function body 205
00023d9: 00                                        ; func body size (guess)
00023da: 00                                        ; local decl count
00023db: 41                                        ; i32.const
00023dc: 01                                        ; i32 literal
00023dd: fd                                        ; prefix
00023de: 0c                                        ; i32x4.splat
00023df: 1a                                        ; drop
00023e0: 0b                                        ; end
00023d9: 07                                        ; FIXUP func body size
; function body 206
00023e1: 00                                        ; func body size (guess)
00023e2: 00                                        ; local decl count
00023e3: fd                                        ; prefix
00023e4: 02                                        ; v128.const
00023e5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00023f5: fd                                        ; prefix
00023f6: 0d                                        ; i32x4.extract_lane
00023f7: 03                                        ; Simd Lane literal
00023f8: 1a                                        ; drop
00023f9: 0b                                        ; end
00023e1: 18                                        ; FIXUP func body size
; function body 207
00023fa: 00                                        ; func body size (guess)
00023fb: 00                                        ; local decl count
00023fc: fd                                        ; prefix
00023fd: 02                                        ; v128.const
00023fe: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000240e: 41                                        ; i32.const
000240f: 00                                        ; i32 literal
0002410: fd                                        ; prefix
0002411: 0e                                        ; i32x4.replace_lane
0002412: 03                                        ; Simd Lane literal
0002413: 1a                                        ; drop
0002414: 0b                                        ; end
00023fa: 1a                                        ; FIXUP func body size
; function body 208
0002415: 00                                        ; func body size (guess)
0002416: 00                                        ; local decl count
0002417: 42                                        ; i64.const
0002418: 01                                        ; i64 literal
0002419: fd                                        ; prefix
000241a: 0f                                        ; i64x2.splat
000241b: 1a                                        ; drop
000241c: 0b                                        ; end
0002415: 07                                        ; FIXUP func body size
; function body 209
000241d: 00                                        ; func body size (guess)
000241e: 00                                        ; local decl count
000241f: fd                                        ; prefix
0002420: 02                                        ; v128.const
0002421: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002431: fd                                        ; prefix
0002432: 10                                        ; i64x2.extract_lane
0002433: 01                                        ; Simd Lane literal
0002434: 1a                                        ; drop
0002435: 0b                                        ; end
000241d: 18                                        ; FIXUP func body size
; function body 210
0002436: 00                                        ; func body size (guess)
0002437: 00                                        ; local decl count
0002438: fd                                        ; prefix
0002439: 02                                        ; v128.const
000243a: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000244a: 42                                        ; i64.const
000244b: 00                                        ; i64 literal
000244c: fd                                        ; prefix
000244d: 11                                        ; i64x2.replace_lane
000244e: 01                                        ; Simd Lane literal
000244f: 1a                                        ; drop
0002450: 0b                                        ; end
0002436: 1a                                        ; FIXUP func body size
; function body 211
0002451: 00                                        ; func body size (guess)
0002452: 00                                        ; local decl count
0002453: 43                                        ; f32.const
0002454: 0000 803f                                 ; f32 literal
0002458: fd                                        ; prefix
0002459: 12                                        ; f32x4.splat
000245a: 1a                                        ; drop
000245b: 0b                                        ; end
0002451: 0a                                        ; FIXUP func body size
; function body 212
000245c: 00                                        ; func body size (guess)
000245d: 00                                        ; local decl count
000245e: fd                                        ; prefix
000245f: 02                                        ; v128.const
0002460: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002470: fd                                        ; prefix
0002471: 13                                        ; f32x4.extract_lane
0002472: 03                                        ; Simd Lane literal
0002473: 1a                                        ; drop
0002474: 0b                                        ; end
000245c: 18                                        ; FIXUP func body size
; function body 213
0002475: 00                                        ; func body size (guess)
0002476: 00                                        ; local decl count
0002477: fd                                        ; prefix
0002478: 02                                        ; v128.const
0002479: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002489: 43                                        ; f32.const
000248a: 0000 0000                                 ; f32 literal
000248e: fd                                        ; prefix
000248f: 14                                        ; f32x4.replace_lane
0002490: 03                                        ; Simd Lane literal
0002491: 1a                                        ; drop
0002492: 0b                                        ; end
0002475: 1d                                        ; FIXUP func body size
; function body 214
0002493: 00                                        ; func body size (guess)
0002494: 00                                        ; local decl count
0002495: 44                                        ; f64.const
0002496: 0000 0000 0000 f03f                       ; f64 literal
000249e: fd                                        ; prefix
000249f: 15                                        ; f64x2.splat
00024a0: 1a                                        ; drop
00024a1: 0b                                        ; end
0002493: 0e                                        ; FIXUP func body size
; function body 215
00024a2: 00                                        ; func body size (guess)
00024a3: 00                                        ; local decl count
00024a4: fd                                        ; prefix
00024a5: 02                                        ; v128.const
00024a6: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00024b6: fd                                        ; prefix
00024b7: 16                                        ; f64x2.extract_lane
00024b8: 01                                        ; Simd Lane literal
00024b9: 1a                                        ; drop
00024ba: 0b                                        ; end
00024a2: 18                                        ; FIXUP func body size
; function body 216
00024bb: 00                                        ; func body size (guess)
00024bc: 00                                        ; local decl count
00024bd: fd                                        ; prefix
00024be: 02                                        ; v128.const
00024bf: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00024cf: 44                                        ; f64.const
00024d0: 0000 0000 0000 0000                       ; f64 literal
00024d8: fd                                        ; prefix
00024d9: 17                                        ; f64x2.replace_lane
00024da: 01                                        ; Simd Lane literal
00024db: 1a                                        ; drop
00024dc: 0b                                        ; end
00024bb: 21                                        ; FIXUP func body size
; function body 217
00024dd: 00                                        ; func body size (guess)
00024de: 00                                        ; local decl count
00024df: fd                                        ; prefix
00024e0: 02                                        ; v128.const
00024e1: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00024f1: fd                                        ; prefix
00024f2: 02                                        ; v128.const
00024f3: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002503: fd                                        ; prefix
0002504: 18                                        ; i8x16.eq
0002505: 1a                                        ; drop
0002506: 0b                                        ; end
00024dd: 29                                        ; FIXUP func body size
; function body 218
0002507: 00                                        ; func body size (guess)
0002508: 00                                        ; local decl count
0002509: fd                                        ; prefix
000250a: 02                                        ; v128.const
000250b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000251b: fd                                        ; prefix
000251c: 02                                        ; v128.const
000251d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000252d: fd                                        ; prefix
000252e: 19                                        ; i8x16.ne
000252f: 1a                                        ; drop
0002530: 0b                                        ; end
0002507: 29                                        ; FIXUP func body size
; function body 219
0002531: 00                                        ; func body size (guess)
0002532: 00                                        ; local decl count
0002533: fd                                        ; prefix
0002534: 02                                        ; v128.const
0002535: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002545: fd                                        ; prefix
0002546: 02                                        ; v128.const
0002547: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002557: fd                                        ; prefix
0002558: 1a                                        ; i8x16.lt_s
0002559: 1a                                        ; drop
000255a: 0b                                        ; end
0002531: 29                                        ; FIXUP func body size
; function body 220
000255b: 00                                        ; func body size (guess)
000255c: 00                                        ; local decl count
000255d: fd                                        ; prefix
000255e: 02                                        ; v128.const
000255f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000256f: fd                                        ; prefix
0002570: 02                                        ; v128.const
0002571: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002581: fd                                        ; prefix
0002582: 1b                                        ; i8x16.lt_u
0002583: 1a                                        ; drop
0002584: 0b                                        ; end
000255b: 29                                        ; FIXUP func body size
; function body 221
0002585: 00                                        ; func body size (guess)
0002586: 00                                        ; local decl count
0002587: fd                                        ; prefix
0002588: 02                                        ; v128.const
0002589: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002599: fd                                        ; prefix
000259a: 02                                        ; v128.const
000259b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00025ab: fd                                        ; prefix
00025ac: 1c                                        ; i8x16.gt_s
00025ad: 1a                                        ; drop
00025ae: 0b                                        ; end
0002585: 29                                        ; FIXUP func body size
; function body 222
00025af: 00                                        ; func body size (guess)
00025b0: 00                                        ; local decl count
00025b1: fd                                        ; prefix
00025b2: 02                                        ; v128.const
00025b3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00025c3: fd                                        ; prefix
00025c4: 02                                        ; v128.const
00025c5: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00025d5: fd                                        ; prefix
00025d6: 1d                                        ; i8x16.gt_u
00025d7: 1a                                        ; drop
00025d8: 0b                                        ; end
00025af: 29                                        ; FIXUP func body size
; function body 223
00025d9: 00                                        ; func body size (guess)
00025da: 00                                        ; local decl count
00025db: fd                                        ; prefix
00025dc: 02                                        ; v128.const
00025dd: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00025ed: fd                                        ; prefix
00025ee: 02                                        ; v128.const
00025ef: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00025ff: fd                                        ; prefix
0002600: 1e                                        ; i8x16.le_s
0002601: 1a                                        ; drop
0002602: 0b                                        ; end
00025d9: 29                                        ; FIXUP func body size
; function body 224
0002603: 00                                        ; func body size (guess)
0002604: 00                                        ; local decl count
0002605: fd                                        ; prefix
0002606: 02                                        ; v128.const
0002607: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002617: fd                                        ; prefix
0002618: 02                                        ; v128.const
0002619: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002629: fd                                        ; prefix
000262a: 1f                                        ; i8x16.le_u
000262b: 1a                                        ; drop
000262c: 0b                                        ; end
0002603: 29                                        ; FIXUP func body size
; function body 225
000262d: 00                                        ; func body size (guess)
000262e: 00                                        ; local decl count
000262f: fd                                        ; prefix
0002630: 02                                        ; v128.const
0002631: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002641: fd                                        ; prefix
0002642: 02                                        ; v128.const
0002643: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002653: fd                                        ; prefix
0002654: 20                                        ; i8x16.ge_s
0002655: 1a                                        ; drop
0002656: 0b                                        ; end
000262d: 29                                        ; FIXUP func body size
; function body 226
0002657: 00                                        ; func body size (guess)
0002658: 00                                        ; local decl count
0002659: fd                                        ; prefix
000265a: 02                                        ; v128.const
000265b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000266b: fd                                        ; prefix
000266c: 02                                        ; v128.const
000266d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000267d: fd                                        ; prefix
000267e: 21                                        ; i8x16.ge_u
000267f: 1a                                        ; drop
0002680: 0b                                        ; end
0002657: 29                                        ; FIXUP func body size
; function body 227
0002681: 00                                        ; func body size (guess)
0002682: 00                                        ; local decl count
0002683: fd                                        ; prefix
0002684: 02                                        ; v128.const
0002685: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002695: fd                                        ; prefix
0002696: 02                                        ; v128.const
0002697: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00026a7: fd                                        ; prefix
00026a8: 22                                        ; i16x8.eq
00026a9: 1a                                        ; drop
00026aa: 0b                                        ; end
0002681: 29                                        ; FIXUP func body size
; function body 228
00026ab: 00                                        ; func body size (guess)
00026ac: 00                                        ; local decl count
00026ad: fd                                        ; prefix
00026ae: 02                                        ; v128.const
00026af: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00026bf: fd                                        ; prefix
00026c0: 02                                        ; v128.const
00026c1: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00026d1: fd                                        ; prefix
00026d2: 23                                        ; i16x8.ne
00026d3: 1a                                        ; drop
00026d4: 0b                                        ; end
00026ab: 29                                        ; FIXUP func body size
; function body 229
00026d5: 00                                        ; func body size (guess)
00026d6: 00                                        ; local decl count
00026d7: fd                                        ; prefix
00026d8: 02                                        ; v128.const
00026d9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00026e9: fd                                        ; prefix
00026ea: 02                                        ; v128.const
00026eb: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00026fb: fd                                        ; prefix
00026fc: 24                                        ; i16x8.lt_s
00026fd: 1a                                        ; drop
00026fe: 0b                                        ; end
00026d5: 29                                        ; FIXUP func body size
; function body 230
00026ff: 00                                        ; func body size (guess)
0002700: 00                                        ; local decl count
0002701: fd                                        ; prefix
0002702: 02                                        ; v128.const
0002703: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002713: fd                                        ; prefix
0002714: 02                                        ; v128.const
0002715: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002725: fd                                        ; prefix
0002726: 25                                        ; i16x8.lt_u
0002727: 1a                                        ; drop
0002728: 0b                                        ; end
00026ff: 29                                        ; FIXUP func body size
; function body 231
0002729: 00                                        ; func body size (guess)
000272a: 00                                        ; local decl count
000272b: fd                                        ; prefix
000272c: 02                                        ; v128.const
000272d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000273d: fd                                        ; prefix
000273e: 02                                        ; v128.const
000273f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000274f: fd                                        ; prefix
0002750: 26                                        ; i16x8.gt_s
0002751: 1a                                        ; drop
0002752: 0b                                        ; end
0002729: 29                                        ; FIXUP func body size
; function body 232
0002753: 00                                        ; func body size (guess)
0002754: 00                                        ; local decl count
0002755: fd                                        ; prefix
0002756: 02                                        ; v128.const
0002757: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002767: fd                                        ; prefix
0002768: 02                                        ; v128.const
0002769: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002779: fd                                        ; prefix
000277a: 27                                        ; i16x8.gt_u
000277b: 1a                                        ; drop
000277c: 0b                                        ; end
0002753: 29                                        ; FIXUP func body size
; function body 233
000277d: 00                                        ; func body size (guess)
000277e: 00                                        ; local decl count
000277f: fd                                        ; prefix
0002780: 02                                        ; v128.const
0002781: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002791: fd                                        ; prefix
0002792: 02                                        ; v128.const
0002793: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00027a3: fd                                        ; prefix
00027a4: 28                                        ; i16x8.le_s
00027a5: 1a                                        ; drop
00027a6: 0b                                        ; end
000277d: 29                                        ; FIXUP func body size
; function body 234
00027a7: 00                                        ; func body size (guess)
00027a8: 00                                        ; local decl count
00027a9: fd                                        ; prefix
00027aa: 02                                        ; v128.const
00027ab: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00027bb: fd                                        ; prefix
00027bc: 02                                        ; v128.const
00027bd: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00027cd: fd                                        ; prefix
00027ce: 29                                        ; i16x8.le_u
00027cf: 1a                                        ; drop
00027d0: 0b                                        ; end
00027a7: 29                                        ; FIXUP func body size
; function body 235
00027d1: 00                                        ; func body size (guess)
00027d2: 00                                        ; local decl count
00027d3: fd                                        ; prefix
00027d4: 02                                        ; v128.const
00027d5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00027e5: fd                                        ; prefix
00027e6: 02                                        ; v128.const
00027e7: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00027f7: fd                                        ; prefix
00027f8: 2a                                        ; i16x8.ge_s
00027f9: 1a                                        ; drop
00027fa: 0b                                        ; end
00027d1: 29                                        ; FIXUP func body size
; function body 236
00027fb: 00                                        ; func body size (guess)
00027fc: 00                                        ; local decl count
00027fd: fd                                        ; prefix
00027fe: 02                                        ; v128.const
00027ff: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000280f: fd                                        ; prefix
0002810: 02                                        ; v128.const
0002811: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002821: fd                                        ; prefix
0002822: 2b                                        ; i16x8.ge_u
0002823: 1a                                        ; drop
0002824: 0b                                        ; end
00027fb: 29                                        ; FIXUP func body size
; function body 237
0002825: 00                                        ; func body size (guess)
0002826: 00                                        ; local decl count
0002827: fd                                        ; prefix
0002828: 02                                        ; v128.const
0002829: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002839: fd                                        ; prefix
000283a: 02                                        ; v128.const
000283b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000284b: fd                                        ; prefix
000284c: 2c                                        ; i32x4.eq
000284d: 1a                                        ; drop
000284e: 0b                                        ; end
0002825: 29                                        ; FIXUP func body size
; function body 238
000284f: 00                                        ; func body size (guess)
0002850: 00                                        ; local decl count
0002851: fd                                        ; prefix
0002852: 02                                        ; v128.const
0002853: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002863: fd                                        ; prefix
0002864: 02                                        ; v128.const
0002865: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002875: fd                                        ; prefix
0002876: 2d                                        ; i32x4.ne
0002877: 1a                                        ; drop
0002878: 0b                                        ; end
000284f: 29                                        ; FIXUP func body size
; function body 239
0002879: 00                                        ; func body size (guess)
000287a: 00                                        ; local decl count
000287b: fd                                        ; prefix
000287c: 02                                        ; v128.const
000287d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000288d: fd                                        ; prefix
000288e: 02                                        ; v128.const
000288f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000289f: fd                                        ; prefix
00028a0: 2e                                        ; i32x4.lt_s
00028a1: 1a                                        ; drop
00028a2: 0b                                        ; end
0002879: 29                                        ; FIXUP func body size
; function body 240
00028a3: 00                                        ; func body size (guess)
00028a4: 00                                        ; local decl count
00028a5: fd                                        ; prefix
00028a6: 02                                        ; v128.const
00028a7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00028b7: fd                                        ; prefix
00028b8: 02                                        ; v128.const
00028b9: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00028c9: fd                                        ; prefix
00028ca: 2f                                        ; i32x4.lt_u
00028cb: 1a                                        ; drop
00028cc: 0b                                        ; end
00028a3: 29                                        ; FIXUP func body size
; function body 241
00028cd: 00                                        ; func body size (guess)
00028ce: 00                                        ; local decl count
00028cf: fd                                        ; prefix
00028d0: 02                                        ; v128.const
00028d1: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00028e1: fd                                        ; prefix
00028e2: 02                                        ; v128.const
00028e3: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00028f3: fd                                        ; prefix
00028f4: 30                                        ; i32x4.gt_s
00028f5: 1a                                        ; drop
00028f6: 0b                                        ; end
00028cd: 29                                        ; FIXUP func body size
; function body 242
00028f7: 00                                        ; func body size (guess)
00028f8: 00                                        ; local decl count
00028f9: fd                                        ; prefix
00028fa: 02                                        ; v128.const
00028fb: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000290b: fd                                        ; prefix
000290c: 02                                        ; v128.const
000290d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000291d: fd                                        ; prefix
000291e: 31                                        ; i32x4.gt_u
000291f: 1a                                        ; drop
0002920: 0b                                        ; end
00028f7: 29                                        ; FIXUP func body size
; function body 243
0002921: 00                                        ; func body size (guess)
0002922: 00                                        ; local decl count
0002923: fd                                        ; prefix
0002924: 02                                        ; v128.const
0002925: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002935: fd                                        ; prefix
0002936: 02                                        ; v128.const
0002937: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002947: fd                                        ; prefix
0002948: 32                                        ; i32x4.le_s
0002949: 1a                                        ; drop
000294a: 0b                                        ; end
0002921: 29                                        ; FIXUP func body size
; function body 244
000294b: 00                                        ; func body size (guess)
000294c: 00                                        ; local decl count
000294d: fd                                        ; prefix
000294e: 02                                        ; v128.const
000294f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000295f: fd                                        ; prefix
0002960: 02                                        ; v128.const
0002961: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002971: fd                                        ; prefix
0002972: 33                                        ; i32x4.le_u
0002973: 1a                                        ; drop
0002974: 0b                                        ; end
000294b: 29                                        ; FIXUP func body size
; function body 245
0002975: 00                                        ; func body size (guess)
0002976: 00                                        ; local decl count
0002977: fd                                        ; prefix
0002978: 02                                        ; v128.const
0002979: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002989: fd                                        ; prefix
000298a: 02                                        ; v128.const
000298b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000299b: fd                                        ; prefix
000299c: 34                                        ; i32x4.ge_s
000299d: 1a                                        ; drop
000299e: 0b                                        ; end
0002975: 29                                        ; FIXUP func body size
; function body 246
000299f: 00                                        ; func body size (guess)
00029a0: 00                                        ; local decl count
00029a1: fd                                        ; prefix
00029a2: 02                                        ; v128.const
00029a3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00029b3: fd                                        ; prefix
00029b4: 02                                        ; v128.const
00029b5: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00029c5: fd                                        ; prefix
00029c6: 35                                        ; i32x4.ge_u
00029c7: 1a                                        ; drop
00029c8: 0b                                        ; end
000299f: 29                                        ; FIXUP func body size
; function body 247
00029c9: 00                                        ; func body size (guess)
00029ca: 00                                        ; local decl count
00029cb: fd                                        ; prefix
00029cc: 02                                        ; v128.const
00029cd: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00029dd: fd                                        ; prefix
00029de: 02                                        ; v128.const
00029df: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00029ef: fd                                        ; prefix
00029f0: 40                                        ; f32x4.eq
00029f1: 1a                                        ; drop
00029f2: 0b                                        ; end
00029c9: 29                                        ; FIXUP func body size
; function body 248
00029f3: 00                                        ; func body size (guess)
00029f4: 00                                        ; local decl count
00029f5: fd                                        ; prefix
00029f6: 02                                        ; v128.const
00029f7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002a07: fd                                        ; prefix
0002a08: 02                                        ; v128.const
0002a09: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002a19: fd                                        ; prefix
0002a1a: 41                                        ; f32x4.ne
0002a1b: 1a                                        ; drop
0002a1c: 0b                                        ; end
00029f3: 29                                        ; FIXUP func body size
; function body 249
0002a1d: 00                                        ; func body size (guess)
0002a1e: 00                                        ; local decl count
0002a1f: fd                                        ; prefix
0002a20: 02                                        ; v128.const
0002a21: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002a31: fd                                        ; prefix
0002a32: 02                                        ; v128.const
0002a33: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002a43: fd                                        ; prefix
0002a44: 42                                        ; f32x4.lt
0002a45: 1a                                        ; drop
0002a46: 0b                                        ; end
0002a1d: 29                                        ; FIXUP func body size
; function body 250
0002a47: 00                                        ; func body size (guess)
0002a48: 00                                        ; local decl count
0002a49: fd                                        ; prefix
0002a4a: 02                                        ; v128.const
0002a4b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002a5b: fd                                        ; prefix
0002a5c: 02                                        ; v128.const
0002a5d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002a6d: fd                                        ; prefix
0002a6e: 43                                        ; f32x4.gt
0002a6f: 1a                                        ; drop
0002a70: 0b                                        ; end
0002a47: 29                                        ; FIXUP func body size
; function body 251
0002a71: 00                                        ; func body size (guess)
0002a72: 00                                        ; local decl count
0002a73: fd                                        ; prefix
0002a74: 02                                        ; v128.const
0002a75: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002a85: fd                                        ; prefix
0002a86: 02                                        ; v128.const
0002a87: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002a97: fd                                        ; prefix
0002a98: 44                                        ; f32x4.le
0002a99: 1a                                        ; drop
0002a9a: 0b                                        ; end
0002a71: 29                                        ; FIXUP func body size
; function body 252
0002a9b: 00                                        ; func body size (guess)
0002a9c: 00                                        ; local decl count
0002a9d: fd                                        ; prefix
0002a9e: 02                                        ; v128.const
0002a9f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002aaf: fd                                        ; prefix
0002ab0: 02                                        ; v128.const
0002ab1: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002ac1: fd                                        ; prefix
0002ac2: 45                                        ; f32x4.ge
0002ac3: 1a                                        ; drop
0002ac4: 0b                                        ; end
0002a9b: 29                                        ; FIXUP func body size
; function body 253
0002ac5: 00                                        ; func body size (guess)
0002ac6: 00                                        ; local decl count
0002ac7: fd                                        ; prefix
0002ac8: 02                                        ; v128.const
0002ac9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ad9: fd                                        ; prefix
0002ada: 02                                        ; v128.const
0002adb: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002aeb: fd                                        ; prefix
0002aec: 46                                        ; f64x2.eq
0002aed: 1a                                        ; drop
0002aee: 0b                                        ; end
0002ac5: 29                                        ; FIXUP func body size
; function body 254
0002aef: 00                                        ; func body size (guess)
0002af0: 00                                        ; local decl count
0002af1: fd                                        ; prefix
0002af2: 02                                        ; v128.const
0002af3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002b03: fd                                        ; prefix
0002b04: 02                                        ; v128.const
0002b05: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002b15: fd                                        ; prefix
0002b16: 47                                        ; f64x2.ne
0002b17: 1a                                        ; drop
0002b18: 0b                                        ; end
0002aef: 29                                        ; FIXUP func body size
; function body 255
0002b19: 00                                        ; func body size (guess)
0002b1a: 00                                        ; local decl count
0002b1b: fd                                        ; prefix
0002b1c: 02                                        ; v128.const
0002b1d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002b2d: fd                                        ; prefix
0002b2e: 02                                        ; v128.const
0002b2f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002b3f: fd                                        ; prefix
0002b40: 48                                        ; f64x2.lt
0002b41: 1a                                        ; drop
0002b42: 0b                                        ; end
0002b19: 29                                        ; FIXUP func body size
; function body 256
0002b43: 00                                        ; func body size (guess)
0002b44: 00                                        ; local decl count
0002b45: fd                                        ; prefix
0002b46: 02                                        ; v128.const
0002b47: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002b57: fd                                        ; prefix
0002b58: 02                                        ; v128.const
0002b59: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002b69: fd                                        ; prefix
0002b6a: 49                                        ; f64x2.gt
0002b6b: 1a                                        ; drop
0002b6c: 0b                                        ; end
0002b43: 29                                        ; FIXUP func body size
; function body 257
0002b6d: 00                                        ; func body size (guess)
0002b6e: 00                                        ; local decl count
0002b6f: fd                                        ; prefix
0002b70: 02                                        ; v128.const
0002b71: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002b81: fd                                        ; prefix
0002b82: 02                                        ; v128.const
0002b83: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002b93: fd                                        ; prefix
0002b94: 4a                                        ; f64x2.le
0002b95: 1a                                        ; drop
0002b96: 0b                                        ; end
0002b6d: 29                                        ; FIXUP func body size
; function body 258
0002b97: 00                                        ; func body size (guess)
0002b98: 00                                        ; local decl count
0002b99: fd                                        ; prefix
0002b9a: 02                                        ; v128.const
0002b9b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002bab: fd                                        ; prefix
0002bac: 02                                        ; v128.const
0002bad: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002bbd: fd                                        ; prefix
0002bbe: 4b                                        ; f64x2.ge
0002bbf: 1a                                        ; drop
0002bc0: 0b                                        ; end
0002b97: 29                                        ; FIXUP func body size
; function body 259
0002bc1: 00                                        ; func body size (guess)
0002bc2: 00                                        ; local decl count
0002bc3: fd                                        ; prefix
0002bc4: 02                                        ; v128.const
0002bc5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002bd5: fd                                        ; prefix
0002bd6: 4c                                        ; v128.not
0002bd7: 1a                                        ; drop
0002bd8: 0b                                        ; end
0002bc1: 17                                        ; FIXUP func body size
; function body 260
0002bd9: 00                                        ; func body size (guess)
0002bda: 00                                        ; local decl count
0002bdb: fd                                        ; prefix
0002bdc: 02                                        ; v128.const
0002bdd: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002bed: fd                                        ; prefix
0002bee: 02                                        ; v128.const
0002bef: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002bff: fd                                        ; prefix
0002c00: 4d                                        ; v128.and
0002c01: 1a                                        ; drop
0002c02: 0b                                        ; end
0002bd9: 29                                        ; FIXUP func body size
; function body 261
0002c03: 00                                        ; func body size (guess)
0002c04: 00                                        ; local decl count
0002c05: fd                                        ; prefix
0002c06: 02                                        ; v128.const
0002c07: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c17: fd                                        ; prefix
0002c18: 02                                        ; v128.const
0002c19: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002c29: fd                                        ; prefix
0002c2a: 4e                                        ; v128.or
0002c2b: 1a                                        ; drop
0002c2c: 0b                                        ; end
0002c03: 29                                        ; FIXUP func body size
; function body 262
0002c2d: 00                                        ; func body size (guess)
0002c2e: 00                                        ; local decl count
0002c2f: fd                                        ; prefix
0002c30: 02                                        ; v128.const
0002c31: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c41: fd                                        ; prefix
0002c42: 02                                        ; v128.const
0002c43: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002c53: fd                                        ; prefix
0002c54: 4f                                        ; v128.xor
0002c55: 1a                                        ; drop
0002c56: 0b                                        ; end
0002c2d: 29                                        ; FIXUP func body size
; function body 263
0002c57: 00                                        ; func body size (guess)
0002c58: 00                                        ; local decl count
0002c59: fd                                        ; prefix
0002c5a: 02                                        ; v128.const
0002c5b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c6b: fd                                        ; prefix
0002c6c: 02                                        ; v128.const
0002c6d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002c7d: fd                                        ; prefix
0002c7e: 02                                        ; v128.const
0002c7f: 0300 0000 0300 0000 0300 0000 0300 0000   ; v128 literal
0002c8f: fd                                        ; prefix
0002c90: 50                                        ; v128.bitselect
0002c91: 1a                                        ; drop
0002c92: 0b                                        ; end
0002c57: 3b                                        ; FIXUP func body size
; function body 264
0002c93: 00                                        ; func body size (guess)
0002c94: 00                                        ; local decl count
0002c95: fd                                        ; prefix
0002c96: 02                                        ; v128.const
0002c97: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ca7: fd                                        ; prefix
0002ca8: 51                                        ; i8x16.neg
0002ca9: 1a                                        ; drop
0002caa: 0b                                        ; end
0002c93: 17                                        ; FIXUP func body size
; function body 265
0002cab: 00                                        ; func body size (guess)
0002cac: 00                                        ; local decl count
0002cad: fd                                        ; prefix
0002cae: 02                                        ; v128.const
0002caf: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002cbf: fd                                        ; prefix
0002cc0: 52                                        ; i8x16.any_true
0002cc1: 1a                                        ; drop
0002cc2: 0b                                        ; end
0002cab: 17                                        ; FIXUP func body size
; function body 266
0002cc3: 00                                        ; func body size (guess)
0002cc4: 00                                        ; local decl count
0002cc5: fd                                        ; prefix
0002cc6: 02                                        ; v128.const
0002cc7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002cd7: fd                                        ; prefix
0002cd8: 53                                        ; i8x16.all_true
0002cd9: 1a                                        ; drop
0002cda: 0b                                        ; end
0002cc3: 17                                        ; FIXUP func body size
; function body 267
0002cdb: 00                                        ; func body size (guess)
0002cdc: 00                                        ; local decl count
0002cdd: fd                                        ; prefix
0002cde: 02                                        ; v128.const
0002cdf: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002cef: 41                                        ; i32.const
0002cf0: 00                                        ; i32 literal
0002cf1: fd                                        ; prefix
0002cf2: 54                                        ; i8x16.shl
0002cf3: 1a                                        ; drop
0002cf4: 0b                                        ; end
0002cdb: 19                                        ; FIXUP func body size
; function body 268
0002cf5: 00                                        ; func body size (guess)
0002cf6: 00                                        ; local decl count
0002cf7: fd                                        ; prefix
0002cf8: 02                                        ; v128.const
0002cf9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d09: 41                                        ; i32.const
0002d0a: 00                                        ; i32 literal
0002d0b: fd                                        ; prefix
0002d0c: 55                                        ; i8x16.shr_s
0002d0d: 1a                                        ; drop
0002d0e: 0b                                        ; end
0002cf5: 19                                        ; FIXUP func body size
; function body 269
0002d0f: 00                                        ; func body size (guess)
0002d10: 00                                        ; local decl count
0002d11: fd                                        ; prefix
0002d12: 02                                        ; v128.const
0002d13: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d23: 41                                        ; i32.const
0002d24: 00                                        ; i32 literal
0002d25: fd                                        ; prefix
0002d26: 56                                        ; i8x16.shr_u
0002d27: 1a                                        ; drop
0002d28: 0b                                        ; end
0002d0f: 19                                        ; FIXUP func body size
; function body 270
0002d29: 00                                        ; func body size (guess)
0002d2a: 00                                        ; local decl count
0002d2b: fd                                        ; prefix
0002d2c: 02                                        ; v128.const
0002d2d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d3d: fd                                        ; prefix
0002d3e: 02                                        ; v128.const
0002d3f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002d4f: fd                                        ; prefix
0002d50: 57                                        ; i8x16.add
0002d51: 1a                                        ; drop
0002d52: 0b                                        ; end
0002d29: 29                                        ; FIXUP func body size
; function body 271
0002d53: 00                                        ; func body size (guess)
0002d54: 00                                        ; local decl count
0002d55: fd                                        ; prefix
0002d56: 02                                        ; v128.const
0002d57: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d67: fd                                        ; prefix
0002d68: 02                                        ; v128.const
0002d69: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002d79: fd                                        ; prefix
0002d7a: 58                                        ; i8x16.add_saturate_s
0002d7b: 1a                                        ; drop
0002d7c: 0b                                        ; end
0002d53: 29                                        ; FIXUP func body size
; function body 272
0002d7d: 00                                        ; func body size (guess)
0002d7e: 00                                        ; local decl count
0002d7f: fd                                        ; prefix
0002d80: 02                                        ; v128.const
0002d81: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d91: fd                                        ; prefix
0002d92: 02                                        ; v128.const
0002d93: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002da3: fd                                        ; prefix
0002da4: 59                                        ; i8x16.add_saturate_u
0002da5: 1a                                        ; drop
0002da6: 0b                                        ; end
0002d7d: 29                                        ; FIXUP func body size
; function body 273
0002da7: 00                                        ; func body size (guess)
0002da8: 00                                        ; local decl count
0002da9: fd                                        ; prefix
0002daa: 02                                        ; v128.const
0002dab: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002dbb: fd                                        ; prefix
0002dbc: 02                                        ; v128.const
0002dbd: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002dcd: fd                                        ; prefix
0002dce: 5a                                        ; i8x16.sub
0002dcf: 1a                                        ; drop
0002dd0: 0b                                        ; end
0002da7: 29                                        ; FIXUP func body size
; function body 274
0002dd1: 00                                        ; func body size (guess)
0002dd2: 00                                        ; local decl count
0002dd3: fd                                        ; prefix
0002dd4: 02                                        ; v128.const
0002dd5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002de5: fd                                        ; prefix
0002de6: 02                                        ; v128.const
0002de7: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002df7: fd                                        ; prefix
0002df8: 5b                                        ; i8x16.sub_saturate_s
0002df9: 1a                                        ; drop
0002dfa: 0b                                        ; end
0002dd1: 29                                        ; FIXUP func body size
; function body 275
0002dfb: 00                                        ; func body size (guess)
0002dfc: 00                                        ; local decl count
0002dfd: fd                                        ; prefix
0002dfe: 02                                        ; v128.const
0002dff: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e0f: fd                                        ; prefix
0002e10: 02                                        ; v128.const
0002e11: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002e21: fd                                        ; prefix
0002e22: 5c                                        ; i8x16.sub_saturate_u
0002e23: 1a                                        ; drop
0002e24: 0b                                        ; end
0002dfb: 29                                        ; FIXUP func body size
; function body 276
0002e25: 00                                        ; func body size (guess)
0002e26: 00                                        ; local decl count
0002e27: fd                                        ; prefix
0002e28: 02                                        ; v128.const
0002e29: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e39: fd                                        ; prefix
0002e3a: 02                                        ; v128.const
0002e3b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002e4b: fd                                        ; prefix
0002e4c: 5d                                        ; i8x16.mul
0002e4d: 1a                                        ; drop
0002e4e: 0b                                        ; end
0002e25: 29                                        ; FIXUP func body size
; function body 277
0002e4f: 00                                        ; func body size (guess)
0002e50: 00                                        ; local decl count
0002e51: fd                                        ; prefix
0002e52: 02                                        ; v128.const
0002e53: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e63: fd                                        ; prefix
0002e64: 62                                        ; i16x8.neg
0002e65: 1a                                        ; drop
0002e66: 0b                                        ; end
0002e4f: 17                                        ; FIXUP func body size
; function body 278
0002e67: 00                                        ; func body size (guess)
0002e68: 00                                        ; local decl count
0002e69: fd                                        ; prefix
0002e6a: 02                                        ; v128.const
0002e6b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e7b: fd                                        ; prefix
0002e7c: 63                                        ; i16x8.any_true
0002e7d: 1a                                        ; drop
0002e7e: 0b                                        ; end
0002e67: 17                                        ; FIXUP func body size
; function body 279
0002e7f: 00                                        ; func body size (guess)
0002e80: 00                                        ; local decl count
0002e81: fd                                        ; prefix
0002e82: 02                                        ; v128.const
0002e83: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e93: fd                                        ; prefix
0002e94: 64                                        ; i16x8.all_true
0002e95: 1a                                        ; drop
0002e96: 0b                                        ; end
0002e7f: 17                                        ; FIXUP func body size
; function body 280
0002e97: 00                                        ; func body size (guess)
0002e98: 00                                        ; local decl count
0002e99: fd                                        ; prefix
0002e9a: 02                                        ; v128.const
0002e9b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002eab: 41                                        ; i32.const
0002eac: 00                                        ; i32 literal
0002ead: fd                                        ; prefix
0002eae: 65                                        ; i16x8.shl
0002eaf: 1a                                        ; drop
0002eb0: 0b                                        ; end
0002e97: 19                                        ; FIXUP func body size
; function body 281
0002eb1: 00                                        ; func body size (guess)
0002eb2: 00                                        ; local decl count
0002eb3: fd                                        ; prefix
0002eb4: 02                                        ; v128.const
0002eb5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ec5: 41                                        ; i32.const
0002ec6: 00                                        ; i32 literal
0002ec7: fd                                        ; prefix
0002ec8: 66                                        ; i16x8.shr_s
0002ec9: 1a                                        ; drop
0002eca: 0b                                        ; end
0002eb1: 19                                        ; FIXUP func body size
; function body 282
0002ecb: 00                                        ; func body size (guess)
0002ecc: 00                                        ; local decl count
0002ecd: fd                                        ; prefix
0002ece: 02                                        ; v128.const
0002ecf: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002edf: 41                                        ; i32.const
0002ee0: 00                                        ; i32 literal
0002ee1: fd                                        ; prefix
0002ee2: 67                                        ; i16x8.shr_u
0002ee3: 1a                                        ; drop
0002ee4: 0b                                        ; end
0002ecb: 19                                        ; FIXUP func body size
; function body 283
0002ee5: 00                                        ; func body size (guess)
0002ee6: 00                                        ; local decl count
0002ee7: fd                                        ; prefix
0002ee8: 02                                        ; v128.const
0002ee9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ef9: fd                                        ; prefix
0002efa: 02                                        ; v128.const
0002efb: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002f0b: fd                                        ; prefix
0002f0c: 68                                        ; i16x8.add
0002f0d: 1a                                        ; drop
0002f0e: 0b                                        ; end
0002ee5: 29                                        ; FIXUP func body size
; function body 284
0002f0f: 00                                        ; func body size (guess)
0002f10: 00                                        ; local decl count
0002f11: fd                                        ; prefix
0002f12: 02                                        ; v128.const
0002f13: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002f23: fd                                        ; prefix
0002f24: 02                                        ; v128.const
0002f25: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002f35: fd                                        ; prefix
0002f36: 69                                        ; i16x8.add_saturate_s
0002f37: 1a                                        ; drop
0002f38: 0b                                        ; end
0002f0f: 29                                        ; FIXUP func body size
; function body 285
0002f39: 00                                        ; func body size (guess)
0002f3a: 00                                        ; local decl count
0002f3b: fd                                        ; prefix
0002f3c: 02                                        ; v128.const
0002f3d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002f4d: fd                                        ; prefix
0002f4e: 02                                        ; v128.const
0002f4f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002f5f: fd                                        ; prefix
0002f60: 6a                                        ; i16x8.add_saturate_u
0002f61: 1a                                        ; drop
0002f62: 0b                                        ; end
0002f39: 29                                        ; FIXUP func body size
; function body 286
0002f63: 00                                        ; func body size (guess)
0002f64: 00                                        ; local decl count
0002f65: fd                                        ; prefix
0002f66: 02                                        ; v128.const
0002f67: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002f77: fd                                        ; prefix
0002f78: 02                                        ; v128.const
0002f79: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002f89: fd                                        ; prefix
0002f8a: 6b                                        ; i16x8.sub
0002f8b: 1a                                        ; drop
0002f8c: 0b                                        ; end
0002f63: 29                                        ; FIXUP func body size
; function body 287
0002f8d: 00                                        ; func body size (guess)
0002f8e: 00                                        ; local decl count
0002f8f: fd                                        ; prefix
0002f90: 02                                        ; v128.const
0002f91: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002fa1: fd                                        ; prefix
0002fa2: 02                                        ; v128.const
0002fa3: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002fb3: fd                                        ; prefix
0002fb4: 6c                                        ; i16x8.sub_saturate_s
0002fb5: 1a                                        ; drop
0002fb6: 0b                                        ; end
0002f8d: 29                                        ; FIXUP func body size
; function body 288
0002fb7: 00                                        ; func body size (guess)
0002fb8: 00                                        ; local decl count
0002fb9: fd                                        ; prefix
0002fba: 02                                        ; v128.const
0002fbb: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002fcb: fd                                        ; prefix
0002fcc: 02                                        ; v128.const
0002fcd: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002fdd: fd                                        ; prefix
0002fde: 6d                                        ; i16x8.sub_saturate_u
0002fdf: 1a                                        ; drop
0002fe0: 0b                                        ; end
0002fb7: 29                                        ; FIXUP func body size
; function body 289
0002fe1: 00                                        ; func body size (guess)
0002fe2: 00                                        ; local decl count
0002fe3: fd                                        ; prefix
0002fe4: 02                                        ; v128.const
0002fe5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ff5: fd                                        ; prefix
0002ff6: 02                                        ; v128.const
0002ff7: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003007: fd                                        ; prefix
0003008: 6e                                        ; i16x8.mul
0003009: 1a                                        ; drop
000300a: 0b                                        ; end
0002fe1: 29                                        ; FIXUP func body size
; function body 290
000300b: 00                                        ; func body size (guess)
000300c: 00                                        ; local decl count
000300d: fd                                        ; prefix
000300e: 02                                        ; v128.const
000300f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000301f: fd                                        ; prefix
0003020: 73                                        ; i32x4.neg
0003021: 1a                                        ; drop
0003022: 0b                                        ; end
000300b: 17                                        ; FIXUP func body size
; function body 291
0003023: 00                                        ; func body size (guess)
0003024: 00                                        ; local decl count
0003025: fd                                        ; prefix
0003026: 02                                        ; v128.const
0003027: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003037: fd                                        ; prefix
0003038: 74                                        ; i32x4.any_true
0003039: 1a                                        ; drop
000303a: 0b                                        ; end
0003023: 17                                        ; FIXUP func body size
; function body 292
000303b: 00                                        ; func body size (guess)
000303c: 00                                        ; local decl count
000303d: fd                                        ; prefix
000303e: 02                                        ; v128.const
000303f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000304f: fd                                        ; prefix
0003050: 75                                        ; i32x4.all_true
0003051: 1a                                        ; drop
0003052: 0b                                        ; end
000303b: 17                                        ; FIXUP func body size
; function body 293
0003053: 00                                        ; func body size (guess)
0003054: 00                                        ; local decl count
0003055: fd                                        ; prefix
0003056: 02                                        ; v128.const
0003057: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003067: 41                                        ; i32.const
0003068: 00                                        ; i32 literal
0003069: fd                                        ; prefix
000306a: 76                                        ; i32x4.shl
000306b: 1a                                        ; drop
000306c: 0b                                        ; end
0003053: 19                                        ; FIXUP func body size
; function body 294
000306d: 00                                        ; func body size (guess)
000306e: 00                                        ; local decl count
000306f: fd                                        ; prefix
0003070: 02                                        ; v128.const
0003071: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003081: 41                                        ; i32.const
0003082: 00                                        ; i32 literal
0003083: fd                                        ; prefix
0003084: 77                                        ; i32x4.shr_s
0003085: 1a                                        ; drop
0003086: 0b                                        ; end
000306d: 19                                        ; FIXUP func body size
; function body 295
0003087: 00                                        ; func body size (guess)
0003088: 00                                        ; local decl count
0003089: fd                                        ; prefix
000308a: 02                                        ; v128.const
000308b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000309b: 41                                        ; i32.const
000309c: 00                                        ; i32 literal
000309d: fd                                        ; prefix
000309e: 78                                        ; i32x4.shr_u
000309f: 1a                                        ; drop
00030a0: 0b                                        ; end
0003087: 19                                        ; FIXUP func body size
; function body 296
00030a1: 00                                        ; func body size (guess)
00030a2: 00                                        ; local decl count
00030a3: fd                                        ; prefix
00030a4: 02                                        ; v128.const
00030a5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00030b5: fd                                        ; prefix
00030b6: 02                                        ; v128.const
00030b7: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00030c7: fd                                        ; prefix
00030c8: 79                                        ; i32x4.add
00030c9: 1a                                        ; drop
00030ca: 0b                                        ; end
00030a1: 29                                        ; FIXUP func body size
; function body 297
00030cb: 00                                        ; func body size (guess)
00030cc: 00                                        ; local decl count
00030cd: fd                                        ; prefix
00030ce: 02                                        ; v128.const
00030cf: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00030df: fd                                        ; prefix
00030e0: 02                                        ; v128.const
00030e1: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00030f1: fd                                        ; prefix
00030f2: 7c                                        ; i32x4.sub
00030f3: 1a                                        ; drop
00030f4: 0b                                        ; end
00030cb: 29                                        ; FIXUP func body size
; function body 298
00030f5: 00                                        ; func body size (guess)
00030f6: 00                                        ; local decl count
00030f7: fd                                        ; prefix
00030f8: 02                                        ; v128.const
00030f9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003109: fd                                        ; prefix
000310a: 02                                        ; v128.const
000310b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000311b: fd                                        ; prefix
000311c: 7f                                        ; i32x4.mul
000311d: 1a                                        ; drop
000311e: 0b                                        ; end
00030f5: 29                                        ; FIXUP func body size
; function body 299
000311f: 00                                        ; func body size (guess)
0003120: 00                                        ; local decl count
0003121: fd                                        ; prefix
0003122: 02                                        ; v128.const
0003123: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003133: fd                                        ; prefix
0003134: 8401                                      ; i64x2.neg
0003136: 1a                                        ; drop
0003137: 0b                                        ; end
000311f: 18                                        ; FIXUP func body size
; function body 300
0003138: 00                                        ; func body size (guess)
0003139: 00                                        ; local decl count
000313a: fd                                        ; prefix
000313b: 02                                        ; v128.const
000313c: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000314c: fd                                        ; prefix
000314d: 8501                                      ; i64x2.any_true
000314f: 1a                                        ; drop
0003150: 0b                                        ; end
0003138: 18                                        ; FIXUP func body size
; function body 301
0003151: 00                                        ; func body size (guess)
0003152: 00                                        ; local decl count
0003153: fd                                        ; prefix
0003154: 02                                        ; v128.const
0003155: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003165: fd                                        ; prefix
0003166: 8601                                      ; i64x2.all_true
0003168: 1a                                        ; drop
0003169: 0b                                        ; end
0003151: 18                                        ; FIXUP func body size
; function body 302
000316a: 00                                        ; func body size (guess)
000316b: 00                                        ; local decl count
000316c: fd                                        ; prefix
000316d: 02                                        ; v128.const
000316e: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000317e: 41                                        ; i32.const
000317f: 00                                        ; i32 literal
0003180: fd                                        ; prefix
0003181: 8701                                      ; i64x2.shl
0003183: 1a                                        ; drop
0003184: 0b                                        ; end
000316a: 1a                                        ; FIXUP func body size
; function body 303
0003185: 00                                        ; func body size (guess)
0003186: 00                                        ; local decl count
0003187: fd                                        ; prefix
0003188: 02                                        ; v128.const
0003189: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003199: 41                                        ; i32.const
000319a: 00                                        ; i32 literal
000319b: fd                                        ; prefix
000319c: 8801                                      ; i64x2.shr_s
000319e: 1a                                        ; drop
000319f: 0b                                        ; end
0003185: 1a                                        ; FIXUP func body size
; function body 304
00031a0: 00                                        ; func body size (guess)
00031a1: 00                                        ; local decl count
00031a2: fd                                        ; prefix
00031a3: 02                                        ; v128.const
00031a4: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00031b4: 41                                        ; i32.const
00031b5: 00                                        ; i32 literal
00031b6: fd                                        ; prefix
00031b7: 8901                                      ; i64x2.shr_u
00031b9: 1a                                        ; drop
00031ba: 0b                                        ; end
00031a0: 1a                                        ; FIXUP func body size
; function body 305
00031bb: 00                                        ; func body size (guess)
00031bc: 00                                        ; local decl count
00031bd: fd                                        ; prefix
00031be: 02                                        ; v128.const
00031bf: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00031cf: fd                                        ; prefix
00031d0: 02                                        ; v128.const
00031d1: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00031e1: fd                                        ; prefix
00031e2: 8a01                                      ; i64x2.add
00031e4: 1a                                        ; drop
00031e5: 0b                                        ; end
00031bb: 2a                                        ; FIXUP func body size
; function body 306
00031e6: 00                                        ; func body size (guess)
00031e7: 00                                        ; local decl count
00031e8: fd                                        ; prefix
00031e9: 02                                        ; v128.const
00031ea: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00031fa: fd                                        ; prefix
00031fb: 02                                        ; v128.const
00031fc: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000320c: fd                                        ; prefix
000320d: 8d01                                      ; i64x2.sub
000320f: 1a                                        ; drop
0003210: 0b                                        ; end
00031e6: 2a                                        ; FIXUP func body size
; function body 307
0003211: 00                                        ; func body size (guess)
0003212: 00                                        ; local decl count
0003213: fd                                        ; prefix
0003214: 02                                        ; v128.const
0003215: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003225: fd                                        ; prefix
0003226: 9501                                      ; f32x4.abs
0003228: 1a                                        ; drop
0003229: 0b                                        ; end
0003211: 18                                        ; FIXUP func body size
; function body 308
000322a: 00                                        ; func body size (guess)
000322b: 00                                        ; local decl count
000322c: fd                                        ; prefix
000322d: 02                                        ; v128.const
000322e: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000323e: fd                                        ; prefix
000323f: 9601                                      ; f32x4.neg
0003241: 1a                                        ; drop
0003242: 0b                                        ; end
000322a: 18                                        ; FIXUP func body size
; function body 309
0003243: 00                                        ; func body size (guess)
0003244: 00                                        ; local decl count
0003245: fd                                        ; prefix
0003246: 02                                        ; v128.const
0003247: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003257: fd                                        ; prefix
0003258: 9701                                      ; f32x4.sqrt
000325a: 1a                                        ; drop
000325b: 0b                                        ; end
0003243: 18                                        ; FIXUP func body size
; function body 310
000325c: 00                                        ; func body size (guess)
000325d: 00                                        ; local decl count
000325e: fd                                        ; prefix
000325f: 02                                        ; v128.const
0003260: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003270: fd                                        ; prefix
0003271: 02                                        ; v128.const
0003272: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003282: fd                                        ; prefix
0003283: 9a01                                      ; f32x4.add
0003285: 1a                                        ; drop
0003286: 0b                                        ; end
000325c: 2a                                        ; FIXUP func body size
; function body 311
0003287: 00                                        ; func body size (guess)
0003288: 00                                        ; local decl count
0003289: fd                                        ; prefix
000328a: 02                                        ; v128.const
000328b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000329b: fd                                        ; prefix
000329c: 02                                        ; v128.const
000329d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00032ad: fd                                        ; prefix
00032ae: 9b01                                      ; f32x4.sub
00032b0: 1a                                        ; drop
00032b1: 0b                                        ; end
0003287: 2a                                        ; FIXUP func body size
; function body 312
00032b2: 00                                        ; func body size (guess)
00032b3: 00                                        ; local decl count
00032b4: fd                                        ; prefix
00032b5: 02                                        ; v128.const
00032b6: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00032c6: fd                                        ; prefix
00032c7: 02                                        ; v128.const
00032c8: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00032d8: fd                                        ; prefix
00032d9: 9c01                                      ; f32x4.mul
00032db: 1a                                        ; drop
00032dc: 0b                                        ; end
00032b2: 2a                                        ; FIXUP func body size
; function body 313
00032dd: 00                                        ; func body size (guess)
00032de: 00                                        ; local decl count
00032df: fd                                        ; prefix
00032e0: 02                                        ; v128.const
00032e1: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00032f1: fd                                        ; prefix
00032f2: 02                                        ; v128.const
00032f3: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003303: fd                                        ; prefix
0003304: 9d01                                      ; f32x4.div
0003306: 1a                                        ; drop
0003307: 0b                                        ; end
00032dd: 2a                                        ; FIXUP func body size
; function body 314
0003308: 00                                        ; func body size (guess)
0003309: 00                                        ; local decl count
000330a: fd                                        ; prefix
000330b: 02                                        ; v128.const
000330c: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000331c: fd                                        ; prefix
000331d: 02                                        ; v128.const
000331e: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000332e: fd                                        ; prefix
000332f: 9e01                                      ; f32x4.min
0003331: 1a                                        ; drop
0003332: 0b                                        ; end
0003308: 2a                                        ; FIXUP func body size
; function body 315
0003333: 00                                        ; func body size (guess)
0003334: 00                                        ; local decl count
0003335: fd                                        ; prefix
0003336: 02                                        ; v128.const
0003337: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003347: fd                                        ; prefix
0003348: 02                                        ; v128.const
0003349: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003359: fd                                        ; prefix
000335a: 9f01                                      ; f32x4.max
000335c: 1a                                        ; drop
000335d: 0b                                        ; end
0003333: 2a                                        ; FIXUP func body size
; function body 316
000335e: 00                                        ; func body size (guess)
000335f: 00                                        ; local decl count
0003360: fd                                        ; prefix
0003361: 02                                        ; v128.const
0003362: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003372: fd                                        ; prefix
0003373: a001                                      ; f64x2.abs
0003375: 1a                                        ; drop
0003376: 0b                                        ; end
000335e: 18                                        ; FIXUP func body size
; function body 317
0003377: 00                                        ; func body size (guess)
0003378: 00                                        ; local decl count
0003379: fd                                        ; prefix
000337a: 02                                        ; v128.const
000337b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000338b: fd                                        ; prefix
000338c: a101                                      ; f64x2.neg
000338e: 1a                                        ; drop
000338f: 0b                                        ; end
0003377: 18                                        ; FIXUP func body size
; function body 318
0003390: 00                                        ; func body size (guess)
0003391: 00                                        ; local decl count
0003392: fd                                        ; prefix
0003393: 02                                        ; v128.const
0003394: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00033a4: fd                                        ; prefix
00033a5: a201                                      ; f64x2.sqrt
00033a7: 1a                                        ; drop
00033a8: 0b                                        ; end
0003390: 18                                        ; FIXUP func body size
; function body 319
00033a9: 00                                        ; func body size (guess)
00033aa: 00                                        ; local decl count
00033ab: fd                                        ; prefix
00033ac: 02                                        ; v128.const
00033ad: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00033bd: fd                                        ; prefix
00033be: 02                                        ; v128.const
00033bf: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00033cf: fd                                        ; prefix
00033d0: a501                                      ; f64x2.add
00033d2: 1a                                        ; drop
00033d3: 0b                                        ; end
00033a9: 2a                                        ; FIXUP func body size
; function body 320
00033d4: 00                                        ; func body size (guess)
00033d5: 00                                        ; local decl count
00033d6: fd                                        ; prefix
00033d7: 02                                        ; v128.const
00033d8: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00033e8: fd                                        ; prefix
00033e9: 02                                        ; v128.const
00033ea: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00033fa: fd                                        ; prefix
00033fb: a601                                      ; f64x2.sub
00033fd: 1a                                        ; drop
00033fe: 0b                                        ; end
00033d4: 2a                                        ; FIXUP func body size
; function body 321
00033ff: 00                                        ; func body size (guess)
0003400: 00                                        ; local decl count
0003401: fd                                        ; prefix
0003402: 02                                        ; v128.const
0003403: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003413: fd                                        ; prefix
0003414: 02                                        ; v128.const
0003415: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003425: fd                                        ; prefix
0003426: a701                                      ; f64x2.mul
0003428: 1a                                        ; drop
0003429: 0b                                        ; end
00033ff: 2a                                        ; FIXUP func body size
; function body 322
000342a: 00                                        ; func body size (guess)
000342b: 00                                        ; local decl count
000342c: fd                                        ; prefix
000342d: 02                                        ; v128.const
000342e: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000343e: fd                                        ; prefix
000343f: 02                                        ; v128.const
0003440: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003450: fd                                        ; prefix
0003451: a801                                      ; f64x2.div
0003453: 1a                                        ; drop
0003454: 0b                                        ; end
000342a: 2a                                        ; FIXUP func body size
; function body 323
0003455: 00                                        ; func body size (guess)
0003456: 00                                        ; local decl count
0003457: fd                                        ; prefix
0003458: 02                                        ; v128.const
0003459: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003469: fd                                        ; prefix
000346a: 02                                        ; v128.const
000346b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000347b: fd                                        ; prefix
000347c: a901                                      ; f64x2.min
000347e: 1a                                        ; drop
000347f: 0b                                        ; end
0003455: 2a                                        ; FIXUP func body size
; function body 324
0003480: 00                                        ; func body size (guess)
0003481: 00                                        ; local decl count
0003482: fd                                        ; prefix
0003483: 02                                        ; v128.const
0003484: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003494: fd                                        ; prefix
0003495: 02                                        ; v128.const
0003496: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00034a6: fd                                        ; prefix
00034a7: aa01                                      ; f64x2.max
00034a9: 1a                                        ; drop
00034aa: 0b                                        ; end
0003480: 2a                                        ; FIXUP func body size
; function body 325
00034ab: 00                                        ; func body size (guess)
00034ac: 00                                        ; local decl count
00034ad: fd                                        ; prefix
00034ae: 02                                        ; v128.const
00034af: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00034bf: fd                                        ; prefix
00034c0: ab01                                      ; i32x4.trunc_sat_f32x4_s
00034c2: 1a                                        ; drop
00034c3: 0b                                        ; end
00034ab: 18                                        ; FIXUP func body size
; function body 326
00034c4: 00                                        ; func body size (guess)
00034c5: 00                                        ; local decl count
00034c6: fd                                        ; prefix
00034c7: 02                                        ; v128.const
00034c8: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00034d8: fd                                        ; prefix
00034d9: ac01                                      ; i32x4.trunc_sat_f32x4_u
00034db: 1a                                        ; drop
00034dc: 0b                                        ; end
00034c4: 18                                        ; FIXUP func body size
; function body 327
00034dd: 00                                        ; func body size (guess)
00034de: 00                                        ; local decl count
00034df: fd                                        ; prefix
00034e0: 02                                        ; v128.const
00034e1: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00034f1: fd                                        ; prefix
00034f2: ad01                                      ; i64x2.trunc_sat_f64x2_s
00034f4: 1a                                        ; drop
00034f5: 0b                                        ; end
00034dd: 18                                        ; FIXUP func body size
; function body 328
00034f6: 00                                        ; func body size (guess)
00034f7: 00                                        ; local decl count
00034f8: fd                                        ; prefix
00034f9: 02                                        ; v128.const
00034fa: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000350a: fd                                        ; prefix
000350b: ae01                                      ; i64x2.trunc_sat_f64x2_u
000350d: 1a                                        ; drop
000350e: 0b                                        ; end
00034f6: 18                                        ; FIXUP func body size
; function body 329
000350f: 00                                        ; func body size (guess)
0003510: 00                                        ; local decl count
0003511: fd                                        ; prefix
0003512: 02                                        ; v128.const
0003513: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003523: fd                                        ; prefix
0003524: af01                                      ; f32x4.convert_i32x4_s
0003526: 1a                                        ; drop
0003527: 0b                                        ; end
000350f: 18                                        ; FIXUP func body size
; function body 330
0003528: 00                                        ; func body size (guess)
0003529: 00                                        ; local decl count
000352a: fd                                        ; prefix
000352b: 02                                        ; v128.const
000352c: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000353c: fd                                        ; prefix
000353d: b001                                      ; f32x4.convert_i32x4_u
000353f: 1a                                        ; drop
0003540: 0b                                        ; end
0003528: 18                                        ; FIXUP func body size
; function body 331
0003541: 00                                        ; func body size (guess)
0003542: 00                                        ; local decl count
0003543: fd                                        ; prefix
0003544: 02                                        ; v128.const
0003545: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003555: fd                                        ; prefix
0003556: b101                                      ; f64x2.convert_i64x2_s
0003558: 1a                                        ; drop
0003559: 0b                                        ; end
0003541: 18                                        ; FIXUP func body size
; function body 332
000355a: 00                                        ; func body size (guess)
000355b: 00                                        ; local decl count
000355c: fd                                        ; prefix
000355d: 02                                        ; v128.const
000355e: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000356e: fd                                        ; prefix
000356f: b201                                      ; f64x2.convert_i64x2_u
0003571: 1a                                        ; drop
0003572: 0b                                        ; end
000355a: 18                                        ; FIXUP func body size
; function body 333
0003573: 00                                        ; func body size (guess)
0003574: 00                                        ; local decl count
0003575: 41                                        ; i32.const
0003576: 01                                        ; i32 literal
0003577: 41                                        ; i32.const
0003578: 02                                        ; i32 literal
0003579: fe                                        ; prefix
000357a: 00                                        ; atomic.notify
000357b: 02                                        ; alignment
000357c: 03                                        ; memory offset
000357d: 1a                                        ; drop
000357e: 0b                                        ; end
0003573: 0b                                        ; FIXUP func body size
; function body 334
000357f: 00                                        ; func body size (guess)
0003580: 00                                        ; local decl count
0003581: 41                                        ; i32.const
0003582: 01                                        ; i32 literal
0003583: 41                                        ; i32.const
0003584: 02                                        ; i32 literal
0003585: 42                                        ; i64.const
0003586: 03                                        ; i64 literal
0003587: fe                                        ; prefix
0003588: 01                                        ; i32.atomic.wait
0003589: 02                                        ; alignment
000358a: 03                                        ; memory offset
000358b: 1a                                        ; drop
000358c: 0b                                        ; end
000357f: 0d                                        ; FIXUP func body size
; function body 335
000358d: 00                                        ; func body size (guess)
000358e: 00                                        ; local decl count
000358f: 41                                        ; i32.const
0003590: 01                                        ; i32 literal
0003591: 42                                        ; i64.const
0003592: 02                                        ; i64 literal
0003593: 42                                        ; i64.const
0003594: 03                                        ; i64 literal
0003595: fe                                        ; prefix
0003596: 02                                        ; i64.atomic.wait
0003597: 03                                        ; alignment
0003598: 03                                        ; memory offset
0003599: 1a                                        ; drop
000359a: 0b                                        ; end
000358d: 0d                                        ; FIXUP func body size
; function body 336
000359b: 00                                        ; func body size (guess)
000359c: 00                                        ; local decl count
000359d: 41                                        ; i32.const
000359e: 01                                        ; i32 literal
000359f: fe                                        ; prefix
00035a0: 10                                        ; i32.atomic.load
00035a1: 02                                        ; alignment
00035a2: 03                                        ; memory offset
00035a3: 1a                                        ; drop
00035a4: 0b                                        ; end
000359b: 09                                        ; FIXUP func body size
; function body 337
00035a5: 00                                        ; func body size (guess)
00035a6: 00                                        ; local decl count
00035a7: 41                                        ; i32.const
00035a8: 01                                        ; i32 literal
00035a9: fe                                        ; prefix
00035aa: 11                                        ; i64.atomic.load
00035ab: 03                                        ; alignment
00035ac: 07                                        ; memory offset
00035ad: 1a                                        ; drop
00035ae: 0b                                        ; end
00035a5: 09                                        ; FIXUP func body size
; function body 338
00035af: 00                                        ; func body size (guess)
00035b0: 00                                        ; local decl count
00035b1: 41                                        ; i32.const
00035b2: 01                                        ; i32 literal
00035b3: fe                                        ; prefix
00035b4: 12                                        ; i32.atomic.load8_u
00035b5: 00                                        ; alignment
00035b6: 03                                        ; memory offset
00035b7: 1a                                        ; drop
00035b8: 0b                                        ; end
00035af: 09                                        ; FIXUP func body size
; function body 339
00035b9: 00                                        ; func body size (guess)
00035ba: 00                                        ; local decl count
00035bb: 41                                        ; i32.const
00035bc: 01                                        ; i32 literal
00035bd: fe                                        ; prefix
00035be: 13                                        ; i32.atomic.load16_u
00035bf: 01                                        ; alignment
00035c0: 03                                        ; memory offset
00035c1: 1a                                        ; drop
00035c2: 0b                                        ; end
00035b9: 09                                        ; FIXUP func body size
; function body 340
00035c3: 00                                        ; func body size (guess)
00035c4: 00                                        ; local decl count
00035c5: 41                                        ; i32.const
00035c6: 01                                        ; i32 literal
00035c7: fe                                        ; prefix
00035c8: 14                                        ; i64.atomic.load8_u
00035c9: 00                                        ; alignment
00035ca: 03                                        ; memory offset
00035cb: 1a                                        ; drop
00035cc: 0b                                        ; end
00035c3: 09                                        ; FIXUP func body size
; function body 341
00035cd: 00                                        ; func body size (guess)
00035ce: 00                                        ; local decl count
00035cf: 41                                        ; i32.const
00035d0: 01                                        ; i32 literal
00035d1: fe                                        ; prefix
00035d2: 15                                        ; i64.atomic.load16_u
00035d3: 01                                        ; alignment
00035d4: 03                                        ; memory offset
00035d5: 1a                                        ; drop
00035d6: 0b                                        ; end
00035cd: 09                                        ; FIXUP func body size
; function body 342
00035d7: 00                                        ; func body size (guess)
00035d8: 00                                        ; local decl count
00035d9: 41                                        ; i32.const
00035da: 01                                        ; i32 literal
00035db: fe                                        ; prefix
00035dc: 16                                        ; i64.atomic.load32_u
00035dd: 02                                        ; alignment
00035de: 03                                        ; memory offset
00035df: 1a                                        ; drop
00035e0: 0b                                        ; end
00035d7: 09                                        ; FIXUP func body size
; function body 343
00035e1: 00                                        ; func body size (guess)
00035e2: 00                                        ; local decl count
00035e3: 41                                        ; i32.const
00035e4: 01                                        ; i32 literal
00035e5: 41                                        ; i32.const
00035e6: 02                                        ; i32 literal
00035e7: fe                                        ; prefix
00035e8: 17                                        ; i32.atomic.store
00035e9: 02                                        ; alignment
00035ea: 03                                        ; memory offset
00035eb: 0b                                        ; end
00035e1: 0a                                        ; FIXUP func body size
; function body 344
00035ec: 00                                        ; func body size (guess)
00035ed: 00                                        ; local decl count
00035ee: 41                                        ; i32.const
00035ef: 01                                        ; i32 literal
00035f0: 42                                        ; i64.const
00035f1: 02                                        ; i64 literal
00035f2: fe                                        ; prefix
00035f3: 18                                        ; i64.atomic.store
00035f4: 03                                        ; alignment
00035f5: 07                                        ; memory offset
00035f6: 0b                                        ; end
00035ec: 0a                                        ; FIXUP func body size
; function body 345
00035f7: 00                                        ; func body size (guess)
00035f8: 00                                        ; local decl count
00035f9: 41                                        ; i32.const
00035fa: 01                                        ; i32 literal
00035fb: 41                                        ; i32.const
00035fc: 02                                        ; i32 literal
00035fd: fe                                        ; prefix
00035fe: 19                                        ; i32.atomic.store8
00035ff: 00                                        ; alignment
0003600: 03                                        ; memory offset
0003601: 0b                                        ; end
00035f7: 0a                                        ; FIXUP func body size
; function body 346
0003602: 00                                        ; func body size (guess)
0003603: 00                                        ; local decl count
0003604: 41                                        ; i32.const
0003605: 01                                        ; i32 literal
0003606: 41                                        ; i32.const
0003607: 02                                        ; i32 literal
0003608: fe                                        ; prefix
0003609: 1a                                        ; i32.atomic.store16
000360a: 01                                        ; alignment
000360b: 03                                        ; memory offset
000360c: 0b                                        ; end
0003602: 0a                                        ; FIXUP func body size
; function body 347
000360d: 00                                        ; func body size (guess)
000360e: 00                                        ; local decl count
000360f: 41                                        ; i32.const
0003610: 01                                        ; i32 literal
0003611: 42                                        ; i64.const
0003612: 02                                        ; i64 literal
0003613: fe                                        ; prefix
0003614: 1b                                        ; i64.atomic.store8
0003615: 00                                        ; alignment
0003616: 03                                        ; memory offset
0003617: 0b                                        ; end
000360d: 0a                                        ; FIXUP func body size
; function body 348
0003618: 00                                        ; func body size (guess)
0003619: 00                                        ; local decl count
000361a: 41                                        ; i32.const
000361b: 01                                        ; i32 literal
000361c: 42                                        ; i64.const
000361d: 02                                        ; i64 literal
000361e: fe                                        ; prefix
000361f: 1c                                        ; i64.atomic.store16
0003620: 01                                        ; alignment
0003621: 03                                        ; memory offset
0003622: 0b                                        ; end
0003618: 0a                                        ; FIXUP func body size
; function body 349
0003623: 00                                        ; func body size (guess)
0003624: 00                                        ; local decl count
0003625: 41                                        ; i32.const
0003626: 01                                        ; i32 literal
0003627: 42                                        ; i64.const
0003628: 02                                        ; i64 literal
0003629: fe                                        ; prefix
000362a: 1d                                        ; i64.atomic.store32
000362b: 02                                        ; alignment
000362c: 03                                        ; memory offset
000362d: 0b                                        ; end
0003623: 0a                                        ; FIXUP func body size
; function body 350
000362e: 00                                        ; func body size (guess)
000362f: 00                                        ; local decl count
0003630: 41                                        ; i32.const
0003631: 01                                        ; i32 literal
0003632: 41                                        ; i32.const
0003633: 02                                        ; i32 literal
0003634: fe                                        ; prefix
0003635: 1e                                        ; i32.atomic.rmw.add
0003636: 02                                        ; alignment
0003637: 03                                        ; memory offset
0003638: 1a                                        ; drop
0003639: 0b                                        ; end
000362e: 0b                                        ; FIXUP func body size
; function body 351
000363a: 00                                        ; func body size (guess)
000363b: 00                                        ; local decl count
000363c: 41                                        ; i32.const
000363d: 01                                        ; i32 literal
000363e: 42                                        ; i64.const
000363f: 02                                        ; i64 literal
0003640: fe                                        ; prefix
0003641: 1f                                        ; i64.atomic.rmw.add
0003642: 03                                        ; alignment
0003643: 07                                        ; memory offset
0003644: 1a                                        ; drop
0003645: 0b                                        ; end
000363a: 0b                                        ; FIXUP func body size
; function body 352
0003646: 00                                        ; func body size (guess)
0003647: 00                                        ; local decl count
0003648: 41                                        ; i32.const
0003649: 01                                        ; i32 literal
000364a: 41                                        ; i32.const
000364b: 02                                        ; i32 literal
000364c: fe                                        ; prefix
000364d: 20                                        ; i32.atomic.rmw8.add_u
000364e: 00                                        ; alignment
000364f: 03                                        ; memory offset
0003650: 1a                                        ; drop
0003651: 0b                                        ; end
0003646: 0b                                        ; FIXUP func body size
; function body 353
0003652: 00                                        ; func body size (guess)
0003653: 00                                        ; local decl count
0003654: 41                                        ; i32.const
0003655: 01                                        ; i32 literal
0003656: 41                                        ; i32.const
0003657: 02                                        ; i32 literal
0003658: fe                                        ; prefix
0003659: 21                                        ; i32.atomic.rmw16.add_u
000365a: 01                                        ; alignment
000365b: 03                                        ; memory offset
000365c: 1a                                        ; drop
000365d: 0b                                        ; end
0003652: 0b                                        ; FIXUP func body size
; function body 354
000365e: 00                                        ; func body size (guess)
000365f: 00                                        ; local decl count
0003660: 41                                        ; i32.const
0003661: 01                                        ; i32 literal
0003662: 42                                        ; i64.const
0003663: 02                                        ; i64 literal
0003664: fe                                        ; prefix
0003665: 22                                        ; i64.atomic.rmw8.add_u
0003666: 00                                        ; alignment
0003667: 03                                        ; memory offset
0003668: 1a                                        ; drop
0003669: 0b                                        ; end
000365e: 0b                                        ; FIXUP func body size
; function body 355
000366a: 00                                        ; func body size (guess)
000366b: 00                                        ; local decl count
000366c: 41                                        ; i32.const
000366d: 01                                        ; i32 literal
000366e: 42                                        ; i64.const
000366f: 02                                        ; i64 literal
0003670: fe                                        ; prefix
0003671: 23                                        ; i64.atomic.rmw16.add_u
0003672: 01                                        ; alignment
0003673: 03                                        ; memory offset
0003674: 1a                                        ; drop
0003675: 0b                                        ; end
000366a: 0b                                        ; FIXUP func body size
; function body 356
0003676: 00                                        ; func body size (guess)
0003677: 00                                        ; local decl count
0003678: 41                                        ; i32.const
0003679: 01                                        ; i32 literal
000367a: 42                                        ; i64.const
000367b: 02                                        ; i64 literal
000367c: fe                                        ; prefix
000367d: 24                                        ; i64.atomic.rmw32.add_u
000367e: 02                                        ; alignment
000367f: 03                                        ; memory offset
0003680: 1a                                        ; drop
0003681: 0b                                        ; end
0003676: 0b                                        ; FIXUP func body size
; function body 357
0003682: 00                                        ; func body size (guess)
0003683: 00                                        ; local decl count
0003684: 41                                        ; i32.const
0003685: 01                                        ; i32 literal
0003686: 41                                        ; i32.const
0003687: 02                                        ; i32 literal
0003688: fe                                        ; prefix
0003689: 25                                        ; i32.atomic.rmw.sub
000368a: 02                                        ; alignment
000368b: 03                                        ; memory offset
000368c: 1a                                        ; drop
000368d: 0b                                        ; end
0003682: 0b                                        ; FIXUP func body size
; function body 358
000368e: 00                                        ; func body size (guess)
000368f: 00                                        ; local decl count
0003690: 41                                        ; i32.const
0003691: 01                                        ; i32 literal
0003692: 42                                        ; i64.const
0003693: 02                                        ; i64 literal
0003694: fe                                        ; prefix
0003695: 26                                        ; i64.atomic.rmw.sub
0003696: 03                                        ; alignment
0003697: 07                                        ; memory offset
0003698: 1a                                        ; drop
0003699: 0b                                        ; end
000368e: 0b                                        ; FIXUP func body size
; function body 359
000369a: 00                                        ; func body size (guess)
000369b: 00                                        ; local decl count
000369c: 41                                        ; i32.const
000369d: 01                                        ; i32 literal
000369e: 41                                        ; i32.const
000369f: 02                                        ; i32 literal
00036a0: fe                                        ; prefix
00036a1: 27                                        ; i32.atomic.rmw8.sub_u
00036a2: 00                                        ; alignment
00036a3: 03                                        ; memory offset
00036a4: 1a                                        ; drop
00036a5: 0b                                        ; end
000369a: 0b                                        ; FIXUP func body size
; function body 360
00036a6: 00                                        ; func body size (guess)
00036a7: 00                                        ; local decl count
00036a8: 41                                        ; i32.const
00036a9: 01                                        ; i32 literal
00036aa: 41                                        ; i32.const
00036ab: 02                                        ; i32 literal
00036ac: fe                                        ; prefix
00036ad: 28                                        ; i32.atomic.rmw16.sub_u
00036ae: 01                                        ; alignment
00036af: 03                                        ; memory offset
00036b0: 1a                                        ; drop
00036b1: 0b                                        ; end
00036a6: 0b                                        ; FIXUP func body size
; function body 361
00036b2: 00                                        ; func body size (guess)
00036b3: 00                                        ; local decl count
00036b4: 41                                        ; i32.const
00036b5: 01                                        ; i32 literal
00036b6: 42                                        ; i64.const
00036b7: 02                                        ; i64 literal
00036b8: fe                                        ; prefix
00036b9: 29                                        ; i64.atomic.rmw8.sub_u
00036ba: 00                                        ; alignment
00036bb: 03                                        ; memory offset
00036bc: 1a                                        ; drop
00036bd: 0b                                        ; end
00036b2: 0b                                        ; FIXUP func body size
; function body 362
00036be: 00                                        ; func body size (guess)
00036bf: 00                                        ; local decl count
00036c0: 41                                        ; i32.const
00036c1: 01                                        ; i32 literal
00036c2: 42                                        ; i64.const
00036c3: 02                                        ; i64 literal
00036c4: fe                                        ; prefix
00036c5: 2a                                        ; i64.atomic.rmw16.sub_u
00036c6: 01                                        ; alignment
00036c7: 03                                        ; memory offset
00036c8: 1a                                        ; drop
00036c9: 0b                                        ; end
00036be: 0b                                        ; FIXUP func body size
; function body 363
00036ca: 00                                        ; func body size (guess)
00036cb: 00                                        ; local decl count
00036cc: 41                                        ; i32.const
00036cd: 01                                        ; i32 literal
00036ce: 42                                        ; i64.const
00036cf: 02                                        ; i64 literal
00036d0: fe                                        ; prefix
00036d1: 2b                                        ; i64.atomic.rmw32.sub_u
00036d2: 02                                        ; alignment
00036d3: 03                                        ; memory offset
00036d4: 1a                                        ; drop
00036d5: 0b                                        ; end
00036ca: 0b                                        ; FIXUP func body size
; function body 364
00036d6: 00                                        ; func body size (guess)
00036d7: 00                                        ; local decl count
00036d8: 41                                        ; i32.const
00036d9: 01                                        ; i32 literal
00036da: 41                                        ; i32.const
00036db: 02                                        ; i32 literal
00036dc: fe                                        ; prefix
00036dd: 2c                                        ; i32.atomic.rmw.and
00036de: 02                                        ; alignment
00036df: 03                                        ; memory offset
00036e0: 1a                                        ; drop
00036e1: 0b                                        ; end
00036d6: 0b                                        ; FIXUP func body size
; function body 365
00036e2: 00                                        ; func body size (guess)
00036e3: 00                                        ; local decl count
00036e4: 41                                        ; i32.const
00036e5: 01                                        ; i32 literal
00036e6: 42                                        ; i64.const
00036e7: 02                                        ; i64 literal
00036e8: fe                                        ; prefix
00036e9: 2d                                        ; i64.atomic.rmw.and
00036ea: 03                                        ; alignment
00036eb: 07                                        ; memory offset
00036ec: 1a                                        ; drop
00036ed: 0b                                        ; end
00036e2: 0b                                        ; FIXUP func body size
; function body 366
00036ee: 00                                        ; func body size (guess)
00036ef: 00                                        ; local decl count
00036f0: 41                                        ; i32.const
00036f1: 01                                        ; i32 literal
00036f2: 41                                        ; i32.const
00036f3: 02                                        ; i32 literal
00036f4: fe                                        ; prefix
00036f5: 2e                                        ; i32.atomic.rmw8.and_u
00036f6: 00                                        ; alignment
00036f7: 03                                        ; memory offset
00036f8: 1a                                        ; drop
00036f9: 0b                                        ; end
00036ee: 0b                                        ; FIXUP func body size
; function body 367
00036fa: 00                                        ; func body size (guess)
00036fb: 00                                        ; local decl count
00036fc: 41                                        ; i32.const
00036fd: 01                                        ; i32 literal
00036fe: 41                                        ; i32.const
00036ff: 02                                        ; i32 literal
0003700: fe                                        ; prefix
0003701: 2f                                        ; i32.atomic.rmw16.and_u
0003702: 01                                        ; alignment
0003703: 03                                        ; memory offset
0003704: 1a                                        ; drop
0003705: 0b                                        ; end
00036fa: 0b                                        ; FIXUP func body size
; function body 368
0003706: 00                                        ; func body size (guess)
0003707: 00                                        ; local decl count
0003708: 41                                        ; i32.const
0003709: 01                                        ; i32 literal
000370a: 42                                        ; i64.const
000370b: 02                                        ; i64 literal
000370c: fe                                        ; prefix
000370d: 30                                        ; i64.atomic.rmw8.and_u
000370e: 00                                        ; alignment
000370f: 03                                        ; memory offset
0003710: 1a                                        ; drop
0003711: 0b                                        ; end
0003706: 0b                                        ; FIXUP func body size
; function body 369
0003712: 00                                        ; func body size (guess)
0003713: 00                                        ; local decl count
0003714: 41                                        ; i32.const
0003715: 01                                        ; i32 literal
0003716: 42                                        ; i64.const
0003717: 02                                        ; i64 literal
0003718: fe                                        ; prefix
0003719: 31                                        ; i64.atomic.rmw16.and_u
000371a: 01                                        ; alignment
000371b: 03                                        ; memory offset
000371c: 1a                                        ; drop
000371d: 0b                                        ; end
0003712: 0b                                        ; FIXUP func body size
; function body 370
000371e: 00                                        ; func body size (guess)
000371f: 00                                        ; local decl count
0003720: 41                                        ; i32.const
0003721: 01                                        ; i32 literal
0003722: 42                                        ; i64.const
0003723: 02                                        ; i64 literal
0003724: fe                                        ; prefix
0003725: 32                                        ; i64.atomic.rmw32.and_u
0003726: 02                                        ; alignment
0003727: 03                                        ; memory offset
0003728: 1a                                        ; drop
0003729: 0b                                        ; end
000371e: 0b                                        ; FIXUP func body size
; function body 371
000372a: 00                                        ; func body size (guess)
000372b: 00                                        ; local decl count
000372c: 41                                        ; i32.const
000372d: 01                                        ; i32 literal
000372e: 41                                        ; i32.const
000372f: 02                                        ; i32 literal
0003730: fe                                        ; prefix
0003731: 33                                        ; i32.atomic.rmw.or
0003732: 02                                        ; alignment
0003733: 03                                        ; memory offset
0003734: 1a                                        ; drop
0003735: 0b                                        ; end
000372a: 0b                                        ; FIXUP func body size
; function body 372
0003736: 00                                        ; func body size (guess)
0003737: 00                                        ; local decl count
0003738: 41                                        ; i32.const
0003739: 01                                        ; i32 literal
000373a: 42                                        ; i64.const
000373b: 02                                        ; i64 literal
000373c: fe                                        ; prefix
000373d: 34                                        ; i64.atomic.rmw.or
000373e: 03                                        ; alignment
000373f: 07                                        ; memory offset
0003740: 1a                                        ; drop
0003741: 0b                                        ; end
0003736: 0b                                        ; FIXUP func body size
; function body 373
0003742: 00                                        ; func body size (guess)
0003743: 00                                        ; local decl count
0003744: 41                                        ; i32.const
0003745: 01                                        ; i32 literal
0003746: 41                                        ; i32.const
0003747: 02                                        ; i32 literal
0003748: fe                                        ; prefix
0003749: 35                                        ; i32.atomic.rmw8.or_u
000374a: 00                                        ; alignment
000374b: 03                                        ; memory offset
000374c: 1a                                        ; drop
000374d: 0b                                        ; end
0003742: 0b                                        ; FIXUP func body size
; function body 374
000374e: 00                                        ; func body size (guess)
000374f: 00                                        ; local decl count
0003750: 41                                        ; i32.const
0003751: 01                                        ; i32 literal
0003752: 41                                        ; i32.const
0003753: 02                                        ; i32 literal
0003754: fe                                        ; prefix
0003755: 36                                        ; i32.atomic.rmw16.or_u
0003756: 01                                        ; alignment
0003757: 03                                        ; memory offset
0003758: 1a                                        ; drop
0003759: 0b                                        ; end
000374e: 0b                                        ; FIXUP func body size
; function body 375
000375a: 00                                        ; func body size (guess)
000375b: 00                                        ; local decl count
000375c: 41                                        ; i32.const
000375d: 01                                        ; i32 literal
000375e: 42                                        ; i64.const
000375f: 02                                        ; i64 literal
0003760: fe                                        ; prefix
0003761: 37                                        ; i64.atomic.rmw8.or_u
0003762: 00                                        ; alignment
0003763: 03                                        ; memory offset
0003764: 1a                                        ; drop
0003765: 0b                                        ; end
000375a: 0b                                        ; FIXUP func body size
; function body 376
0003766: 00                                        ; func body size (guess)
0003767: 00                                        ; local decl count
0003768: 41                                        ; i32.const
0003769: 01                                        ; i32 literal
000376a: 42                                        ; i64.const
000376b: 02                                        ; i64 literal
000376c: fe                                        ; prefix
000376d: 38                                        ; i64.atomic.rmw16.or_u
000376e: 01                                        ; alignment
000376f: 03                                        ; memory offset
0003770: 1a                                        ; drop
0003771: 0b                                        ; end
0003766: 0b                                        ; FIXUP func body size
; function body 377
0003772: 00                                        ; func body size (guess)
0003773: 00                                        ; local decl count
0003774: 41                                        ; i32.const
0003775: 01                                        ; i32 literal
0003776: 42                                        ; i64.const
0003777: 02                                        ; i64 literal
0003778: fe                                        ; prefix
0003779: 39                                        ; i64.atomic.rmw32.or_u
000377a: 02                                        ; alignment
000377b: 03                                        ; memory offset
000377c: 1a                                        ; drop
000377d: 0b                                        ; end
0003772: 0b                                        ; FIXUP func body size
; function body 378
000377e: 00                                        ; func body size (guess)
000377f: 00                                        ; local decl count
0003780: 41                                        ; i32.const
0003781: 01                                        ; i32 literal
0003782: 41                                        ; i32.const
0003783: 02                                        ; i32 literal
0003784: fe                                        ; prefix
0003785: 3a                                        ; i32.atomic.rmw.xor
0003786: 02                                        ; alignment
0003787: 03                                        ; memory offset
0003788: 1a                                        ; drop
0003789: 0b                                        ; end
000377e: 0b                                        ; FIXUP func body size
; function body 379
000378a: 00                                        ; func body size (guess)
000378b: 00                                        ; local decl count
000378c: 41                                        ; i32.const
000378d: 01                                        ; i32 literal
000378e: 42                                        ; i64.const
000378f: 02                                        ; i64 literal
0003790: fe                                        ; prefix
0003791: 3b                                        ; i64.atomic.rmw.xor
0003792: 03                                        ; alignment
0003793: 07                                        ; memory offset
0003794: 1a                                        ; drop
0003795: 0b                                        ; end
000378a: 0b                                        ; FIXUP func body size
; function body 380
0003796: 00                                        ; func body size (guess)
0003797: 00                                        ; local decl count
0003798: 41                                        ; i32.const
0003799: 01                                        ; i32 literal
000379a: 41                                        ; i32.const
000379b: 02                                        ; i32 literal
000379c: fe                                        ; prefix
000379d: 3c                                        ; i32.atomic.rmw8.xor_u
000379e: 00                                        ; alignment
000379f: 03                                        ; memory offset
00037a0: 1a                                        ; drop
00037a1: 0b                                        ; end
0003796: 0b                                        ; FIXUP func body size
; function body 381
00037a2: 00                                        ; func body size (guess)
00037a3: 00                                        ; local decl count
00037a4: 41                                        ; i32.const
00037a5: 01                                        ; i32 literal
00037a6: 41                                        ; i32.const
00037a7: 02                                        ; i32 literal
00037a8: fe                                        ; prefix
00037a9: 3d                                        ; i32.atomic.rmw16.xor_u
00037aa: 01                                        ; alignment
00037ab: 03                                        ; memory offset
00037ac: 1a                                        ; drop
00037ad: 0b                                        ; end
00037a2: 0b                                        ; FIXUP func body size
; function body 382
00037ae: 00                                        ; func body size (guess)
00037af: 00                                        ; local decl count
00037b0: 41                                        ; i32.const
00037b1: 01                                        ; i32 literal
00037b2: 42                                        ; i64.const
00037b3: 02                                        ; i64 literal
00037b4: fe                                        ; prefix
00037b5: 3e                                        ; i64.atomic.rmw8.xor_u
00037b6: 00                                        ; alignment
00037b7: 03                                        ; memory offset
00037b8: 1a                                        ; drop
00037b9: 0b                                        ; end
00037ae: 0b                                        ; FIXUP func body size
; function body 383
00037ba: 00                                        ; func body size (guess)
00037bb: 00                                        ; local decl count
00037bc: 41                                        ; i32.const
00037bd: 01                                        ; i32 literal
00037be: 42                                        ; i64.const
00037bf: 02                                        ; i64 literal
00037c0: fe                                        ; prefix
00037c1: 3f                                        ; i64.atomic.rmw16.xor_u
00037c2: 01                                        ; alignment
00037c3: 03                                        ; memory offset
00037c4: 1a                                        ; drop
00037c5: 0b                                        ; end
00037ba: 0b                                        ; FIXUP func body size
; function body 384
00037c6: 00                                        ; func body size (guess)
00037c7: 00                                        ; local decl count
00037c8: 41                                        ; i32.const
00037c9: 01                                        ; i32 literal
00037ca: 42                                        ; i64.const
00037cb: 02                                        ; i64 literal
00037cc: fe                                        ; prefix
00037cd: 40                                        ; i64.atomic.rmw32.xor_u
00037ce: 02                                        ; alignment
00037cf: 03                                        ; memory offset
00037d0: 1a                                        ; drop
00037d1: 0b                                        ; end
00037c6: 0b                                        ; FIXUP func body size
; function body 385
00037d2: 00                                        ; func body size (guess)
00037d3: 00                                        ; local decl count
00037d4: 41                                        ; i32.const
00037d5: 01                                        ; i32 literal
00037d6: 41                                        ; i32.const
00037d7: 02                                        ; i32 literal
00037d8: fe                                        ; prefix
00037d9: 41                                        ; i32.atomic.rmw.xchg
00037da: 02                                        ; alignment
00037db: 03                                        ; memory offset
00037dc: 1a                                        ; drop
00037dd: 0b                                        ; end
00037d2: 0b                                        ; FIXUP func body size
; function body 386
00037de: 00                                        ; func body size (guess)
00037df: 00                                        ; local decl count
00037e0: 41                                        ; i32.const
00037e1: 01                                        ; i32 literal
00037e2: 42                                        ; i64.const
00037e3: 02                                        ; i64 literal
00037e4: fe                                        ; prefix
00037e5: 42                                        ; i64.atomic.rmw.xchg
00037e6: 03                                        ; alignment
00037e7: 07                                        ; memory offset
00037e8: 1a                                        ; drop
00037e9: 0b                                        ; end
00037de: 0b                                        ; FIXUP func body size
; function body 387
00037ea: 00                                        ; func body size (guess)
00037eb: 00                                        ; local decl count
00037ec: 41                                        ; i32.const
00037ed: 01                                        ; i32 literal
00037ee: 41                                        ; i32.const
00037ef: 02                                        ; i32 literal
00037f0: fe                                        ; prefix
00037f1: 43                                        ; i32.atomic.rmw8.xchg_u
00037f2: 00                                        ; alignment
00037f3: 03                                        ; memory offset
00037f4: 1a                                        ; drop
00037f5: 0b                                        ; end
00037ea: 0b                                        ; FIXUP func body size
; function body 388
00037f6: 00                                        ; func body size (guess)
00037f7: 00                                        ; local decl count
00037f8: 41                                        ; i32.const
00037f9: 01                                        ; i32 literal
00037fa: 41                                        ; i32.const
00037fb: 02                                        ; i32 literal
00037fc: fe                                        ; prefix
00037fd: 44                                        ; i32.atomic.rmw16.xchg_u
00037fe: 01                                        ; alignment
00037ff: 03                                        ; memory offset
0003800: 1a                                        ; drop
0003801: 0b                                        ; end
00037f6: 0b                                        ; FIXUP func body size
; function body 389
0003802: 00                                        ; func body size (guess)
0003803: 00                                        ; local decl count
0003804: 41                                        ; i32.const
0003805: 01                                        ; i32 literal
0003806: 42                                        ; i64.const
0003807: 02                                        ; i64 literal
0003808: fe                                        ; prefix
0003809: 45                                        ; i64.atomic.rmw8.xchg_u
000380a: 00                                        ; alignment
000380b: 03                                        ; memory offset
000380c: 1a                                        ; drop
000380d: 0b                                        ; end
0003802: 0b                                        ; FIXUP func body size
; function body 390
000380e: 00                                        ; func body size (guess)
000380f: 00                                        ; local decl count
0003810: 41                                        ; i32.const
0003811: 01                                        ; i32 literal
0003812: 42                                        ; i64.const
0003813: 02                                        ; i64 literal
0003814: fe                                        ; prefix
0003815: 46                                        ; i64.atomic.rmw16.xchg_u
0003816: 01                                        ; alignment
0003817: 03                                        ; memory offset
0003818: 1a                                        ; drop
0003819: 0b                                        ; end
000380e: 0b                                        ; FIXUP func body size
; function body 391
000381a: 00                                        ; func body size (guess)
000381b: 00                                        ; local decl count
000381c: 41                                        ; i32.const
000381d: 01                                        ; i32 literal
000381e: 42                                        ; i64.const
000381f: 02                                        ; i64 literal
0003820: fe                                        ; prefix
0003821: 47                                        ; i64.atomic.rmw32.xchg_u
0003822: 02                                        ; alignment
0003823: 03                                        ; memory offset
0003824: 1a                                        ; drop
0003825: 0b                                        ; end
000381a: 0b                                        ; FIXUP func body size
; function body 392
0003826: 00                                        ; func body size (guess)
0003827: 00                                        ; local decl count
0003828: 41                                        ; i32.const
0003829: 01                                        ; i32 literal
000382a: 41                                        ; i32.const
000382b: 02                                        ; i32 literal
000382c: 41                                        ; i32.const
000382d: 03                                        ; i32 literal
000382e: fe                                        ; prefix
000382f: 48                                        ; i32.atomic.rmw.cmpxchg
0003830: 02                                        ; alignment
0003831: 03                                        ; memory offset
0003832: 1a                                        ; drop
0003833: 0b                                        ; end
0003826: 0d                                        ; FIXUP func body size
; function body 393
0003834: 00                                        ; func body size (guess)
0003835: 00                                        ; local decl count
0003836: 41                                        ; i32.const
0003837: 01                                        ; i32 literal
0003838: 42                                        ; i64.const
0003839: 02                                        ; i64 literal
000383a: 42                                        ; i64.const
000383b: 03                                        ; i64 literal
000383c: fe                                        ; prefix
000383d: 49                                        ; i64.atomic.rmw.cmpxchg
000383e: 03                                        ; alignment
000383f: 07                                        ; memory offset
0003840: 1a                                        ; drop
0003841: 0b                                        ; end
0003834: 0d                                        ; FIXUP func body size
; function body 394
0003842: 00                                        ; func body size (guess)
0003843: 00                                        ; local decl count
0003844: 41                                        ; i32.const
0003845: 01                                        ; i32 literal
0003846: 41                                        ; i32.const
0003847: 02                                        ; i32 literal
0003848: 41                                        ; i32.const
0003849: 03                                        ; i32 literal
000384a: fe                                        ; prefix
000384b: 4a                                        ; i32.atomic.rmw8.cmpxchg_u
000384c: 00                                        ; alignment
000384d: 03                                        ; memory offset
000384e: 1a                                        ; drop
000384f: 0b                                        ; end
0003842: 0d                                        ; FIXUP func body size
; function body 395
0003850: 00                                        ; func body size (guess)
0003851: 00                                        ; local decl count
0003852: 41                                        ; i32.const
0003853: 01                                        ; i32 literal
0003854: 41                                        ; i32.const
0003855: 02                                        ; i32 literal
0003856: 41                                        ; i32.const
0003857: 03                                        ; i32 literal
0003858: fe                                        ; prefix
0003859: 4b                                        ; i32.atomic.rmw16.cmpxchg_u
000385a: 01                                        ; alignment
000385b: 03                                        ; memory offset
000385c: 1a                                        ; drop
000385d: 0b                                        ; end
0003850: 0d                                        ; FIXUP func body size
; function body 396
000385e: 00                                        ; func body size (guess)
000385f: 00                                        ; local decl count
0003860: 41                                        ; i32.const
0003861: 01                                        ; i32 literal
0003862: 42                                        ; i64.const
0003863: 02                                        ; i64 literal
0003864: 42                                        ; i64.const
0003865: 03                                        ; i64 literal
0003866: fe                                        ; prefix
0003867: 4c                                        ; i64.atomic.rmw8.cmpxchg_u
0003868: 00                                        ; alignment
0003869: 03                                        ; memory offset
000386a: 1a                                        ; drop
000386b: 0b                                        ; end
000385e: 0d                                        ; FIXUP func body size
; function body 397
000386c: 00                                        ; func body size (guess)
000386d: 00                                        ; local decl count
000386e: 41                                        ; i32.const
000386f: 01                                        ; i32 literal
0003870: 42                                        ; i64.const
0003871: 02                                        ; i64 literal
0003872: 42                                        ; i64.const
0003873: 03                                        ; i64 literal
0003874: fe                                        ; prefix
0003875: 4d                                        ; i64.atomic.rmw16.cmpxchg_u
0003876: 01                                        ; alignment
0003877: 03                                        ; memory offset
0003878: 1a                                        ; drop
0003879: 0b                                        ; end
000386c: 0d                                        ; FIXUP func body size
; function body 398
000387a: 00                                        ; func body size (guess)
000387b: 00                                        ; local decl count
000387c: 41                                        ; i32.const
000387d: 01                                        ; i32 literal
000387e: 42                                        ; i64.const
000387f: 02                                        ; i64 literal
0003880: 42                                        ; i64.const
0003881: 03                                        ; i64 literal
0003882: fe                                        ; prefix
0003883: 4e                                        ; i64.atomic.rmw32.cmpxchg_u
0003884: 02                                        ; alignment
0003885: 03                                        ; memory offset
0003886: 1a                                        ; drop
0003887: 0b                                        ; end
000387a: 0d                                        ; FIXUP func body size
; move data: [1ac1, 3888) -> [1ac2, 3889)
0001ac0: c73b                                      ; FIXUP section size
; section "Data" (11)
0003889: 0b                                        ; section code
000388a: 00                                        ; section size (guess)
000388b: 01                                        ; num data segments
; data segment header 0
000388c: 01                                      
000388d: 00                                        ; data segment size
; data segment data 0
000388a: 03                                        ; FIXUP section size
BeginModule(version: 1)
  BeginTypeSection(8)
    OnTypeCount(2)
    OnType(index: 0, params: [], results: [])
    OnType(index: 1, params: [i32], results: [])
  EndTypeSection
  BeginImportSection(14)
    OnImportCount(1)
    OnImport(index: 0, module: "host", field: "print")
    OnImportFunc(import_index: 0, func_index: 0, sig_index: 1)
  EndImportSection
  BeginFunctionSection(401)
    OnFunctionCount(399)
    OnFunction(index: 1, sig_index: 0)
    OnFunction(index: 2, sig_index: 0)
    OnFunction(index: 3, sig_index: 0)
    OnFunction(index: 4, sig_index: 0)
    OnFunction(index: 5, sig_index: 0)
    OnFunction(index: 6, sig_index: 0)
    OnFunction(index: 7, sig_index: 0)
    OnFunction(index: 8, sig_index: 0)
    OnFunction(index: 9, sig_index: 0)
    OnFunction(index: 10, sig_index: 0)
    OnFunction(index: 11, sig_index: 0)
    OnFunction(index: 12, sig_index: 0)
    OnFunction(index: 13, sig_index: 0)
    OnFunction(index: 14, sig_index: 0)
    OnFunction(index: 15, sig_index: 0)
    OnFunction(index: 16, sig_index: 0)
    OnFunction(index: 17, sig_index: 0)
    OnFunction(index: 18, sig_index: 0)
    OnFunction(index: 19, sig_index: 0)
    OnFunction(index: 20, sig_index: 0)
    OnFunction(index: 21, sig_index: 0)
    OnFunction(index: 22, sig_index: 0)
    OnFunction(index: 23, sig_index: 0)
    OnFunction(index: 24, sig_index: 0)
    OnFunction(index: 25, sig_index: 0)
    OnFunction(index: 26, sig_index: 0)
    OnFunction(index: 27, sig_index: 0)
    OnFunction(index: 28, sig_index: 0)
    OnFunction(index: 29, sig_index: 0)
    OnFunction(index: 30, sig_index: 0)
    OnFunction(index: 31, sig_index: 0)
    OnFunction(index: 32, sig_index: 0)
    OnFunction(index: 33, sig_index: 0)
    OnFunction(index: 34, sig_index: 0)
    OnFunction(index: 35, sig_index: 0)
    OnFunction(index: 36, sig_index: 0)
    OnFunction(index: 37, sig_index: 0)
    OnFunction(index: 38, sig_index: 0)
    OnFunction(index: 39, sig_index: 0)
    OnFunction(index: 40, sig_index: 0)
    OnFunction(index: 41, sig_index: 0)
    OnFunction(index: 42, sig_index: 0)
    OnFunction(index: 43, sig_index: 0)
    OnFunction(index: 44, sig_index: 0)
    OnFunction(index: 45, sig_index: 0)
    OnFunction(index: 46, sig_index: 0)
    OnFunction(index: 47, sig_index: 0)
    OnFunction(index: 48, sig_index: 0)
    OnFunction(index: 49, sig_index: 0)
    OnFunction(index: 50, sig_index: 0)
    OnFunction(index: 51, sig_index: 0)
    OnFunction(index: 52, sig_index: 0)
    OnFunction(index: 53, sig_index: 0)
    OnFunction(index: 54, sig_index: 0)
    OnFunction(index: 55, sig_index: 0)
    OnFunction(index: 56, sig_index: 0)
    OnFunction(index: 57, sig_index: 0)
    OnFunction(index: 58, sig_index: 0)
    OnFunction(index: 59, sig_index: 0)
    OnFunction(index: 60, sig_index: 0)
    OnFunction(index: 61, sig_index: 0)
    OnFunction(index: 62, sig_index: 0)
    OnFunction(index: 63, sig_index: 0)
    OnFunction(index: 64, sig_index: 0)
    OnFunction(index: 65, sig_index: 0)
    OnFunction(index: 66, sig_index: 0)
    OnFunction(index: 67, sig_index: 0)
    OnFunction(index: 68, sig_index: 0)
    OnFunction(index: 69, sig_index: 0)
    OnFunction(index: 70, sig_index: 0)
    OnFunction(index: 71, sig_index: 0)
    OnFunction(index: 72, sig_index: 0)
    OnFunction(index: 73, sig_index: 0)
    OnFunction(index: 74, sig_index: 0)
    OnFunction(index: 75, sig_index: 0)
    OnFunction(index: 76, sig_index: 0)
    OnFunction(index: 77, sig_index: 0)
    OnFunction(index: 78, sig_index: 0)
    OnFunction(index: 79, sig_index: 0)
    OnFunction(index: 80, sig_index: 0)
    OnFunction(index: 81, sig_index: 0)
    OnFunction(index: 82, sig_index: 0)
    OnFunction(index: 83, sig_index: 0)
    OnFunction(index: 84, sig_index: 0)
    OnFunction(index: 85, sig_index: 0)
    OnFunction(index: 86, sig_index: 0)
    OnFunction(index: 87, sig_index: 0)
    OnFunction(index: 88, sig_index: 0)
    OnFunction(index: 89, sig_index: 0)
    OnFunction(index: 90, sig_index: 0)
    OnFunction(index: 91, sig_index: 0)
    OnFunction(index: 92, sig_index: 0)
    OnFunction(index: 93, sig_index: 0)
    OnFunction(index: 94, sig_index: 0)
    OnFunction(index: 95, sig_index: 0)
    OnFunction(index: 96, sig_index: 0)
    OnFunction(index: 97, sig_index: 0)
    OnFunction(index: 98, sig_index: 0)
    OnFunction(index: 99, sig_index: 0)
    OnFunction(index: 100, sig_index: 0)
    OnFunction(index: 101, sig_index: 0)
    OnFunction(index: 102, sig_index: 0)
    OnFunction(index: 103, sig_index: 0)
    OnFunction(index: 104, sig_index: 0)
    OnFunction(index: 105, sig_index: 0)
    OnFunction(index: 106, sig_index: 0)
    OnFunction(index: 107, sig_index: 0)
    OnFunction(index: 108, sig_index: 0)
    OnFunction(index: 109, sig_index: 0)
    OnFunction(index: 110, sig_index: 0)
    OnFunction(index: 111, sig_index: 0)
    OnFunction(index: 112, sig_index: 0)
    OnFunction(index: 113, sig_index: 0)
    OnFunction(index: 114, sig_index: 0)
    OnFunction(index: 115, sig_index: 0)
    OnFunction(index: 116, sig_index: 0)
    OnFunction(index: 117, sig_index: 0)
    OnFunction(index: 118, sig_index: 0)
    OnFunction(index: 119, sig_index: 0)
    OnFunction(index: 120, sig_index: 0)
    OnFunction(index: 121, sig_index: 0)
    OnFunction(index: 122, sig_index: 0)
    OnFunction(index: 123, sig_index: 0)
    OnFunction(index: 124, sig_index: 0)
    OnFunction(index: 125, sig_index: 0)
    OnFunction(index: 126, sig_index: 0)
    OnFunction(index: 127, sig_index: 0)
    OnFunction(index: 128, sig_index: 0)
    OnFunction(index: 129, sig_index: 0)
    OnFunction(index: 130, sig_index: 0)
    OnFunction(index: 131, sig_index: 0)
    OnFunction(index: 132, sig_index: 0)
    OnFunction(index: 133, sig_index: 0)
    OnFunction(index: 134, sig_index: 0)
    OnFunction(index: 135, sig_index: 0)
    OnFunction(index: 136, sig_index: 0)
    OnFunction(index: 137, sig_index: 0)
    OnFunction(index: 138, sig_index: 0)
    OnFunction(index: 139, sig_index: 0)
    OnFunction(index: 140, sig_index: 0)
    OnFunction(index: 141, sig_index: 0)
    OnFunction(index: 142, sig_index: 0)
    OnFunction(index: 143, sig_index: 0)
    OnFunction(index: 144, sig_index: 0)
    OnFunction(index: 145, sig_index: 0)
    OnFunction(index: 146, sig_index: 0)
    OnFunction(index: 147, sig_index: 0)
    OnFunction(index: 148, sig_index: 0)
    OnFunction(index: 149, sig_index: 0)
    OnFunction(index: 150, sig_index: 0)
    OnFunction(index: 151, sig_index: 0)
    OnFunction(index: 152, sig_index: 0)
    OnFunction(index: 153, sig_index: 0)
    OnFunction(index: 154, sig_index: 0)
    OnFunction(index: 155, sig_index: 0)
    OnFunction(index: 156, sig_index: 0)
    OnFunction(index: 157, sig_index: 0)
    OnFunction(index: 158, sig_index: 0)
    OnFunction(index: 159, sig_index: 0)
    OnFunction(index: 160, sig_index: 0)
    OnFunction(index: 161, sig_index: 0)
    OnFunction(index: 162, sig_index: 0)
    OnFunction(index: 163, sig_index: 0)
    OnFunction(index: 164, sig_index: 0)
    OnFunction(index: 165, sig_index: 0)
    OnFunction(index: 166, sig_index: 0)
    OnFunction(index: 167, sig_index: 0)
    OnFunction(index: 168, sig_index: 0)
    OnFunction(index: 169, sig_index: 0)
    OnFunction(index: 170, sig_index: 0)
    OnFunction(index: 171, sig_index: 0)
    OnFunction(index: 172, sig_index: 0)
    OnFunction(index: 173, sig_index: 0)
    OnFunction(index: 174, sig_index: 0)
    OnFunction(index: 175, sig_index: 0)
    OnFunction(index: 176, sig_index: 0)
    OnFunction(index: 177, sig_index: 0)
    OnFunction(index: 178, sig_index: 0)
    OnFunction(index: 179, sig_index: 0)
    OnFunction(index: 180, sig_index: 0)
    OnFunction(index: 181, sig_index: 0)
    OnFunction(index: 182, sig_index: 0)
    OnFunction(index: 183, sig_index: 0)
    OnFunction(index: 184, sig_index: 0)
    OnFunction(index: 185, sig_index: 0)
    OnFunction(index: 186, sig_index: 0)
    OnFunction(index: 187, sig_index: 0)
    OnFunction(index: 188, sig_index: 0)
    OnFunction(index: 189, sig_index: 0)
    OnFunction(index: 190, sig_index: 0)
    OnFunction(index: 191, sig_index: 0)
    OnFunction(index: 192, sig_index: 0)
    OnFunction(index: 193, sig_index: 0)
    OnFunction(index: 194, sig_index: 0)
    OnFunction(index: 195, sig_index: 0)
    OnFunction(index: 196, sig_index: 0)
    OnFunction(index: 197, sig_index: 0)
    OnFunction(index: 198, sig_index: 0)
    OnFunction(index: 199, sig_index: 0)
    OnFunction(index: 200, sig_index: 0)
    OnFunction(index: 201, sig_index: 0)
    OnFunction(index: 202, sig_index: 0)
    OnFunction(index: 203, sig_index: 0)
    OnFunction(index: 204, sig_index: 0)
    OnFunction(index: 205, sig_index: 0)
    OnFunction(index: 206, sig_index: 0)
    OnFunction(index: 207, sig_index: 0)
    OnFunction(index: 208, sig_index: 0)
    OnFunction(index: 209, sig_index: 0)
    OnFunction(index: 210, sig_index: 0)
    OnFunction(index: 211, sig_index: 0)
    OnFunction(index: 212, sig_index: 0)
    OnFunction(index: 213, sig_index: 0)
    OnFunction(index: 214, sig_index: 0)
    OnFunction(index: 215, sig_index: 0)
    OnFunction(index: 216, sig_index: 0)
    OnFunction(index: 217, sig_index: 0)
    OnFunction(index: 218, sig_index: 0)
    OnFunction(index: 219, sig_index: 0)
    OnFunction(index: 220, sig_index: 0)
    OnFunction(index: 221, sig_index: 0)
    OnFunction(index: 222, sig_index: 0)
    OnFunction(index: 223, sig_index: 0)
    OnFunction(index: 224, sig_index: 0)
    OnFunction(index: 225, sig_index: 0)
    OnFunction(index: 226, sig_index: 0)
    OnFunction(index: 227, sig_index: 0)
    OnFunction(index: 228, sig_index: 0)
    OnFunction(index: 229, sig_index: 0)
    OnFunction(index: 230, sig_index: 0)
    OnFunction(index: 231, sig_index: 0)
    OnFunction(index: 232, sig_index: 0)
    OnFunction(index: 233, sig_index: 0)
    OnFunction(index: 234, sig_index: 0)
    OnFunction(index: 235, sig_index: 0)
    OnFunction(index: 236, sig_index: 0)
    OnFunction(index: 237, sig_index: 0)
    OnFunction(index: 238, sig_index: 0)
    OnFunction(index: 239, sig_index: 0)
    OnFunction(index: 240, sig_index: 0)
    OnFunction(index: 241, sig_index: 0)
    OnFunction(index: 242, sig_index: 0)
    OnFunction(index: 243, sig_index: 0)
    OnFunction(index: 244, sig_index: 0)
    OnFunction(index: 245, sig_index: 0)
    OnFunction(index: 246, sig_index: 0)
    OnFunction(index: 247, sig_index: 0)
    OnFunction(index: 248, sig_index: 0)
    OnFunction(index: 249, sig_index: 0)
    OnFunction(index: 250, sig_index: 0)
    OnFunction(index: 251, sig_index: 0)
    OnFunction(index: 252, sig_index: 0)
    OnFunction(index: 253, sig_index: 0)
    OnFunction(index: 254, sig_index: 0)
    OnFunction(index: 255, sig_index: 0)
    OnFunction(index: 256, sig_index: 0)
    OnFunction(index: 257, sig_index: 0)
    OnFunction(index: 258, sig_index: 0)
    OnFunction(index: 259, sig_index: 0)
    OnFunction(index: 260, sig_index: 0)
    OnFunction(index: 261, sig_index: 0)
    OnFunction(index: 262, sig_index: 0)
    OnFunction(index: 263, sig_index: 0)
    OnFunction(index: 264, sig_index: 0)
    OnFunction(index: 265, sig_index: 0)
    OnFunction(index: 266, sig_index: 0)
    OnFunction(index: 267, sig_index: 0)
    OnFunction(index: 268, sig_index: 0)
    OnFunction(index: 269, sig_index: 0)
    OnFunction(index: 270, sig_index: 0)
    OnFunction(index: 271, sig_index: 0)
    OnFunction(index: 272, sig_index: 0)
    OnFunction(index: 273, sig_index: 0)
    OnFunction(index: 274, sig_index: 0)
    OnFunction(index: 275, sig_index: 0)
    OnFunction(index: 276, sig_index: 0)
    OnFunction(index: 277, sig_index: 0)
    OnFunction(index: 278, sig_index: 0)
    OnFunction(index: 279, sig_index: 0)
    OnFunction(index: 280, sig_index: 0)
    OnFunction(index: 281, sig_index: 0)
    OnFunction(index: 282, sig_index: 0)
    OnFunction(index: 283, sig_index: 0)
    OnFunction(index: 284, sig_index: 0)
    OnFunction(index: 285, sig_index: 0)
    OnFunction(index: 286, sig_index: 0)
    OnFunction(index: 287, sig_index: 0)
    OnFunction(index: 288, sig_index: 0)
    OnFunction(index: 289, sig_index: 0)
    OnFunction(index: 290, sig_index: 0)
    OnFunction(index: 291, sig_index: 0)
    OnFunction(index: 292, sig_index: 0)
    OnFunction(index: 293, sig_index: 0)
    OnFunction(index: 294, sig_index: 0)
    OnFunction(index: 295, sig_index: 0)
    OnFunction(index: 296, sig_index: 0)
    OnFunction(index: 297, sig_index: 0)
    OnFunction(index: 298, sig_index: 0)
    OnFunction(index: 299, sig_index: 0)
    OnFunction(index: 300, sig_index: 0)
    OnFunction(index: 301, sig_index: 0)
    OnFunction(index: 302, sig_index: 0)
    OnFunction(index: 303, sig_index: 0)
    OnFunction(index: 304, sig_index: 0)
    OnFunction(index: 305, sig_index: 0)
    OnFunction(index: 306, sig_index: 0)
    OnFunction(index: 307, sig_index: 0)
    OnFunction(index: 308, sig_index: 0)
    OnFunction(index: 309, sig_index: 0)
    OnFunction(index: 310, sig_index: 0)
    OnFunction(index: 311, sig_index: 0)
    OnFunction(index: 312, sig_index: 0)
    OnFunction(index: 313, sig_index: 0)
    OnFunction(index: 314, sig_index: 0)
    OnFunction(index: 315, sig_index: 0)
    OnFunction(index: 316, sig_index: 0)
    OnFunction(index: 317, sig_index: 0)
    OnFunction(index: 318, sig_index: 0)
    OnFunction(index: 319, sig_index: 0)
    OnFunction(index: 320, sig_index: 0)
    OnFunction(index: 321, sig_index: 0)
    OnFunction(index: 322, sig_index: 0)
    OnFunction(index: 323, sig_index: 0)
    OnFunction(index: 324, sig_index: 0)
    OnFunction(index: 325, sig_index: 0)
    OnFunction(index: 326, sig_index: 0)
    OnFunction(index: 327, sig_index: 0)
    OnFunction(index: 328, sig_index: 0)
    OnFunction(index: 329, sig_index: 0)
    OnFunction(index: 330, sig_index: 0)
    OnFunction(index: 331, sig_index: 0)
    OnFunction(index: 332, sig_index: 0)
    OnFunction(index: 333, sig_index: 0)
    OnFunction(index: 334, sig_index: 0)
    OnFunction(index: 335, sig_index: 0)
    OnFunction(index: 336, sig_index: 0)
    OnFunction(index: 337, sig_index: 0)
    OnFunction(index: 338, sig_index: 0)
    OnFunction(index: 339, sig_index: 0)
    OnFunction(index: 340, sig_index: 0)
    OnFunction(index: 341, sig_index: 0)
    OnFunction(index: 342, sig_index: 0)
    OnFunction(index: 343, sig_index: 0)
    OnFunction(index: 344, sig_index: 0)
    OnFunction(index: 345, sig_index: 0)
    OnFunction(index: 346, sig_index: 0)
    OnFunction(index: 347, sig_index: 0)
    OnFunction(index: 348, sig_index: 0)
    OnFunction(index: 349, sig_index: 0)
    OnFunction(index: 350, sig_index: 0)
    OnFunction(index: 351, sig_index: 0)
    OnFunction(index: 352, sig_index: 0)
    OnFunction(index: 353, sig_index: 0)
    OnFunction(index: 354, sig_index: 0)
    OnFunction(index: 355, sig_index: 0)
    OnFunction(index: 356, sig_index: 0)
    OnFunction(index: 357, sig_index: 0)
    OnFunction(index: 358, sig_index: 0)
    OnFunction(index: 359, sig_index: 0)
    OnFunction(index: 360, sig_index: 0)
    OnFunction(index: 361, sig_index: 0)
    OnFunction(index: 362, sig_index: 0)
    OnFunction(index: 363, sig_index: 0)
    OnFunction(index: 364, sig_index: 0)
    OnFunction(index: 365, sig_index: 0)
    OnFunction(index: 366, sig_index: 0)
    OnFunction(index: 367, sig_index: 0)
    OnFunction(index: 368, sig_index: 0)
    OnFunction(index: 369, sig_index: 0)
    OnFunction(index: 370, sig_index: 0)
    OnFunction(index: 371, sig_index: 0)
    OnFunction(index: 372, sig_index: 0)
    OnFunction(index: 373, sig_index: 0)
    OnFunction(index: 374, sig_index: 0)
    OnFunction(index: 375, sig_index: 0)
    OnFunction(index: 376, sig_index: 0)
    OnFunction(index: 377, sig_index: 0)
    OnFunction(index: 378, sig_index: 0)
    OnFunction(index: 379, sig_index: 0)
    OnFunction(index: 380, sig_index: 0)
    OnFunction(index: 381, sig_index: 0)
    OnFunction(index: 382, sig_index: 0)
    OnFunction(index: 383, sig_index: 0)
    OnFunction(index: 384, sig_index: 0)
    OnFunction(index: 385, sig_index: 0)
    OnFunction(index: 386, sig_index: 0)
    OnFunction(index: 387, sig_index: 0)
    OnFunction(index: 388, sig_index: 0)
    OnFunction(index: 389, sig_index: 0)
    OnFunction(index: 390, sig_index: 0)
    OnFunction(index: 391, sig_index: 0)
    OnFunction(index: 392, sig_index: 0)
    OnFunction(index: 393, sig_index: 0)
    OnFunction(index: 394, sig_index: 0)
    OnFunction(index: 395, sig_index: 0)
    OnFunction(index: 396, sig_index: 0)
    OnFunction(index: 397, sig_index: 0)
    OnFunction(index: 398, sig_index: 0)
    OnFunction(index: 399, sig_index: 0)
  EndFunctionSection
  BeginTableSection(5)
    OnTableCount(1)
    OnTable(index: 0, elem_type: funcref, initial: 2, max: 2)
  EndTableSection
  BeginMemorySection(4)
    OnMemoryCount(1)
    OnMemory(index: 0, initial: 1, max: 1)
  EndMemorySection
  BeginGlobalSection(6)
    OnGlobalCount(1)
    BeginGlobal(index: 0, type: i32, mutable: true)
    BeginGlobalInitExpr(0)
    OnInitExprI32ConstExpr(index: 0, value: 0)
    EndGlobalInitExpr(0)
    EndGlobal(0)
  EndGlobalSection
  BeginExportSection(6369)
    OnExportCount(398)
    OnExport(index: 0, kind: func, item_index: 2, name: "unreachable")
    OnExport(index: 1, kind: func, item_index: 3, name: "br")
    OnExport(index: 2, kind: func, item_index: 4, name: "br_table")
    OnExport(index: 3, kind: func, item_index: 5, name: "return")
    OnExport(index: 4, kind: func, item_index: 6, name: "call")
    OnExport(index: 5, kind: func, item_index: 7, name: "call_indirect")
    OnExport(index: 6, kind: func, item_index: 8, name: "return_call")
    OnExport(index: 7, kind: func, item_index: 9, name: "return_call_indirect")
    OnExport(index: 8, kind: func, item_index: 10, name: "drop")
    OnExport(index: 9, kind: func, item_index: 11, name: "select")
    OnExport(index: 10, kind: func, item_index: 12, name: "get_local")
    OnExport(index: 11, kind: func, item_index: 13, name: "set_local")
    OnExport(index: 12, kind: func, item_index: 14, name: "tee_local")
    OnExport(index: 13, kind: func, item_index: 15, name: "get_global")
    OnExport(index: 14, kind: func, item_index: 16, name: "set_global")
    OnExport(index: 15, kind: func, item_index: 17, name: "i32.load")
    OnExport(index: 16, kind: func, item_index: 18, name: "i64.load")
    OnExport(index: 17, kind: func, item_index: 19, name: "f32.load")
    OnExport(index: 18, kind: func, item_index: 20, name: "f64.load")
    OnExport(index: 19, kind: func, item_index: 21, name: "i32.load8_s")
    OnExport(index: 20, kind: func, item_index: 22, name: "i32.load8_u")
    OnExport(index: 21, kind: func, item_index: 23, name: "i32.load16_s")
    OnExport(index: 22, kind: func, item_index: 24, name: "i32.load16_u")
    OnExport(index: 23, kind: func, item_index: 25, name: "i64.load8_s")
    OnExport(index: 24, kind: func, item_index: 26, name: "i64.load8_u")
    OnExport(index: 25, kind: func, item_index: 27, name: "i64.load16_s")
    OnExport(index: 26, kind: func, item_index: 28, name: "i64.load16_u")
    OnExport(index: 27, kind: func, item_index: 29, name: "i64.load32_s")
    OnExport(index: 28, kind: func, item_index: 30, name: "i64.load32_u")
    OnExport(index: 29, kind: func, item_index: 31, name: "i32.store")
    OnExport(index: 30, kind: func, item_index: 32, name: "i64.store")
    OnExport(index: 31, kind: func, item_index: 33, name: "f32.store")
    OnExport(index: 32, kind: func, item_index: 34, name: "f64.store")
    OnExport(index: 33, kind: func, item_index: 35, name: "i32.store8")
    OnExport(index: 34, kind: func, item_index: 36, name: "i32.store16")
    OnExport(index: 35, kind: func, item_index: 37, name: "i64.store8")
    OnExport(index: 36, kind: func, item_index: 38, name: "i64.store16")
    OnExport(index: 37, kind: func, item_index: 39, name: "i64.store32")
    OnExport(index: 38, kind: func, item_index: 40, name: "current_memory")
    OnExport(index: 39, kind: func, item_index: 41, name: "grow_memory")
    OnExport(index: 40, kind: func, item_index: 42, name: "i32.const")
    OnExport(index: 41, kind: func, item_index: 43, name: "i64.const")
    OnExport(index: 42, kind: func, item_index: 44, name: "f32.const")
    OnExport(index: 43, kind: func, item_index: 45, name: "f64.const")
    OnExport(index: 44, kind: func, item_index: 46, name: "i32.eqz")
    OnExport(index: 45, kind: func, item_index: 47, name: "i32.eq")
    OnExport(index: 46, kind: func, item_index: 48, name: "i32.ne")
    OnExport(index: 47, kind: func, item_index: 49, name: "i32.lt_s")
    OnExport(index: 48, kind: func, item_index: 50, name: "i32.lt_u")
    OnExport(index: 49, kind: func, item_index: 51, name: "i32.gt_s")
    OnExport(index: 50, kind: func, item_index: 52, name: "i32.gt_u")
    OnExport(index: 51, kind: func, item_index: 53, name: "i32.le_s")
    OnExport(index: 52, kind: func, item_index: 54, name: "i32.le_u")
    OnExport(index: 53, kind: func, item_index: 55, name: "i32.ge_s")
    OnExport(index: 54, kind: func, item_index: 56, name: "i32.ge_u")
    OnExport(index: 55, kind: func, item_index: 57, name: "i64.eqz")
    OnExport(index: 56, kind: func, item_index: 58, name: "i64.eq")
    OnExport(index: 57, kind: func, item_index: 59, name: "i64.ne")
    OnExport(index: 58, kind: func, item_index: 60, name: "i64.lt_s")
    OnExport(index: 59, kind: func, item_index: 61, name: "i64.lt_u")
    OnExport(index: 60, kind: func, item_index: 62, name: "i64.gt_s")
    OnExport(index: 61, kind: func, item_index: 63, name: "i64.gt_u")
    OnExport(index: 62, kind: func, item_index: 64, name: "i64.le_s")
    OnExport(index: 63, kind: func, item_index: 65, name: "i64.le_u")
    OnExport(index: 64, kind: func, item_index: 66, name: "i64.ge_s")
    OnExport(index: 65, kind: func, item_index: 67, name: "i64.ge_u")
    OnExport(index: 66, kind: func, item_index: 68, name: "f32.eq")
    OnExport(index: 67, kind: func, item_index: 69, name: "f32.ne")
    OnExport(index: 68, kind: func, item_index: 70, name: "f32.lt")
    OnExport(index: 69, kind: func, item_index: 71, name: "f32.gt")
    OnExport(index: 70, kind: func, item_index: 72, name: "f32.le")
    OnExport(index: 71, kind: func, item_index: 73, name: "f32.ge")
    OnExport(index: 72, kind: func, item_index: 74, name: "f64.eq")
    OnExport(index: 73, kind: func, item_index: 75, name: "f64.ne")
    OnExport(index: 74, kind: func, item_index: 76, name: "f64.lt")
    OnExport(index: 75, kind: func, item_index: 77, name: "f64.gt")
    OnExport(index: 76, kind: func, item_index: 78, name: "f64.le")
    OnExport(index: 77, kind: func, item_index: 79, name: "f64.ge")
    OnExport(index: 78, kind: func, item_index: 80, name: "i32.clz")
    OnExport(index: 79, kind: func, item_index: 81, name: "i32.ctz")
    OnExport(index: 80, kind: func, item_index: 82, name: "i32.popcnt")
    OnExport(index: 81, kind: func, item_index: 83, name: "i32.add")
    OnExport(index: 82, kind: func, item_index: 84, name: "i32.sub")
    OnExport(index: 83, kind: func, item_index: 85, name: "i32.mul")
    OnExport(index: 84, kind: func, item_index: 86, name: "i32.div_s")
    OnExport(index: 85, kind: func, item_index: 87, name: "i32.div_u")
    OnExport(index: 86, kind: func, item_index: 88, name: "i32.rem_s")
    OnExport(index: 87, kind: func, item_index: 89, name: "i32.rem_u")
    OnExport(index: 88, kind: func, item_index: 90, name: "i32.and")
    OnExport(index: 89, kind: func, item_index: 91, name: "i32.or")
    OnExport(index: 90, kind: func, item_index: 92, name: "i32.xor")
    OnExport(index: 91, kind: func, item_index: 93, name: "i32.shl")
    OnExport(index: 92, kind: func, item_index: 94, name: "i32.shr_s")
    OnExport(index: 93, kind: func, item_index: 95, name: "i32.shr_u")
    OnExport(index: 94, kind: func, item_index: 96, name: "i32.rotl")
    OnExport(index: 95, kind: func, item_index: 97, name: "i32.rotr")
    OnExport(index: 96, kind: func, item_index: 98, name: "i64.clz")
    OnExport(index: 97, kind: func, item_index: 99, name: "i64.ctz")
    OnExport(index: 98, kind: func, item_index: 100, name: "i64.popcnt")
    OnExport(index: 99, kind: func, item_index: 101, name: "i64.add")
    OnExport(index: 100, kind: func, item_index: 102, name: "i64.sub")
    OnExport(index: 101, kind: func, item_index: 103, name: "i64.mul")
    OnExport(index: 102, kind: func, item_index: 104, name: "i64.div_s")
    OnExport(index: 103, kind: func, item_index: 105, name: "i64.div_u")
    OnExport(index: 104, kind: func, item_index: 106, name: "i64.rem_s")
    OnExport(index: 105, kind: func, item_index: 107, name: "i64.rem_u")
    OnExport(index: 106, kind: func, item_index: 108, name: "i64.and")
    OnExport(index: 107, kind: func, item_index: 109, name: "i64.or")
    OnExport(index: 108, kind: func, item_index: 110, name: "i64.xor")
    OnExport(index: 109, kind: func, item_index: 111, name: "i64.shl")
    OnExport(index: 110, kind: func, item_index: 112, name: "i64.shr_s")
    OnExport(index: 111, kind: func, item_index: 113, name: "i64.shr_u")
    OnExport(index: 112, kind: func, item_index: 114, name: "i64.rotl")
    OnExport(index: 113, kind: func, item_index: 115, name: "i64.rotr")
    OnExport(index: 114, kind: func, item_index: 116, name: "f32.abs")
    OnExport(index: 115, kind: func, item_index: 117, name: "f32.neg")
    OnExport(index: 116, kind: func, item_index: 118, name: "f32.ceil")
    OnExport(index: 117, kind: func, item_index: 119, name: "f32.floor")
    OnExport(index: 118, kind: func, item_index: 120, name: "f32.trunc")
    OnExport(index: 119, kind: func, item_index: 121, name: "f32.nearest")
    OnExport(index: 120, kind: func, item_index: 122, name: "f32.sqrt")
    OnExport(index: 121, kind: func, item_index: 123, name: "f32.add")
    OnExport(index: 122, kind: func, item_index: 124, name: "f32.sub")
    OnExport(index: 123, kind: func, item_index: 125, name: "f32.mul")
    OnExport(index: 124, kind: func, item_index: 126, name: "f32.div")
    OnExport(index: 125, kind: func, item_index: 127, name: "f32.min")
    OnExport(index: 126, kind: func, item_index: 128, name: "f32.max")
    OnExport(index: 127, kind: func, item_index: 129, name: "f32.copysign")
    OnExport(index: 128, kind: func, item_index: 130, name: "f64.abs")
    OnExport(index: 129, kind: func, item_index: 131, name: "f64.neg")
    OnExport(index: 130, kind: func, item_index: 132, name: "f64.ceil")
    OnExport(index: 131, kind: func, item_index: 133, name: "f64.floor")
    OnExport(index: 132, kind: func, item_index: 134, name: "f64.trunc")
    OnExport(index: 133, kind: func, item_index: 135, name: "f64.nearest")
    OnExport(index: 134, kind: func, item_index: 136, name: "f64.sqrt")
    OnExport(index: 135, kind: func, item_index: 137, name: "f64.add")
    OnExport(index: 136, kind: func, item_index: 138, name: "f64.sub")
    OnExport(index: 137, kind: func, item_index: 139, name: "f64.mul")
    OnExport(index: 138, kind: func, item_index: 140, name: "f64.div")
    OnExport(index: 139, kind: func, item_index: 141, name: "f64.min")
    OnExport(index: 140, kind: func, item_index: 142, name: "f64.max")
    OnExport(index: 141, kind: func, item_index: 143, name: "f64.copysign")
    OnExport(index: 142, kind: func, item_index: 144, name: "i32.wrap/i64")
    OnExport(index: 143, kind: func, item_index: 145, name: "i32.trunc_s/f32")
    OnExport(index: 144, kind: func, item_index: 146, name: "i32.trunc_u/f32")
    OnExport(index: 145, kind: func, item_index: 147, name: "i32.trunc_s/f64")
    OnExport(index: 146, kind: func, item_index: 148, name: "i32.trunc_u/f64")
    OnExport(index: 147, kind: func, item_index: 149, name: "i64.extend_s/i32")
    OnExport(index: 148, kind: func, item_index: 150, name: "i64.extend_u/i32")
    OnExport(index: 149, kind: func, item_index: 151, name: "i64.trunc_s/f32")
    OnExport(index: 150, kind: func, item_index: 152, name: "i64.trunc_u/f32")
    OnExport(index: 151, kind: func, item_index: 153, name: "i64.trunc_s/f64")
    OnExport(index: 152, kind: func, item_index: 154, name: "i64.trunc_u/f64")
    OnExport(index: 153, kind: func, item_index: 155, name: "f32.convert_s/i32")
    OnExport(index: 154, kind: func, item_index: 156, name: "f32.convert_u/i32")
    OnExport(index: 155, kind: func, item_index: 157, name: "f32.convert_s/i64")
    OnExport(index: 156, kind: func, item_index: 158, name: "f32.convert_u/i64")
    OnExport(index: 157, kind: func, item_index: 159, name: "f32.demote/f64")
    OnExport(index: 158, kind: func, item_index: 160, name: "f64.convert_s/i32")
    OnExport(index: 159, kind: func, item_index: 161, name: "f64.convert_u/i32")
    OnExport(index: 160, kind: func, item_index: 162, name: "f64.convert_s/i64")
    OnExport(index: 161, kind: func, item_index: 163, name: "f64.convert_u/i64")
    OnExport(index: 162, kind: func, item_index: 164, name: "f64.promote/f32")
    OnExport(index: 163, kind: func, item_index: 165, name: "i32.reinterpret/f32")
    OnExport(index: 164, kind: func, item_index: 166, name: "f32.reinterpret/i32")
    OnExport(index: 165, kind: func, item_index: 167, name: "i64.reinterpret/f64")
    OnExport(index: 166, kind: func, item_index: 168, name: "f64.reinterpret/i64")
    OnExport(index: 167, kind: func, item_index: 169, name: "i32.extend8_s")
    OnExport(index: 168, kind: func, item_index: 170, name: "i32.extend16_s")
    OnExport(index: 169, kind: func, item_index: 171, name: "i64.extend8_s")
    OnExport(index: 170, kind: func, item_index: 172, name: "i64.extend16_s")
    OnExport(index: 171, kind: func, item_index: 173, name: "i64.extend32_s")
    OnExport(index: 172, kind: func, item_index: 174, name: "alloca")
    OnExport(index: 173, kind: func, item_index: 175, name: "br_unless")
    OnExport(index: 174, kind: func, item_index: 176, name: "call_host")
    OnExport(index: 175, kind: func, item_index: 177, name: "data")
    OnExport(index: 176, kind: func, item_index: 178, name: "drop_keep")
    OnExport(index: 177, kind: func, item_index: 179, name: "i32.trunc_s:sat/f32")
    OnExport(index: 178, kind: func, item_index: 180, name: "i32.trunc_u:sat/f32")
    OnExport(index: 179, kind: func, item_index: 181, name: "i32.trunc_s:sat/f64")
    OnExport(index: 180, kind: func, item_index: 182, name: "i32.trunc_u:sat/f64")
    OnExport(index: 181, kind: func, item_index: 183, name: "i64.trunc_s:sat/f32")
    OnExport(index: 182, kind: func, item_index: 184, name: "i64.trunc_u:sat/f32")
    OnExport(index: 183, kind: func, item_index: 185, name: "i64.trunc_s:sat/f64")
    OnExport(index: 184, kind: func, item_index: 186, name: "i64.trunc_u:sat/f64")
    OnExport(index: 185, kind: func, item_index: 187, name: "memory.init")
    OnExport(index: 186, kind: func, item_index: 188, name: "data.drop")
    OnExport(index: 187, kind: func, item_index: 189, name: "memory.copy")
    OnExport(index: 188, kind: func, item_index: 190, name: "memory.fill")
    OnExport(index: 189, kind: func, item_index: 191, name: "table.init")
    OnExport(index: 190, kind: func, item_index: 192, name: "elem.drop")
    OnExport(index: 191, kind: func, item_index: 193, name: "table.copy")
    OnExport(index: 192, kind: func, item_index: 194, name: "v128.load")
    OnExport(index: 193, kind: func, item_index: 195, name: "v128.store")
    OnExport(index: 194, kind: func, item_index: 196, name: "v128.const")
    OnExport(index: 195, kind: func, item_index: 197, name: "v8x16.shuffle")
    OnExport(index: 196, kind: func, item_index: 198, name: "i8x16.splat")
    OnExport(index: 197, kind: func, item_index: 199, name: "i8x16.extract_lane_s")
    OnExport(index: 198, kind: func, item_index: 200, name: "i8x16.extract_lane_u")
    OnExport(index: 199, kind: func, item_index: 201, name: "i8x16.replace_lane")
    OnExport(index: 200, kind: func, item_index: 202, name: "i16x8.splat")
    OnExport(index: 201, kind: func, item_index: 203, name: "i16x8.extract_lane_s")
    OnExport(index: 202, kind: func, item_index: 204, name: "i16x8.extract_lane_u")
    OnExport(index: 203, kind: func, item_index: 205, name: "i16x8.replace_lane")
    OnExport(index: 204, kind: func, item_index: 206, name: "i32x4.splat")
    OnExport(index: 205, kind: func, item_index: 207, name: "i32x4.extract_lane")
    OnExport(index: 206, kind: func, item_index: 208, name: "i32x4.replace_lane")
    OnExport(index: 207, kind: func, item_index: 209, name: "i64x2.splat")
    OnExport(index: 208, kind: func, item_index: 210, name: "i64x2.extract_lane")
    OnExport(index: 209, kind: func, item_index: 211, name: "i64x2.replace_lane")
    OnExport(index: 210, kind: func, item_index: 212, name: "f32x4.splat")
    OnExport(index: 211, kind: func, item_index: 213, name: "f32x4.extract_lane")
    OnExport(index: 212, kind: func, item_index: 214, name: "f32x4.replace_lane")
    OnExport(index: 213, kind: func, item_index: 215, name: "f64x2.splat")
    OnExport(index: 214, kind: func, item_index: 216, name: "f64x2.extract_lane")
    OnExport(index: 215, kind: func, item_index: 217, name: "f64x2.replace_lane")
    OnExport(index: 216, kind: func, item_index: 218, name: "i8x16.eq")
    OnExport(index: 217, kind: func, item_index: 219, name: "i8x16.ne")
    OnExport(index: 218, kind: func, item_index: 220, name: "i8x16.lt_s")
    OnExport(index: 219, kind: func, item_index: 221, name: "i8x16.lt_u")
    OnExport(index: 220, kind: func, item_index: 222, name: "i8x16.gt_s")
    OnExport(index: 221, kind: func, item_index: 223, name: "i8x16.gt_u")
    OnExport(index: 222, kind: func, item_index: 224, name: "i8x16.le_s")
    OnExport(index: 223, kind: func, item_index: 225, name: "i8x16.le_u")
    OnExport(index: 224, kind: func, item_index: 226, name: "i8x16.ge_s")
    OnExport(index: 225, kind: func, item_index: 227, name: "i8x16.ge_u")
    OnExport(index: 226, kind: func, item_index: 228, name: "i16x8.eq")
    OnExport(index: 227, kind: func, item_index: 229, name: "i16x8.ne")
    OnExport(index: 228, kind: func, item_index: 230, name: "i16x8.lt_s")
    OnExport(index: 229, kind: func, item_index: 231, name: "i16x8.lt_u")
    OnExport(index: 230, kind: func, item_index: 232, name: "i16x8.gt_s")
    OnExport(index: 231, kind: func, item_index: 233, name: "i16x8.gt_u")
    OnExport(index: 232, kind: func, item_index: 234, name: "i16x8.le_s")
    OnExport(index: 233, kind: func, item_index: 235, name: "i16x8.le_u")
    OnExport(index: 234, kind: func, item_index: 236, name: "i16x8.ge_s")
    OnExport(index: 235, kind: func, item_index: 237, name: "i16x8.ge_u")
    OnExport(index: 236, kind: func, item_index: 238, name: "i32x4.eq")
    OnExport(index: 237, kind: func, item_index: 239, name: "i32x4.ne")
    OnExport(index: 238, kind: func, item_index: 240, name: "i32x4.lt_s")
    OnExport(index: 239, kind: func, item_index: 241, name: "i32x4.lt_u")
    OnExport(index: 240, kind: func, item_index: 242, name: "i32x4.gt_s")
    OnExport(index: 241, kind: func, item_index: 243, name: "i32x4.gt_u")
    OnExport(index: 242, kind: func, item_index: 244, name: "i32x4.le_s")
    OnExport(index: 243, kind: func, item_index: 245, name: "i32x4.le_u")
    OnExport(index: 244, kind: func, item_index: 246, name: "i32x4.ge_s")
    OnExport(index: 245, kind: func, item_index: 247, name: "i32x4.ge_u")
    OnExport(index: 246, kind: func, item_index: 248, name: "f32x4.eq")
    OnExport(index: 247, kind: func, item_index: 249, name: "f32x4.ne")
    OnExport(index: 248, kind: func, item_index: 250, name: "f32x4.lt")
    OnExport(index: 249, kind: func, item_index: 251, name: "f32x4.gt")
    OnExport(index: 250, kind: func, item_index: 252, name: "f32x4.le")
    OnExport(index: 251, kind: func, item_index: 253, name: "f32x4.ge")
    OnExport(index: 252, kind: func, item_index: 254, name: "f64x2.eq")
    OnExport(index: 253, kind: func, item_index: 255, name: "f64x2.ne")
    OnExport(index: 254, kind: func, item_index: 256, name: "f64x2.lt")
    OnExport(index: 255, kind: func, item_index: 257, name: "f64x2.gt")
    OnExport(index: 256, kind: func, item_index: 258, name: "f64x2.le")
    OnExport(index: 257, kind: func, item_index: 259, name: "f64x2.ge")
    OnExport(index: 258, kind: func, item_index: 260, name: "v128.not")
    OnExport(index: 259, kind: func, item_index: 261, name: "v128.and")
    OnExport(index: 260, kind: func, item_index: 262, name: "v128.or")
    OnExport(index: 261, kind: func, item_index: 263, name: "v128.xor")
    OnExport(index: 262, kind: func, item_index: 264, name: "v128.bitselect")
    OnExport(index: 263, kind: func, item_index: 265, name: "i8x16.neg")
    OnExport(index: 264, kind: func, item_index: 266, name: "i8x16.any_true")
    OnExport(index: 265, kind: func, item_index: 267, name: "i8x16.all_true")
    OnExport(index: 266, kind: func, item_index: 268, name: "i8x16.shl")
    OnExport(index: 267, kind: func, item_index: 269, name: "i8x16.shr_s")
    OnExport(index: 268, kind: func, item_index: 270, name: "i8x16.shr_u")
    OnExport(index: 269, kind: func, item_index: 271, name: "i8x16.add")
    OnExport(index: 270, kind: func, item_index: 272, name: "i8x16.add_saturate_s")
    OnExport(index: 271, kind: func, item_index: 273, name: "i8x16.add_saturate_u")
    OnExport(index: 272, kind: func, item_index: 274, name: "i8x16.sub")
    OnExport(index: 273, kind: func, item_index: 275, name: "i8x16.sub_saturate_s")
    OnExport(index: 274, kind: func, item_index: 276, name: "i8x16.sub_saturate_u")
    OnExport(index: 275, kind: func, item_index: 277, name: "i8x16.mul")
    OnExport(index: 276, kind: func, item_index: 278, name: "i16x8.neg")
    OnExport(index: 277, kind: func, item_index: 279, name: "i16x8.any_true")
    OnExport(index: 278, kind: func, item_index: 280, name: "i16x8.all_true")
    OnExport(index: 279, kind: func, item_index: 281, name: "i16x8.shl")
    OnExport(index: 280, kind: func, item_index: 282, name: "i16x8.shr_s")
    OnExport(index: 281, kind: func, item_index: 283, name: "i16x8.shr_u")
    OnExport(index: 282, kind: func, item_index: 284, name: "i16x8.add")
    OnExport(index: 283, kind: func, item_index: 285, name: "i16x8.add_saturate_s")
    OnExport(index: 284, kind: func, item_index: 286, name: "i16x8.add_saturate_u")
    OnExport(index: 285, kind: func, item_index: 287, name: "i16x8.sub")
    OnExport(index: 286, kind: func, item_index: 288, name: "i16x8.sub_saturate_s")
    OnExport(index: 287, kind: func, item_index: 289, name: "i16x8.sub_saturate_u")
    OnExport(index: 288, kind: func, item_index: 290, name: "i16x8.mul")
    OnExport(index: 289, kind: func, item_index: 291, name: "i32x4.neg")
    OnExport(index: 290, kind: func, item_index: 292, name: "i32x4.any_true")
    OnExport(index: 291, kind: func, item_index: 293, name: "i32x4.all_true")
    OnExport(index: 292, kind: func, item_index: 294, name: "i32x4.shl")
    OnExport(index: 293, kind: func, item_index: 295, name: "i32x4.shr_s")
    OnExport(index: 294, kind: func, item_index: 296, name: "i32x4.shr_u")
    OnExport(index: 295, kind: func, item_index: 297, name: "i32x4.add")
    OnExport(index: 296, kind: func, item_index: 298, name: "i32x4.sub")
    OnExport(index: 297, kind: func, item_index: 299, name: "i32x4.mul")
    OnExport(index: 298, kind: func, item_index: 300, name: "i64x2.neg")
    OnExport(index: 299, kind: func, item_index: 301, name: "i64x2.any_true")
    OnExport(index: 300, kind: func, item_index: 302, name: "i64x2.all_true")
    OnExport(index: 301, kind: func, item_index: 303, name: "i64x2.shl")
    OnExport(index: 302, kind: func, item_index: 304, name: "i64x2.shr_s")
    OnExport(index: 303, kind: func, item_index: 305, name: "i64x2.shr_u")
    OnExport(index: 304, kind: func, item_index: 306, name: "i64x2.add")
    OnExport(index: 305, kind: func, item_index: 307, name: "i64x2.sub")
    OnExport(index: 306, kind: func, item_index: 308, name: "f32x4.abs")
    OnExport(index: 307, kind: func, item_index: 309, name: "f32x4.neg")
    OnExport(index: 308, kind: func, item_index: 310, name: "f32x4.sqrt")
    OnExport(index: 309, kind: func, item_index: 311, name: "f32x4.add")
    OnExport(index: 310, kind: func, item_index: 312, name: "f32x4.sub")
    OnExport(index: 311, kind: func, item_index: 313, name: "f32x4.mul")
    OnExport(index: 312, kind: func, item_index: 314, name: "f32x4.div")
    OnExport(index: 313, kind: func, item_index: 315, name: "f32x4.min")
    OnExport(index: 314, kind: func, item_index: 316, name: "f32x4.max")
    OnExport(index: 315, kind: func, item_index: 317, name: "f64x2.abs")
    OnExport(index: 316, kind: func, item_index: 318, name: "f64x2.neg")
    OnExport(index: 317, kind: func, item_index: 319, name: "f64x2.sqrt")
    OnExport(index: 318, kind: func, item_index: 320, name: "f64x2.add")
    OnExport(index: 319, kind: func, item_index: 321, name: "f64x2.sub")
    OnExport(index: 320, kind: func, item_index: 322, name: "f64x2.mul")
    OnExport(index: 321, kind: func, item_index: 323, name: "f64x2.div")
    OnExport(index: 322, kind: func, item_index: 324, name: "f64x2.min")
    OnExport(index: 323, kind: func, item_index: 325, name: "f64x2.max")
    OnExport(index: 324, kind: func, item_index: 326, name: "i32x4.trunc_sat_f32x4_s")
    OnExport(index: 325, kind: func, item_index: 327, name: "i32x4.trunc_sat_f32x4_u")
    OnExport(index: 326, kind: func, item_index: 328, name: "i64x2.trunc_sat_f64x2_s")
    OnExport(index: 327, kind: func, item_index: 329, name: "i64x2.trunc_sat_f64x2_u")
    OnExport(index: 328, kind: func, item_index: 330, name: "f32x4.convert_i32x4_s")
    OnExport(index: 329, kind: func, item_index: 331, name: "f32x4.convert_i32x4_u")
    OnExport(index: 330, kind: func, item_index: 332, name: "f64x2.convert_i64x2_s")
    OnExport(index: 331, kind: func, item_index: 333, name: "f64x2.convert_i64x2_u")
    OnExport(index: 332, kind: func, item_index: 334, name: "atomic.notify")
    OnExport(index: 333, kind: func, item_index: 335, name: "i32.atomic.wait")
    OnExport(index: 334, kind: func, item_index: 336, name: "i64.atomic.wait")
    OnExport(index: 335, kind: func, item_index: 337, name: "i32.atomic.load")
    OnExport(index: 336, kind: func, item_index: 338, name: "i64.atomic.load")
    OnExport(index: 337, kind: func, item_index: 339, name: "i32.atomic.load8_u")
    OnExport(index: 338, kind: func, item_index: 340, name: "i32.atomic.load16_u")
    OnExport(index: 339, kind: func, item_index: 341, name: "i64.atomic.load8_u")
    OnExport(index: 340, kind: func, item_index: 342, name: "i64.atomic.load16_u")
    OnExport(index: 341, kind: func, item_index: 343, name: "i64.atomic.load32_u")
    OnExport(index: 342, kind: func, item_index: 344, name: "i32.atomic.store")
    OnExport(index: 343, kind: func, item_index: 345, name: "i64.atomic.store")
    OnExport(index: 344, kind: func, item_index: 346, name: "i32.atomic.store8")
    OnExport(index: 345, kind: func, item_index: 347, name: "i32.atomic.store16")
    OnExport(index: 346, kind: func, item_index: 348, name: "i64.atomic.store8")
    OnExport(index: 347, kind: func, item_index: 349, name: "i64.atomic.store16")
    OnExport(index: 348, kind: func, item_index: 350, name: "i64.atomic.store32")
    OnExport(index: 349, kind: func, item_index: 351, name: "i32.atomic.rmw.add")
    OnExport(index: 350, kind: func, item_index: 352, name: "i64.atomic.rmw.add")
    OnExport(index: 351, kind: func, item_index: 353, name: "i32.atomic.rmw8.add_u")
    OnExport(index: 352, kind: func, item_index: 354, name: "i32.atomic.rmw16.add_u")
    OnExport(index: 353, kind: func, item_index: 355, name: "i64.atomic.rmw8.add_u")
    OnExport(index: 354, kind: func, item_index: 356, name: "i64.atomic.rmw16.add_u")
    OnExport(index: 355, kind: func, item_index: 357, name: "i64.atomic.rmw32.add_u")
    OnExport(index: 356, kind: func, item_index: 358, name: "i32.atomic.rmw.sub")
    OnExport(index: 357, kind: func, item_index: 359, name: "i64.atomic.rmw.sub")
    OnExport(index: 358, kind: func, item_index: 360, name: "i32.atomic.rmw8.sub_u")
    OnExport(index: 359, kind: func, item_index: 361, name: "i32.atomic.rmw16.sub_u")
    OnExport(index: 360, kind: func, item_index: 362, name: "i64.atomic.rmw8.sub_u")
    OnExport(index: 361, kind: func, item_index: 363, name: "i64.atomic.rmw16.sub_u")
    OnExport(index: 362, kind: func, item_index: 364, name: "i64.atomic.rmw32.sub_u")
    OnExport(index: 363, kind: func, item_index: 365, name: "i32.atomic.rmw.and")
    OnExport(index: 364, kind: func, item_index: 366, name: "i64.atomic.rmw.and")
    OnExport(index: 365, kind: func, item_index: 367, name: "i32.atomic.rmw8.and_u")
    OnExport(index: 366, kind: func, item_index: 368, name: "i32.atomic.rmw16.and_u")
    OnExport(index: 367, kind: func, item_index: 369, name: "i64.atomic.rmw8.and_u")
    OnExport(index: 368, kind: func, item_index: 370, name: "i64.atomic.rmw16.and_u")
    OnExport(index: 369, kind: func, item_index: 371, name: "i64.atomic.rmw32.and_u")
    OnExport(index: 370, kind: func, item_index: 372, name: "i32.atomic.rmw.or")
    OnExport(index: 371, kind: func, item_index: 373, name: "i64.atomic.rmw.or")
    OnExport(index: 372, kind: func, item_index: 374, name: "i32.atomic.rmw8.or_u")
    OnExport(index: 373, kind: func, item_index: 375, name: "i32.atomic.rmw16.or_u")
    OnExport(index: 374, kind: func, item_index: 376, name: "i64.atomic.rmw8.or_u")
    OnExport(index: 375, kind: func, item_index: 377, name: "i64.atomic.rmw16.or_u")
    OnExport(index: 376, kind: func, item_index: 378, name: "i64.atomic.rmw32.or_u")
    OnExport(index: 377, kind: func, item_index: 379, name: "i32.atomic.rmw.xor")
    OnExport(index: 378, kind: func, item_index: 380, name: "i64.atomic.rmw.xor")
    OnExport(index: 379, kind: func, item_index: 381, name: "i32.atomic.rmw8.xor_u")
    OnExport(index: 380, kind: func, item_index: 382, name: "i32.atomic.rmw16.xor_u")
    OnExport(index: 381, kind: func, item_index: 383, name: "i64.atomic.rmw8.xor_u")
    OnExport(index: 382, kind: func, item_index: 384, name: "i64.atomic.rmw16.xor_u")
    OnExport(index: 383, kind: func, item_index: 385, name: "i64.atomic.rmw32.xor_u")
    OnExport(index: 384, kind: func, item_index: 386, name: "i32.atomic.rmw.xchg")
    OnExport(index: 385, kind: func, item_index: 387, name: "i64.atomic.rmw.xchg")
    OnExport(index: 386, kind: func, item_index: 388, name: "i32.atomic.rmw8.xchg_u")
    OnExport(index: 387, kind: func, item_index: 389, name: "i32.atomic.rmw16.xchg_u")
    OnExport(index: 388, kind: func, item_index: 390, name: "i64.atomic.rmw8.xchg_u")
    OnExport(index: 389, kind: func, item_index: 391, name: "i64.atomic.rmw16.xchg_u")
    OnExport(index: 390, kind: func, item_index: 392, name: "i64.atomic.rmw32.xchg_u")
    OnExport(index: 391, kind: func, item_index: 393, name: "i32.atomic.rmw.cmpxchg")
    OnExport(index: 392, kind: func, item_index: 394, name: "i64.atomic.rmw.cmpxchg")
    OnExport(index: 393, kind: func, item_index: 395, name: "i32.atomic.rmw8.cmpxchg_u")
    OnExport(index: 394, kind: func, item_index: 396, name: "i32.atomic.rmw16.cmpxchg_u")
    OnExport(index: 395, kind: func, item_index: 397, name: "i64.atomic.rmw8.cmpxchg_u")
    OnExport(index: 396, kind: func, item_index: 398, name: "i64.atomic.rmw16.cmpxchg_u")
    OnExport(index: 397, kind: func, item_index: 399, name: "i64.atomic.rmw32.cmpxchg_u")
  EndExportSection
  BeginElemSection(11)
    OnElemSegmentCount(2)
    BeginElemSegment(index: 0, table_index: 0, passive: false, elem_type: funcref)
    BeginElemSegmentInitExpr(0)
    OnInitExprI32ConstExpr(index: 0, value: 0)
    EndElemSegmentInitExpr(0)
    OnElemSegmentElemExprCount(index: 0, count: 2)
    OnElemSegmentElemExpr_RefFunc(index: 0, func_index: 1)
    OnElemSegmentElemExpr_RefFunc(index: 0, func_index: 1)
    EndElemSegment(0)
    BeginElemSegment(index: 1, table_index: 0, passive: true, elem_type: funcref)
    OnElemSegmentElemExprCount(index: 1, count: 0)
    EndElemSegment(1)
  EndElemSection
  BeginDataCountSection(1)
    OnDataCount(1)
  EndDataCountSection
  BeginCodeSection(7623)
    OnFunctionBodyCount(399)
    BeginFunctionBody(1, size:2)
    OnLocalDeclCount(0)
    EndFunctionBody(1)
    BeginFunctionBody(2, size:3)
    OnLocalDeclCount(0)
    OnUnreachableExpr
    EndFunctionBody(2)
    BeginFunctionBody(3, size:4)
    OnLocalDeclCount(0)
    OnBrExpr(depth: 0)
    EndFunctionBody(3)
    BeginFunctionBody(4, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnBrTableExpr(num_targets: 0, depths: [], default: 0)
    EndFunctionBody(4)
    BeginFunctionBody(5, size:3)
    OnLocalDeclCount(0)
    OnReturnExpr
    EndFunctionBody(5)
    BeginFunctionBody(6, size:4)
    OnLocalDeclCount(0)
    OnCallExpr(func_index: 1)
    EndFunctionBody(6)
    BeginFunctionBody(7, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnCallIndirectExpr(sig_index: 0, table_index: 0)
    EndFunctionBody(7)
    BeginFunctionBody(8, size:4)
    OnLocalDeclCount(0)
    OnReturnCallExpr(func_index: 1)
    EndFunctionBody(8)
    BeginFunctionBody(9, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnReturnCallIndirectExpr(sig_index: 0, table_index: 0)
    EndFunctionBody(9)
    BeginFunctionBody(10, size:5)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnDropExpr
    EndFunctionBody(10)
    BeginFunctionBody(11, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnSelectExpr
    OnDropExpr
    EndFunctionBody(11)
    BeginFunctionBody(12, size:7)
    OnLocalDeclCount(1)
    OnLocalDecl(index: 0, count: 1, type: i32)
    OnLocalGetExpr(index: 0)
    OnDropExpr
    EndFunctionBody(12)
    BeginFunctionBody(13, size:8)
    OnLocalDeclCount(1)
    OnLocalDecl(index: 0, count: 1, type: i32)
    OnI32ConstExpr(1 (0x1))
    OnLocalSetExpr(index: 0)
    EndFunctionBody(13)
    BeginFunctionBody(14, size:9)
    OnLocalDeclCount(1)
    OnLocalDecl(index: 0, count: 1, type: i32)
    OnI32ConstExpr(1 (0x1))
    OnLocalTeeExpr(index: 0)
    OnDropExpr
    EndFunctionBody(14)
    BeginFunctionBody(15, size:5)
    OnLocalDeclCount(0)
    OnGlobalGetExpr(index: 0)
    OnDropExpr
    EndFunctionBody(15)
    BeginFunctionBody(16, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnGlobalSetExpr(index: 0)
    EndFunctionBody(16)
    BeginFunctionBody(17, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load" (40), align log2: 2, offset: 2)
    OnDropExpr
    EndFunctionBody(17)
    BeginFunctionBody(18, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load" (41), align log2: 3, offset: 2)
    OnDropExpr
    EndFunctionBody(18)
    BeginFunctionBody(19, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "f32.load" (42), align log2: 2, offset: 2)
    OnDropExpr
    EndFunctionBody(19)
    BeginFunctionBody(20, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "f64.load" (43), align log2: 3, offset: 2)
    OnDropExpr
    EndFunctionBody(20)
    BeginFunctionBody(21, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load8_s" (44), align log2: 0, offset: 2)
    OnDropExpr
    EndFunctionBody(21)
    BeginFunctionBody(22, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load8_u" (45), align log2: 0, offset: 2)
    OnDropExpr
    EndFunctionBody(22)
    BeginFunctionBody(23, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load16_s" (46), align log2: 1, offset: 2)
    OnDropExpr
    EndFunctionBody(23)
    BeginFunctionBody(24, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load16_u" (47), align log2: 1, offset: 2)
    OnDropExpr
    EndFunctionBody(24)
    BeginFunctionBody(25, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load8_s" (48), align log2: 0, offset: 2)
    OnDropExpr
    EndFunctionBody(25)
    BeginFunctionBody(26, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load8_u" (49), align log2: 0, offset: 2)
    OnDropExpr
    EndFunctionBody(26)
    BeginFunctionBody(27, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load16_s" (50), align log2: 1, offset: 2)
    OnDropExpr
    EndFunctionBody(27)
    BeginFunctionBody(28, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load16_u" (51), align log2: 1, offset: 2)
    OnDropExpr
    EndFunctionBody(28)
    BeginFunctionBody(29, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load32_s" (52), align log2: 2, offset: 2)
    OnDropExpr
    EndFunctionBody(29)
    BeginFunctionBody(30, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load32_u" (53), align log2: 2, offset: 2)
    OnDropExpr
    EndFunctionBody(30)
    BeginFunctionBody(31, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i32.store" (54), align log2: 2, offset: 2)
    EndFunctionBody(31)
    BeginFunctionBody(32, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i64.store" (55), align log2: 3, offset: 2)
    EndFunctionBody(32)
    BeginFunctionBody(33, size:12)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnF32ConstExpr(2 (0x0440000000))
    OnStoreExpr(opcode: "f32.store" (56), align log2: 2, offset: 2)
    EndFunctionBody(33)
    BeginFunctionBody(34, size:16)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnStoreExpr(opcode: "f64.store" (57), align log2: 3, offset: 2)
    EndFunctionBody(34)
    BeginFunctionBody(35, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i32.store8" (58), align log2: 0, offset: 2)
    EndFunctionBody(35)
    BeginFunctionBody(36, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i32.store16" (59), align log2: 1, offset: 2)
    EndFunctionBody(36)
    BeginFunctionBody(37, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i64.store8" (60), align log2: 0, offset: 2)
    EndFunctionBody(37)
    BeginFunctionBody(38, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i64.store16" (61), align log2: 1, offset: 2)
    EndFunctionBody(38)
    BeginFunctionBody(39, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i64.store32" (62), align log2: 2, offset: 2)
    EndFunctionBody(39)
    BeginFunctionBody(40, size:5)
    OnLocalDeclCount(0)
    OnMemorySizeExpr
    OnDropExpr
    EndFunctionBody(40)
    BeginFunctionBody(41, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnMemoryGrowExpr
    OnDropExpr
    EndFunctionBody(41)
    BeginFunctionBody(42, size:5)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnDropExpr
    EndFunctionBody(42)
    BeginFunctionBody(43, size:5)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnDropExpr
    EndFunctionBody(43)
    BeginFunctionBody(44, size:8)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnDropExpr
    EndFunctionBody(44)
    BeginFunctionBody(45, size:12)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnDropExpr
    EndFunctionBody(45)
    BeginFunctionBody(46, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("i32.eqz" (69))
    OnDropExpr
    EndFunctionBody(46)
    BeginFunctionBody(47, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.eq" (70))
    OnDropExpr
    EndFunctionBody(47)
    BeginFunctionBody(48, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.ne" (71))
    OnDropExpr
    EndFunctionBody(48)
    BeginFunctionBody(49, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.lt_s" (72))
    OnDropExpr
    EndFunctionBody(49)
    BeginFunctionBody(50, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.lt_u" (73))
    OnDropExpr
    EndFunctionBody(50)
    BeginFunctionBody(51, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.gt_s" (74))
    OnDropExpr
    EndFunctionBody(51)
    BeginFunctionBody(52, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.gt_u" (75))
    OnDropExpr
    EndFunctionBody(52)
    BeginFunctionBody(53, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.le_s" (76))
    OnDropExpr
    EndFunctionBody(53)
    BeginFunctionBody(54, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.le_u" (77))
    OnDropExpr
    EndFunctionBody(54)
    BeginFunctionBody(55, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.ge_s" (78))
    OnDropExpr
    EndFunctionBody(55)
    BeginFunctionBody(56, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.ge_u" (79))
    OnDropExpr
    EndFunctionBody(56)
    BeginFunctionBody(57, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("i64.eqz" (80))
    OnDropExpr
    EndFunctionBody(57)
    BeginFunctionBody(58, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.eq" (81))
    OnDropExpr
    EndFunctionBody(58)
    BeginFunctionBody(59, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.ne" (82))
    OnDropExpr
    EndFunctionBody(59)
    BeginFunctionBody(60, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.lt_s" (83))
    OnDropExpr
    EndFunctionBody(60)
    BeginFunctionBody(61, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.lt_u" (84))
    OnDropExpr
    EndFunctionBody(61)
    BeginFunctionBody(62, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.gt_s" (85))
    OnDropExpr
    EndFunctionBody(62)
    BeginFunctionBody(63, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.gt_u" (86))
    OnDropExpr
    EndFunctionBody(63)
    BeginFunctionBody(64, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.le_s" (87))
    OnDropExpr
    EndFunctionBody(64)
    BeginFunctionBody(65, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.le_u" (88))
    OnDropExpr
    EndFunctionBody(65)
    BeginFunctionBody(66, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.ge_s" (89))
    OnDropExpr
    EndFunctionBody(66)
    BeginFunctionBody(67, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.ge_u" (90))
    OnDropExpr
    EndFunctionBody(67)
    BeginFunctionBody(68, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.eq" (91))
    OnDropExpr
    EndFunctionBody(68)
    BeginFunctionBody(69, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.ne" (92))
    OnDropExpr
    EndFunctionBody(69)
    BeginFunctionBody(70, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.lt" (93))
    OnDropExpr
    EndFunctionBody(70)
    BeginFunctionBody(71, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.gt" (94))
    OnDropExpr
    EndFunctionBody(71)
    BeginFunctionBody(72, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.le" (95))
    OnDropExpr
    EndFunctionBody(72)
    BeginFunctionBody(73, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.ge" (96))
    OnDropExpr
    EndFunctionBody(73)
    BeginFunctionBody(74, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.eq" (97))
    OnDropExpr
    EndFunctionBody(74)
    BeginFunctionBody(75, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.ne" (98))
    OnDropExpr
    EndFunctionBody(75)
    BeginFunctionBody(76, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.lt" (99))
    OnDropExpr
    EndFunctionBody(76)
    BeginFunctionBody(77, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.gt" (100))
    OnDropExpr
    EndFunctionBody(77)
    BeginFunctionBody(78, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.le" (101))
    OnDropExpr
    EndFunctionBody(78)
    BeginFunctionBody(79, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.ge" (102))
    OnDropExpr
    EndFunctionBody(79)
    BeginFunctionBody(80, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.clz" (103))
    OnDropExpr
    EndFunctionBody(80)
    BeginFunctionBody(81, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.ctz" (104))
    OnDropExpr
    EndFunctionBody(81)
    BeginFunctionBody(82, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.popcnt" (105))
    OnDropExpr
    EndFunctionBody(82)
    BeginFunctionBody(83, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.add" (106))
    OnDropExpr
    EndFunctionBody(83)
    BeginFunctionBody(84, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.sub" (107))
    OnDropExpr
    EndFunctionBody(84)
    BeginFunctionBody(85, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.mul" (108))
    OnDropExpr
    EndFunctionBody(85)
    BeginFunctionBody(86, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.div_s" (109))
    OnDropExpr
    EndFunctionBody(86)
    BeginFunctionBody(87, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.div_u" (110))
    OnDropExpr
    EndFunctionBody(87)
    BeginFunctionBody(88, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.rem_s" (111))
    OnDropExpr
    EndFunctionBody(88)
    BeginFunctionBody(89, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.rem_u" (112))
    OnDropExpr
    EndFunctionBody(89)
    BeginFunctionBody(90, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.and" (113))
    OnDropExpr
    EndFunctionBody(90)
    BeginFunctionBody(91, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.or" (114))
    OnDropExpr
    EndFunctionBody(91)
    BeginFunctionBody(92, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.xor" (115))
    OnDropExpr
    EndFunctionBody(92)
    BeginFunctionBody(93, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.shl" (116))
    OnDropExpr
    EndFunctionBody(93)
    BeginFunctionBody(94, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.shr_s" (117))
    OnDropExpr
    EndFunctionBody(94)
    BeginFunctionBody(95, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.shr_u" (118))
    OnDropExpr
    EndFunctionBody(95)
    BeginFunctionBody(96, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.rotl" (119))
    OnDropExpr
    EndFunctionBody(96)
    BeginFunctionBody(97, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.rotr" (120))
    OnDropExpr
    EndFunctionBody(97)
    BeginFunctionBody(98, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.clz" (121))
    OnDropExpr
    EndFunctionBody(98)
    BeginFunctionBody(99, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.ctz" (122))
    OnDropExpr
    EndFunctionBody(99)
    BeginFunctionBody(100, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.popcnt" (123))
    OnDropExpr
    EndFunctionBody(100)
    BeginFunctionBody(101, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.add" (124))
    OnDropExpr
    EndFunctionBody(101)
    BeginFunctionBody(102, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.sub" (125))
    OnDropExpr
    EndFunctionBody(102)
    BeginFunctionBody(103, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.mul" (126))
    OnDropExpr
    EndFunctionBody(103)
    BeginFunctionBody(104, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.div_s" (127))
    OnDropExpr
    EndFunctionBody(104)
    BeginFunctionBody(105, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.div_u" (128))
    OnDropExpr
    EndFunctionBody(105)
    BeginFunctionBody(106, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.rem_s" (129))
    OnDropExpr
    EndFunctionBody(106)
    BeginFunctionBody(107, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.rem_u" (130))
    OnDropExpr
    EndFunctionBody(107)
    BeginFunctionBody(108, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.and" (131))
    OnDropExpr
    EndFunctionBody(108)
    BeginFunctionBody(109, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.or" (132))
    OnDropExpr
    EndFunctionBody(109)
    BeginFunctionBody(110, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.xor" (133))
    OnDropExpr
    EndFunctionBody(110)
    BeginFunctionBody(111, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.shl" (134))
    OnDropExpr
    EndFunctionBody(111)
    BeginFunctionBody(112, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.shr_s" (135))
    OnDropExpr
    EndFunctionBody(112)
    BeginFunctionBody(113, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.shr_u" (136))
    OnDropExpr
    EndFunctionBody(113)
    BeginFunctionBody(114, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.rotl" (137))
    OnDropExpr
    EndFunctionBody(114)
    BeginFunctionBody(115, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.rotr" (138))
    OnDropExpr
    EndFunctionBody(115)
    BeginFunctionBody(116, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.abs" (139))
    OnDropExpr
    EndFunctionBody(116)
    BeginFunctionBody(117, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.neg" (140))
    OnDropExpr
    EndFunctionBody(117)
    BeginFunctionBody(118, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.ceil" (141))
    OnDropExpr
    EndFunctionBody(118)
    BeginFunctionBody(119, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.floor" (142))
    OnDropExpr
    EndFunctionBody(119)
    BeginFunctionBody(120, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.trunc" (143))
    OnDropExpr
    EndFunctionBody(120)
    BeginFunctionBody(121, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.nearest" (144))
    OnDropExpr
    EndFunctionBody(121)
    BeginFunctionBody(122, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.sqrt" (145))
    OnDropExpr
    EndFunctionBody(122)
    BeginFunctionBody(123, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.add" (146))
    OnDropExpr
    EndFunctionBody(123)
    BeginFunctionBody(124, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.sub" (147))
    OnDropExpr
    EndFunctionBody(124)
    BeginFunctionBody(125, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.mul" (148))
    OnDropExpr
    EndFunctionBody(125)
    BeginFunctionBody(126, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.div" (149))
    OnDropExpr
    EndFunctionBody(126)
    BeginFunctionBody(127, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.min" (150))
    OnDropExpr
    EndFunctionBody(127)
    BeginFunctionBody(128, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.max" (151))
    OnDropExpr
    EndFunctionBody(128)
    BeginFunctionBody(129, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.copysign" (152))
    OnDropExpr
    EndFunctionBody(129)
    BeginFunctionBody(130, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.abs" (153))
    OnDropExpr
    EndFunctionBody(130)
    BeginFunctionBody(131, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.neg" (154))
    OnDropExpr
    EndFunctionBody(131)
    BeginFunctionBody(132, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.ceil" (155))
    OnDropExpr
    EndFunctionBody(132)
    BeginFunctionBody(133, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.floor" (156))
    OnDropExpr
    EndFunctionBody(133)
    BeginFunctionBody(134, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.trunc" (157))
    OnDropExpr
    EndFunctionBody(134)
    BeginFunctionBody(135, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.nearest" (158))
    OnDropExpr
    EndFunctionBody(135)
    BeginFunctionBody(136, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.sqrt" (159))
    OnDropExpr
    EndFunctionBody(136)
    BeginFunctionBody(137, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.add" (160))
    OnDropExpr
    EndFunctionBody(137)
    BeginFunctionBody(138, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.sub" (161))
    OnDropExpr
    EndFunctionBody(138)
    BeginFunctionBody(139, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.mul" (162))
    OnDropExpr
    EndFunctionBody(139)
    BeginFunctionBody(140, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.div" (163))
    OnDropExpr
    EndFunctionBody(140)
    BeginFunctionBody(141, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.min" (164))
    OnDropExpr
    EndFunctionBody(141)
    BeginFunctionBody(142, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.max" (165))
    OnDropExpr
    EndFunctionBody(142)
    BeginFunctionBody(143, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.copysign" (166))
    OnDropExpr
    EndFunctionBody(143)
    BeginFunctionBody(144, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("i32.wrap_i64" (167))
    OnDropExpr
    EndFunctionBody(144)
    BeginFunctionBody(145, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.trunc_f32_s" (168))
    OnDropExpr
    EndFunctionBody(145)
    BeginFunctionBody(146, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.trunc_f32_u" (169))
    OnDropExpr
    EndFunctionBody(146)
    BeginFunctionBody(147, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i32.trunc_f64_s" (170))
    OnDropExpr
    EndFunctionBody(147)
    BeginFunctionBody(148, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i32.trunc_f64_u" (171))
    OnDropExpr
    EndFunctionBody(148)
    BeginFunctionBody(149, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("i64.extend_i32_s" (172))
    OnDropExpr
    EndFunctionBody(149)
    BeginFunctionBody(150, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("i64.extend_i32_u" (173))
    OnDropExpr
    EndFunctionBody(150)
    BeginFunctionBody(151, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i64.trunc_f32_s" (174))
    OnDropExpr
    EndFunctionBody(151)
    BeginFunctionBody(152, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i64.trunc_f32_u" (175))
    OnDropExpr
    EndFunctionBody(152)
    BeginFunctionBody(153, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.trunc_f64_s" (176))
    OnDropExpr
    EndFunctionBody(153)
    BeginFunctionBody(154, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.trunc_f64_u" (177))
    OnDropExpr
    EndFunctionBody(154)
    BeginFunctionBody(155, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f32.convert_i32_s" (178))
    OnDropExpr
    EndFunctionBody(155)
    BeginFunctionBody(156, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f32.convert_i32_u" (179))
    OnDropExpr
    EndFunctionBody(156)
    BeginFunctionBody(157, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f32.convert_i64_s" (180))
    OnDropExpr
    EndFunctionBody(157)
    BeginFunctionBody(158, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f32.convert_i64_u" (181))
    OnDropExpr
    EndFunctionBody(158)
    BeginFunctionBody(159, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("f32.demote_f64" (182))
    OnDropExpr
    EndFunctionBody(159)
    BeginFunctionBody(160, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f64.convert_i32_s" (183))
    OnDropExpr
    EndFunctionBody(160)
    BeginFunctionBody(161, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f64.convert_i32_u" (184))
    OnDropExpr
    EndFunctionBody(161)
    BeginFunctionBody(162, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f64.convert_i64_s" (185))
    OnDropExpr
    EndFunctionBody(162)
    BeginFunctionBody(163, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f64.convert_i64_u" (186))
    OnDropExpr
    EndFunctionBody(163)
    BeginFunctionBody(164, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("f64.promote_f32" (187))
    OnDropExpr
    EndFunctionBody(164)
    BeginFunctionBody(165, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f32.reinterpret_i32" (190))
    OnDropExpr
    EndFunctionBody(165)
    BeginFunctionBody(166, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.reinterpret_f32" (188))
    OnDropExpr
    EndFunctionBody(166)
    BeginFunctionBody(167, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f64.reinterpret_i64" (191))
    OnDropExpr
    EndFunctionBody(167)
    BeginFunctionBody(168, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.reinterpret_f64" (189))
    OnDropExpr
    EndFunctionBody(168)
    BeginFunctionBody(169, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.extend8_s" (192))
    OnDropExpr
    EndFunctionBody(169)
    BeginFunctionBody(170, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.extend16_s" (193))
    OnDropExpr
    EndFunctionBody(170)
    BeginFunctionBody(171, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.extend8_s" (194))
    OnDropExpr
    EndFunctionBody(171)
    BeginFunctionBody(172, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.extend16_s" (195))
    OnDropExpr
    EndFunctionBody(172)
    BeginFunctionBody(173, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.extend32_s" (196))
    OnDropExpr
    EndFunctionBody(173)
    BeginFunctionBody(174, size:4)
    OnLocalDeclCount(1)
    OnLocalDecl(index: 0, count: 1, type: i32)
    EndFunctionBody(174)
    BeginFunctionBody(175, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnBrIfExpr(depth: 0)
    EndFunctionBody(175)
    BeginFunctionBody(176, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnCallExpr(func_index: 0)
    EndFunctionBody(176)
    BeginFunctionBody(177, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnBrTableExpr(num_targets: 0, depths: [], default: 0)
    EndFunctionBody(177)
    BeginFunctionBody(178, size:12)
    OnLocalDeclCount(0)
    OnBlockExpr(sig: i32)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBrExpr(depth: 0)
    OnEndExpr
    OnDropExpr
    EndFunctionBody(178)
    BeginFunctionBody(179, size:10)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.trunc_sat_f32_s" (0))
    OnDropExpr
    EndFunctionBody(179)
    BeginFunctionBody(180, size:10)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.trunc_sat_f32_u" (1))
    OnDropExpr
    EndFunctionBody(180)
    BeginFunctionBody(181, size:14)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i32.trunc_sat_f64_s" (2))
    OnDropExpr
    EndFunctionBody(181)
    BeginFunctionBody(182, size:14)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i32.trunc_sat_f64_u" (3))
    OnDropExpr
    EndFunctionBody(182)
    BeginFunctionBody(183, size:10)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i64.trunc_sat_f32_s" (4))
    OnDropExpr
    EndFunctionBody(183)
    BeginFunctionBody(184, size:10)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i64.trunc_sat_f32_u" (5))
    OnDropExpr
    EndFunctionBody(184)
    BeginFunctionBody(185, size:14)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.trunc_sat_f64_s" (6))
    OnDropExpr
    EndFunctionBody(185)
    BeginFunctionBody(186, size:14)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.trunc_sat_f64_u" (7))
    OnDropExpr
    EndFunctionBody(186)
    BeginFunctionBody(187, size:12)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnMemoryInitExpr(0)
    EndFunctionBody(187)
    BeginFunctionBody(188, size:5)
    OnLocalDeclCount(0)
    OnDataDropExpr(0)
    EndFunctionBody(188)
    BeginFunctionBody(189, size:12)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnMemoryCopyExpr
    EndFunctionBody(189)
    BeginFunctionBody(190, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnMemoryFillExpr
    EndFunctionBody(190)
    BeginFunctionBody(191, size:12)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnTableInitExpr(0)
    EndFunctionBody(191)
    BeginFunctionBody(192, size:5)
    OnLocalDeclCount(0)
    OnElemDropExpr(0)
    EndFunctionBody(192)
    BeginFunctionBody(193, size:12)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnTableCopyExpr
    EndFunctionBody(193)
    BeginFunctionBody(194, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "v128.load" (0), align log2: 4, offset: 3)
    OnDropExpr
    EndFunctionBody(194)
    BeginFunctionBody(195, size:26)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnStoreExpr(opcode: "v128.store" (1), align log2: 4, offset: 3)
    EndFunctionBody(195)
    BeginFunctionBody(196, size:21)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnDropExpr
    EndFunctionBody(196)
    BeginFunctionBody(197, size:57)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnSimdShuffleOpExpr (lane: 0x01010101 01010101 01010101 01010101)
    OnDropExpr
    EndFunctionBody(197)
    BeginFunctionBody(198, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i8x16.splat" (4))
    OnDropExpr
    EndFunctionBody(198)
    BeginFunctionBody(199, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 15)
    OnDropExpr
    EndFunctionBody(199)
    BeginFunctionBody(200, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 15)
    OnDropExpr
    EndFunctionBody(200)
    BeginFunctionBody(201, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnSimdLaneOpExpr (lane: 15)
    OnDropExpr
    EndFunctionBody(201)
    BeginFunctionBody(202, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i16x8.splat" (8))
    OnDropExpr
    EndFunctionBody(202)
    BeginFunctionBody(203, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 7)
    OnDropExpr
    EndFunctionBody(203)
    BeginFunctionBody(204, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 7)
    OnDropExpr
    EndFunctionBody(204)
    BeginFunctionBody(205, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnSimdLaneOpExpr (lane: 7)
    OnDropExpr
    EndFunctionBody(205)
    BeginFunctionBody(206, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32x4.splat" (12))
    OnDropExpr
    EndFunctionBody(206)
    BeginFunctionBody(207, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 3)
    OnDropExpr
    EndFunctionBody(207)
    BeginFunctionBody(208, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnSimdLaneOpExpr (lane: 3)
    OnDropExpr
    EndFunctionBody(208)
    BeginFunctionBody(209, size:7)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64x2.splat" (15))
    OnDropExpr
    EndFunctionBody(209)
    BeginFunctionBody(210, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 1)
    OnDropExpr
    EndFunctionBody(210)
    BeginFunctionBody(211, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI64ConstExpr(0 (0x0))
    OnSimdLaneOpExpr (lane: 1)
    OnDropExpr
    EndFunctionBody(211)
    BeginFunctionBody(212, size:10)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32x4.splat" (18))
    OnDropExpr
    EndFunctionBody(212)
    BeginFunctionBody(213, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 3)
    OnDropExpr
    EndFunctionBody(213)
    BeginFunctionBody(214, size:29)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnF32ConstExpr(0 (0x040))
    OnSimdLaneOpExpr (lane: 3)
    OnDropExpr
    EndFunctionBody(214)
    BeginFunctionBody(215, size:14)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64x2.splat" (21))
    OnDropExpr
    EndFunctionBody(215)
    BeginFunctionBody(216, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 1)
    OnDropExpr
    EndFunctionBody(216)
    BeginFunctionBody(217, size:33)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnF64ConstExpr(0 (0x080))
    OnSimdLaneOpExpr (lane: 1)
    OnDropExpr
    EndFunctionBody(217)
    BeginFunctionBody(218, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.eq" (24))
    OnDropExpr
    EndFunctionBody(218)
    BeginFunctionBody(219, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.ne" (25))
    OnDropExpr
    EndFunctionBody(219)
    BeginFunctionBody(220, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.lt_s" (26))
    OnDropExpr
    EndFunctionBody(220)
    BeginFunctionBody(221, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.lt_u" (27))
    OnDropExpr
    EndFunctionBody(221)
    BeginFunctionBody(222, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.gt_s" (28))
    OnDropExpr
    EndFunctionBody(222)
    BeginFunctionBody(223, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.gt_u" (29))
    OnDropExpr
    EndFunctionBody(223)
    BeginFunctionBody(224, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.le_s" (30))
    OnDropExpr
    EndFunctionBody(224)
    BeginFunctionBody(225, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.le_u" (31))
    OnDropExpr
    EndFunctionBody(225)
    BeginFunctionBody(226, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.ge_s" (32))
    OnDropExpr
    EndFunctionBody(226)
    BeginFunctionBody(227, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.ge_u" (33))
    OnDropExpr
    EndFunctionBody(227)
    BeginFunctionBody(228, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.eq" (34))
    OnDropExpr
    EndFunctionBody(228)
    BeginFunctionBody(229, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.ne" (35))
    OnDropExpr
    EndFunctionBody(229)
    BeginFunctionBody(230, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.lt_s" (36))
    OnDropExpr
    EndFunctionBody(230)
    BeginFunctionBody(231, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.lt_u" (37))
    OnDropExpr
    EndFunctionBody(231)
    BeginFunctionBody(232, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.gt_s" (38))
    OnDropExpr
    EndFunctionBody(232)
    BeginFunctionBody(233, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.gt_u" (39))
    OnDropExpr
    EndFunctionBody(233)
    BeginFunctionBody(234, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.le_s" (40))
    OnDropExpr
    EndFunctionBody(234)
    BeginFunctionBody(235, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.le_u" (41))
    OnDropExpr
    EndFunctionBody(235)
    BeginFunctionBody(236, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.ge_s" (42))
    OnDropExpr
    EndFunctionBody(236)
    BeginFunctionBody(237, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.ge_u" (43))
    OnDropExpr
    EndFunctionBody(237)
    BeginFunctionBody(238, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.eq" (44))
    OnDropExpr
    EndFunctionBody(238)
    BeginFunctionBody(239, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.ne" (45))
    OnDropExpr
    EndFunctionBody(239)
    BeginFunctionBody(240, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.lt_s" (46))
    OnDropExpr
    EndFunctionBody(240)
    BeginFunctionBody(241, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.lt_u" (47))
    OnDropExpr
    EndFunctionBody(241)
    BeginFunctionBody(242, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.gt_s" (48))
    OnDropExpr
    EndFunctionBody(242)
    BeginFunctionBody(243, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.gt_u" (49))
    OnDropExpr
    EndFunctionBody(243)
    BeginFunctionBody(244, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.le_s" (50))
    OnDropExpr
    EndFunctionBody(244)
    BeginFunctionBody(245, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.le_u" (51))
    OnDropExpr
    EndFunctionBody(245)
    BeginFunctionBody(246, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.ge_s" (52))
    OnDropExpr
    EndFunctionBody(246)
    BeginFunctionBody(247, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.ge_u" (53))
    OnDropExpr
    EndFunctionBody(247)
    BeginFunctionBody(248, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.eq" (64))
    OnDropExpr
    EndFunctionBody(248)
    BeginFunctionBody(249, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.ne" (65))
    OnDropExpr
    EndFunctionBody(249)
    BeginFunctionBody(250, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.lt" (66))
    OnDropExpr
    EndFunctionBody(250)
    BeginFunctionBody(251, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.gt" (67))
    OnDropExpr
    EndFunctionBody(251)
    BeginFunctionBody(252, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.le" (68))
    OnDropExpr
    EndFunctionBody(252)
    BeginFunctionBody(253, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.ge" (69))
    OnDropExpr
    EndFunctionBody(253)
    BeginFunctionBody(254, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.eq" (70))
    OnDropExpr
    EndFunctionBody(254)
    BeginFunctionBody(255, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.ne" (71))
    OnDropExpr
    EndFunctionBody(255)
    BeginFunctionBody(256, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.lt" (72))
    OnDropExpr
    EndFunctionBody(256)
    BeginFunctionBody(257, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.gt" (73))
    OnDropExpr
    EndFunctionBody(257)
    BeginFunctionBody(258, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.le" (74))
    OnDropExpr
    EndFunctionBody(258)
    BeginFunctionBody(259, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.ge" (75))
    OnDropExpr
    EndFunctionBody(259)
    BeginFunctionBody(260, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("v128.not" (76))
    OnDropExpr
    EndFunctionBody(260)
    BeginFunctionBody(261, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("v128.and" (77))
    OnDropExpr
    EndFunctionBody(261)
    BeginFunctionBody(262, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("v128.or" (78))
    OnDropExpr
    EndFunctionBody(262)
    BeginFunctionBody(263, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("v128.xor" (79))
    OnDropExpr
    EndFunctionBody(263)
    BeginFunctionBody(264, size:59)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnV128ConstExpr(0x00000003 0x00000003 0x00000003 0x00000003)
    OnTernaryExpr("v128.bitselect" (80))
    OnDropExpr
    EndFunctionBody(264)
    BeginFunctionBody(265, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i8x16.neg" (81))
    OnDropExpr
    EndFunctionBody(265)
    BeginFunctionBody(266, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i8x16.any_true" (82))
    OnDropExpr
    EndFunctionBody(266)
    BeginFunctionBody(267, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i8x16.all_true" (83))
    OnDropExpr
    EndFunctionBody(267)
    BeginFunctionBody(268, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i8x16.shl" (84))
    OnDropExpr
    EndFunctionBody(268)
    BeginFunctionBody(269, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i8x16.shr_s" (85))
    OnDropExpr
    EndFunctionBody(269)
    BeginFunctionBody(270, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i8x16.shr_u" (86))
    OnDropExpr
    EndFunctionBody(270)
    BeginFunctionBody(271, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.add" (87))
    OnDropExpr
    EndFunctionBody(271)
    BeginFunctionBody(272, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.add_saturate_s" (88))
    OnDropExpr
    EndFunctionBody(272)
    BeginFunctionBody(273, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.add_saturate_u" (89))
    OnDropExpr
    EndFunctionBody(273)
    BeginFunctionBody(274, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.sub" (90))
    OnDropExpr
    EndFunctionBody(274)
    BeginFunctionBody(275, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.sub_saturate_s" (91))
    OnDropExpr
    EndFunctionBody(275)
    BeginFunctionBody(276, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.sub_saturate_u" (92))
    OnDropExpr
    EndFunctionBody(276)
    BeginFunctionBody(277, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.mul" (93))
    OnDropExpr
    EndFunctionBody(277)
    BeginFunctionBody(278, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i16x8.neg" (98))
    OnDropExpr
    EndFunctionBody(278)
    BeginFunctionBody(279, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i16x8.any_true" (99))
    OnDropExpr
    EndFunctionBody(279)
    BeginFunctionBody(280, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i16x8.all_true" (100))
    OnDropExpr
    EndFunctionBody(280)
    BeginFunctionBody(281, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i16x8.shl" (101))
    OnDropExpr
    EndFunctionBody(281)
    BeginFunctionBody(282, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i16x8.shr_s" (102))
    OnDropExpr
    EndFunctionBody(282)
    BeginFunctionBody(283, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i16x8.shr_u" (103))
    OnDropExpr
    EndFunctionBody(283)
    BeginFunctionBody(284, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.add" (104))
    OnDropExpr
    EndFunctionBody(284)
    BeginFunctionBody(285, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.add_saturate_s" (105))
    OnDropExpr
    EndFunctionBody(285)
    BeginFunctionBody(286, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.add_saturate_u" (106))
    OnDropExpr
    EndFunctionBody(286)
    BeginFunctionBody(287, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.sub" (107))
    OnDropExpr
    EndFunctionBody(287)
    BeginFunctionBody(288, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.sub_saturate_s" (108))
    OnDropExpr
    EndFunctionBody(288)
    BeginFunctionBody(289, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.sub_saturate_u" (109))
    OnDropExpr
    EndFunctionBody(289)
    BeginFunctionBody(290, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.mul" (110))
    OnDropExpr
    EndFunctionBody(290)
    BeginFunctionBody(291, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i32x4.neg" (115))
    OnDropExpr
    EndFunctionBody(291)
    BeginFunctionBody(292, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i32x4.any_true" (116))
    OnDropExpr
    EndFunctionBody(292)
    BeginFunctionBody(293, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i32x4.all_true" (117))
    OnDropExpr
    EndFunctionBody(293)
    BeginFunctionBody(294, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i32x4.shl" (118))
    OnDropExpr
    EndFunctionBody(294)
    BeginFunctionBody(295, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i32x4.shr_s" (119))
    OnDropExpr
    EndFunctionBody(295)
    BeginFunctionBody(296, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i32x4.shr_u" (120))
    OnDropExpr
    EndFunctionBody(296)
    BeginFunctionBody(297, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i32x4.add" (121))
    OnDropExpr
    EndFunctionBody(297)
    BeginFunctionBody(298, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i32x4.sub" (124))
    OnDropExpr
    EndFunctionBody(298)
    BeginFunctionBody(299, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i32x4.mul" (127))
    OnDropExpr
    EndFunctionBody(299)
    BeginFunctionBody(300, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i64x2.neg" (132))
    OnDropExpr
    EndFunctionBody(300)
    BeginFunctionBody(301, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i64x2.any_true" (133))
    OnDropExpr
    EndFunctionBody(301)
    BeginFunctionBody(302, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i64x2.all_true" (134))
    OnDropExpr
    EndFunctionBody(302)
    BeginFunctionBody(303, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i64x2.shl" (135))
    OnDropExpr
    EndFunctionBody(303)
    BeginFunctionBody(304, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i64x2.shr_s" (136))
    OnDropExpr
    EndFunctionBody(304)
    BeginFunctionBody(305, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i64x2.shr_u" (137))
    OnDropExpr
    EndFunctionBody(305)
    BeginFunctionBody(306, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i64x2.add" (138))
    OnDropExpr
    EndFunctionBody(306)
    BeginFunctionBody(307, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i64x2.sub" (141))
    OnDropExpr
    EndFunctionBody(307)
    BeginFunctionBody(308, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f32x4.abs" (149))
    OnDropExpr
    EndFunctionBody(308)
    BeginFunctionBody(309, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f32x4.neg" (150))
    OnDropExpr
    EndFunctionBody(309)
    BeginFunctionBody(310, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f32x4.sqrt" (151))
    OnDropExpr
    EndFunctionBody(310)
    BeginFunctionBody(311, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.add" (154))
    OnDropExpr
    EndFunctionBody(311)
    BeginFunctionBody(312, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.sub" (155))
    OnDropExpr
    EndFunctionBody(312)
    BeginFunctionBody(313, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.mul" (156))
    OnDropExpr
    EndFunctionBody(313)
    BeginFunctionBody(314, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.div" (157))
    OnDropExpr
    EndFunctionBody(314)
    BeginFunctionBody(315, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.min" (158))
    OnDropExpr
    EndFunctionBody(315)
    BeginFunctionBody(316, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.max" (159))
    OnDropExpr
    EndFunctionBody(316)
    BeginFunctionBody(317, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f64x2.abs" (160))
    OnDropExpr
    EndFunctionBody(317)
    BeginFunctionBody(318, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f64x2.neg" (161))
    OnDropExpr
    EndFunctionBody(318)
    BeginFunctionBody(319, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f64x2.sqrt" (162))
    OnDropExpr
    EndFunctionBody(319)
    BeginFunctionBody(320, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.add" (165))
    OnDropExpr
    EndFunctionBody(320)
    BeginFunctionBody(321, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.sub" (166))
    OnDropExpr
    EndFunctionBody(321)
    BeginFunctionBody(322, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.mul" (167))
    OnDropExpr
    EndFunctionBody(322)
    BeginFunctionBody(323, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.div" (168))
    OnDropExpr
    EndFunctionBody(323)
    BeginFunctionBody(324, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.min" (169))
    OnDropExpr
    EndFunctionBody(324)
    BeginFunctionBody(325, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.max" (170))
    OnDropExpr
    EndFunctionBody(325)
    BeginFunctionBody(326, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("i32x4.trunc_sat_f32x4_s" (171))
    OnDropExpr
    EndFunctionBody(326)
    BeginFunctionBody(327, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("i32x4.trunc_sat_f32x4_u" (172))
    OnDropExpr
    EndFunctionBody(327)
    BeginFunctionBody(328, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("i64x2.trunc_sat_f64x2_s" (173))
    OnDropExpr
    EndFunctionBody(328)
    BeginFunctionBody(329, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("i64x2.trunc_sat_f64x2_u" (174))
    OnDropExpr
    EndFunctionBody(329)
    BeginFunctionBody(330, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("f32x4.convert_i32x4_s" (175))
    OnDropExpr
    EndFunctionBody(330)
    BeginFunctionBody(331, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("f32x4.convert_i32x4_u" (176))
    OnDropExpr
    EndFunctionBody(331)
    BeginFunctionBody(332, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("f64x2.convert_i64x2_s" (177))
    OnDropExpr
    EndFunctionBody(332)
    BeginFunctionBody(333, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("f64x2.convert_i64x2_u" (178))
    OnDropExpr
    EndFunctionBody(333)
    BeginFunctionBody(334, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicNotifyExpr(opcode: "atomic.notify" (0), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(334)
    BeginFunctionBody(335, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicWaitExpr(opcode: "i32.atomic.wait" (1), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(335)
    BeginFunctionBody(336, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicWaitExpr(opcode: "i64.atomic.wait" (2), align log2: 3, offset: 3)
    OnDropExpr
    EndFunctionBody(336)
    BeginFunctionBody(337, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i32.atomic.load" (16), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(337)
    BeginFunctionBody(338, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i64.atomic.load" (17), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(338)
    BeginFunctionBody(339, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i32.atomic.load8_u" (18), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(339)
    BeginFunctionBody(340, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i32.atomic.load16_u" (19), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(340)
    BeginFunctionBody(341, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i64.atomic.load8_u" (20), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(341)
    BeginFunctionBody(342, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i64.atomic.load16_u" (21), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(342)
    BeginFunctionBody(343, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i64.atomic.load32_u" (22), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(343)
    BeginFunctionBody(344, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i32.atomic.store" (23), align log2: 2, offset: 3)
    EndFunctionBody(344)
    BeginFunctionBody(345, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i64.atomic.store" (24), align log2: 3, offset: 7)
    EndFunctionBody(345)
    BeginFunctionBody(346, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i32.atomic.store8" (25), align log2: 0, offset: 3)
    EndFunctionBody(346)
    BeginFunctionBody(347, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i32.atomic.store16" (26), align log2: 1, offset: 3)
    EndFunctionBody(347)
    BeginFunctionBody(348, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i64.atomic.store8" (27), align log2: 0, offset: 3)
    EndFunctionBody(348)
    BeginFunctionBody(349, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i64.atomic.store16" (28), align log2: 1, offset: 3)
    EndFunctionBody(349)
    BeginFunctionBody(350, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i64.atomic.store32" (29), align log2: 2, offset: 3)
    EndFunctionBody(350)
    BeginFunctionBody(351, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.add" (30), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(351)
    BeginFunctionBody(352, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.add" (31), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(352)
    BeginFunctionBody(353, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.add_u" (32), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(353)
    BeginFunctionBody(354, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.add_u" (33), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(354)
    BeginFunctionBody(355, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.add_u" (34), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(355)
    BeginFunctionBody(356, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.add_u" (35), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(356)
    BeginFunctionBody(357, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.add_u" (36), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(357)
    BeginFunctionBody(358, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.sub" (37), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(358)
    BeginFunctionBody(359, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.sub" (38), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(359)
    BeginFunctionBody(360, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.sub_u" (39), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(360)
    BeginFunctionBody(361, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.sub_u" (40), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(361)
    BeginFunctionBody(362, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.sub_u" (41), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(362)
    BeginFunctionBody(363, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.sub_u" (42), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(363)
    BeginFunctionBody(364, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.sub_u" (43), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(364)
    BeginFunctionBody(365, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.and" (44), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(365)
    BeginFunctionBody(366, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.and" (45), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(366)
    BeginFunctionBody(367, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.and_u" (46), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(367)
    BeginFunctionBody(368, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.and_u" (47), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(368)
    BeginFunctionBody(369, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.and_u" (48), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(369)
    BeginFunctionBody(370, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.and_u" (49), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(370)
    BeginFunctionBody(371, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.and_u" (50), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(371)
    BeginFunctionBody(372, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.or" (51), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(372)
    BeginFunctionBody(373, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.or" (52), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(373)
    BeginFunctionBody(374, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.or_u" (53), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(374)
    BeginFunctionBody(375, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.or_u" (54), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(375)
    BeginFunctionBody(376, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.or_u" (55), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(376)
    BeginFunctionBody(377, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.or_u" (56), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(377)
    BeginFunctionBody(378, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.or_u" (57), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(378)
    BeginFunctionBody(379, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.xor" (58), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(379)
    BeginFunctionBody(380, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.xor" (59), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(380)
    BeginFunctionBody(381, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.xor_u" (60), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(381)
    BeginFunctionBody(382, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.xor_u" (61), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(382)
    BeginFunctionBody(383, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.xor_u" (62), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(383)
    BeginFunctionBody(384, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.xor_u" (63), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(384)
    BeginFunctionBody(385, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.xor_u" (64), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(385)
    BeginFunctionBody(386, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.xchg" (65), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(386)
    BeginFunctionBody(387, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.xchg" (66), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(387)
    BeginFunctionBody(388, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.xchg_u" (67), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(388)
    BeginFunctionBody(389, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.xchg_u" (68), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(389)
    BeginFunctionBody(390, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.xchg_u" (69), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(390)
    BeginFunctionBody(391, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.xchg_u" (70), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(391)
    BeginFunctionBody(392, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.xchg_u" (71), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(392)
    BeginFunctionBody(393, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i32.atomic.rmw.cmpxchg" (72), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(393)
    BeginFunctionBody(394, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i64.atomic.rmw.cmpxchg" (73), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(394)
    BeginFunctionBody(395, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i32.atomic.rmw8.cmpxchg_u" (74), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(395)
    BeginFunctionBody(396, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i32.atomic.rmw16.cmpxchg_u" (75), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(396)
    BeginFunctionBody(397, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i64.atomic.rmw8.cmpxchg_u" (76), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(397)
    BeginFunctionBody(398, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i64.atomic.rmw16.cmpxchg_u" (77), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(398)
    BeginFunctionBody(399, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i64.atomic.rmw32.cmpxchg_u" (78), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(399)
  EndCodeSection
  BeginDataSection(3)
    OnDataSegmentCount(1)
    BeginDataSegment(index: 0, memory_index: 0, passive: true)
    OnDataSegmentData(index:0, size:0)
    EndDataSegment(0)
  EndDataSection
EndModule
   0| return
   4| unreachable
   8| return
  12| br @20
  20| return
  24| i32.const 1
  32| br_table %[-1], $#0, table:$52
  44| data $12
  52|   entry 0: offset: 64 drop: 0 keep: 0
  64| return
  68| return
  72| return
  76| call @0
  84| return
  88| i32.const 1
  96| call_indirect $0:0, %[-1]
 108| return
 112| return_call @0
 120| return
 124| i32.const 1
 132| return_call_indirect $0:0, %[-1]
 144| return
 148| i32.const 1
 156| drop
 160| return
 164| i32.const 1
 172| i32.const 2
 180| i32.const 3
 188| select %[-3], %[-2], %[-1]
 192| drop
 196| return
 200| alloca $1
 208| local.get $1
 216| drop
 220| drop
 224| return
 228| alloca $1
 236| i32.const 1
 244| local.set $1, %[-1]
 252| drop
 256| return
 260| alloca $1
 268| i32.const 1
 276| local.tee $2, %[-1]
 284| drop
 288| drop
 292| return
 296| global.get $0
 304| drop
 308| return
 312| i32.const 1
 320| global.set $0, %[-1]
 328| return
 332| i32.const 1
 340| i32.load $0:%[-1]+$2
 352| drop
 356| return
 360| i32.const 1
 368| i64.load $0:%[-1]+$2
 380| drop
 384| return
 388| i32.const 1
 396| f32.load $0:%[-1]+$2
 408| drop
 412| return
 416| i32.const 1
 424| f64.load $0:%[-1]+$2
 436| drop
 440| return
 444| i32.const 1
 452| i32.load8_s $0:%[-1]+$2
 464| drop
 468| return
 472| i32.const 1
 480| i32.load8_u $0:%[-1]+$2
 492| drop
 496| return
 500| i32.const 1
 508| i32.load16_s $0:%[-1]+$2
 520| drop
 524| return
 528| i32.const 1
 536| i32.load16_u $0:%[-1]+$2
 548| drop
 552| return
 556| i32.const 1
 564| i64.load8_s $0:%[-1]+$2
 576| drop
 580| return
 584| i32.const 1
 592| i64.load8_u $0:%[-1]+$2
 604| drop
 608| return
 612| i32.const 1
 620| i64.load16_s $0:%[-1]+$2
 632| drop
 636| return
 640| i32.const 1
 648| i64.load16_u $0:%[-1]+$2
 660| drop
 664| return
 668| i32.const 1
 676| i64.load32_s $0:%[-1]+$2
 688| drop
 692| return
 696| i32.const 1
 704| i64.load32_u $0:%[-1]+$2
 716| drop
 720| return
 724| i32.const 1
 732| i32.const 2
 740| i32.store $0:%[-2]+$2, %[-1]
 752| return
 756| i32.const 1
 764| i64.const 2
 776| i64.store $0:%[-2]+$2, %[-1]
 788| return
 792| i32.const 1
 800| f32.const 2
 808| f32.store $0:%[-2]+$2, %[-1]
 820| return
 824| i32.const 1
 832| f64.const 2
 844| f64.store $0:%[-2]+$2, %[-1]
 856| return
 860| i32.const 1
 868| i32.const 2
 876| i32.store8 $0:%[-2]+$2, %[-1]
 888| return
 892| i32.const 1
 900| i32.const 2
 908| i32.store16 $0:%[-2]+$2, %[-1]
 920| return
 924| i32.const 1
 932| i64.const 2
 944| i64.store8 $0:%[-2]+$2, %[-1]
 956| return
 960| i32.const 1
 968| i64.const 2
 980| i64.store16 $0:%[-2]+$2, %[-1]
 992| return
 996| i32.const 1
1004| i64.const 2
1016| i64.store32 $0:%[-2]+$2, %[-1]
1028| return
1032| memory.size $0
1040| drop
1044| return
1048| i32.const 1
1056| memory.grow $0:%[-1]
1064| drop
1068| return
1072| i32.const 1
1080| drop
1084| return
1088| i64.const 1
1100| drop
1104| return
1108| f32.const 1
1116| drop
1120| return
1124| f64.const 1
1136| drop
1140| return
1144| i32.const 1
1152| i32.eqz %[-1]
1156| drop
1160| return
1164| i32.const 1
1172| i32.const 2
1180| i32.eq %[-2], %[-1]
1184| drop
1188| return
1192| i32.const 1
1200| i32.const 2
1208| i32.ne %[-2], %[-1]
1212| drop
1216| return
1220| i32.const 1
1228| i32.const 2
1236| i32.lt_s %[-2], %[-1]
1240| drop
1244| return
1248| i32.const 1
1256| i32.const 2
1264| i32.lt_u %[-2], %[-1]
1268| drop
1272| return
1276| i32.const 1
1284| i32.const 2
1292| i32.gt_s %[-2], %[-1]
1296| drop
1300| return
1304| i32.const 1
1312| i32.const 2
1320| i32.gt_u %[-2], %[-1]
1324| drop
1328| return
1332| i32.const 1
1340| i32.const 2
1348| i32.le_s %[-2], %[-1]
1352| drop
1356| return
1360| i32.const 1
1368| i32.const 2
1376| i32.le_u %[-2], %[-1]
1380| drop
1384| return
1388| i32.const 1
1396| i32.const 2
1404| i32.ge_s %[-2], %[-1]
1408| drop
1412| return
1416| i32.const 1
1424| i32.const 2
1432| i32.ge_u %[-2], %[-1]
1436| drop
1440| return
1444| i64.const 1
1456| i64.eqz %[-1]
1460| drop
1464| return
1468| i64.const 1
1480| i64.const 2
1492| i64.eq %[-2], %[-1]
1496| drop
1500| return
1504| i64.const 1
1516| i64.const 2
1528| i64.ne %[-2], %[-1]
1532| drop
1536| return
1540| i64.const 1
1552| i64.const 2
1564| i64.lt_s %[-2], %[-1]
1568| drop
1572| return
1576| i64.const 1
1588| i64.const 2
1600| i64.lt_u %[-2], %[-1]
1604| drop
1608| return
1612| i64.const 1
1624| i64.const 2
1636| i64.gt_s %[-2], %[-1]
1640| drop
1644| return
1648| i64.const 1
1660| i64.const 2
1672| i64.gt_u %[-2], %[-1]
1676| drop
1680| return
1684| i64.const 1
1696| i64.const 2
1708| i64.le_s %[-2], %[-1]
1712| drop
1716| return
1720| i64.const 1
1732| i64.const 2
1744| i64.le_u %[-2], %[-1]
1748| drop
1752| return
1756| i64.const 1
1768| i64.const 2
1780| i64.ge_s %[-2], %[-1]
1784| drop
1788| return
1792| i64.const 1
1804| i64.const 2
1816| i64.ge_u %[-2], %[-1]
1820| drop
1824| return
1828| f32.const 1
1836| f32.const 2
1844| f32.eq %[-2], %[-1]
1848| drop
1852| return
1856| f32.const 1
1864| f32.const 2
1872| f32.ne %[-2], %[-1]
1876| drop
1880| return
1884| f32.const 1
1892| f32.const 2
1900| f32.lt %[-2], %[-1]
1904| drop
1908| return
1912| f32.const 1
1920| f32.const 2
1928| f32.gt %[-2], %[-1]
1932| drop
1936| return
1940| f32.const 1
1948| f32.const 2
1956| f32.le %[-2], %[-1]
1960| drop
1964| return
1968| f32.const 1
1976| f32.const 2
1984| f32.ge %[-2], %[-1]
1988| drop
1992| return
1996| f64.const 1
2008| f64.const 2
2020| f64.eq %[-2], %[-1]
2024| drop
2028| return
2032| f64.const 1
2044| f64.const 2
2056| f64.ne %[-2], %[-1]
2060| drop
2064| return
2068| f64.const 1
2080| f64.const 2
2092| f64.lt %[-2], %[-1]
2096| drop
2100| return
2104| f64.const 1
2116| f64.const 2
2128| f64.gt %[-2], %[-1]
2132| drop
2136| return
2140| f64.const 1
2152| f64.const 2
2164| f64.le %[-2], %[-1]
2168| drop
2172| return
2176| f64.const 1
2188| f64.const 2
2200| f64.ge %[-2], %[-1]
2204| drop
2208| return
2212| i32.const 1
2220| i32.clz %[-1]
2224| drop
2228| return
2232| i32.const 1
2240| i32.ctz %[-1]
2244| drop
2248| return
2252| i32.const 1
2260| i32.popcnt %[-1]
2264| drop
2268| return
2272| i32.const 1
2280| i32.const 2
2288| i32.add %[-2], %[-1]
2292| drop
2296| return
2300| i32.const 1
2308| i32.const 2
2316| i32.sub %[-2], %[-1]
2320| drop
2324| return
2328| i32.const 1
2336| i32.const 2
2344| i32.mul %[-2], %[-1]
2348| drop
2352| return
2356| i32.const 1
2364| i32.const 2
2372| i32.div_s %[-2], %[-1]
2376| drop
2380| return
2384| i32.const 1
2392| i32.const 2
2400| i32.div_u %[-2], %[-1]
2404| drop
2408| return
2412| i32.const 1
2420| i32.const 2
2428| i32.rem_s %[-2], %[-1]
2432| drop
2436| return
2440| i32.const 1
2448| i32.const 2
2456| i32.rem_u %[-2], %[-1]
2460| drop
2464| return
2468| i32.const 1
2476| i32.const 2
2484| i32.and %[-2], %[-1]
2488| drop
2492| return
2496| i32.const 1
2504| i32.const 2
2512| i32.or %[-2], %[-1]
2516| drop
2520| return
2524| i32.const 1
2532| i32.const 2
2540| i32.xor %[-2], %[-1]
2544| drop
2548| return
2552| i32.const 1
2560| i32.const 2
2568| i32.shl %[-2], %[-1]
2572| drop
2576| return
2580| i32.const 1
2588| i32.const 2
2596| i32.shr_s %[-2], %[-1]
2600| drop
2604| return
2608| i32.const 1
2616| i32.const 2
2624| i32.shr_u %[-2], %[-1]
2628| drop
2632| return
2636| i32.const 1
2644| i32.const 2
2652| i32.rotl %[-2], %[-1]
2656| drop
2660| return
2664| i32.const 1
2672| i32.const 2
2680| i32.rotr %[-2], %[-1]
2684| drop
2688| return
2692| i64.const 1
2704| i64.clz %[-1]
2708| drop
2712| return
2716| i64.const 1
2728| i64.ctz %[-1]
2732| drop
2736| return
2740| i64.const 1
2752| i64.popcnt %[-1]
2756| drop
2760| return
2764| i64.const 1
2776| i64.const 2
2788| i64.add %[-2], %[-1]
2792| drop
2796| return
2800| i64.const 1
2812| i64.const 2
2824| i64.sub %[-2], %[-1]
2828| drop
2832| return
2836| i64.const 1
2848| i64.const 2
2860| i64.mul %[-2], %[-1]
2864| drop
2868| return
2872| i64.const 1
2884| i64.const 2
2896| i64.div_s %[-2], %[-1]
2900| drop
2904| return
2908| i64.const 1
2920| i64.const 2
2932| i64.div_u %[-2], %[-1]
2936| drop
2940| return
2944| i64.const 1
2956| i64.const 2
2968| i64.rem_s %[-2], %[-1]
2972| drop
2976| return
2980| i64.const 1
2992| i64.const 2
3004| i64.rem_u %[-2], %[-1]
3008| drop
3012| return
3016| i64.const 1
3028| i64.const 2
3040| i64.and %[-2], %[-1]
3044| drop
3048| return
3052| i64.const 1
3064| i64.const 2
3076| i64.or %[-2], %[-1]
3080| drop
3084| return
3088| i64.const 1
3100| i64.const 2
3112| i64.xor %[-2], %[-1]
3116| drop
3120| return
3124| i64.const 1
3136| i64.const 2
3148| i64.shl %[-2], %[-1]
3152| drop
3156| return
3160| i64.const 1
3172| i64.const 2
3184| i64.shr_s %[-2], %[-1]
3188| drop
3192| return
3196| i64.const 1
3208| i64.const 2
3220| i64.shr_u %[-2], %[-1]
3224| drop
3228| return
3232| i64.const 1
3244| i64.const 2
3256| i64.rotl %[-2], %[-1]
3260| drop
3264| return
3268| i64.const 1
3280| i64.const 2
3292| i64.rotr %[-2], %[-1]
3296| drop
3300| return
3304| f32.const 1
3312| f32.abs %[-1]
3316| drop
3320| return
3324| f32.const 1
3332| f32.neg %[-1]
3336| drop
3340| return
3344| f32.const 1
3352| f32.ceil %[-1]
3356| drop
3360| return
3364| f32.const 1
3372| f32.floor %[-1]
3376| drop
3380| return
3384| f32.const 1
3392| f32.trunc %[-1]
3396| drop
3400| return
3404| f32.const 1
3412| f32.nearest %[-1]
3416| drop
3420| return
3424| f32.const 1
3432| f32.sqrt %[-1]
3436| drop
3440| return
3444| f32.const 1
3452| f32.const 2
3460| f32.add %[-2], %[-1]
3464| drop
3468| return
3472| f32.const 1
3480| f32.const 2
3488| f32.sub %[-2], %[-1]
3492| drop
3496| return
3500| f32.const 1
3508| f32.const 2
3516| f32.mul %[-2], %[-1]
3520| drop
3524| return
3528| f32.const 1
3536| f32.const 2
3544| f32.div %[-2], %[-1]
3548| drop
3552| return
3556| f32.const 1
3564| f32.const 2
3572| f32.min %[-2], %[-1]
3576| drop
3580| return
3584| f32.const 1
3592| f32.const 2
3600| f32.max %[-2], %[-1]
3604| drop
3608| return
3612| f32.const 1
3620| f32.const 2
3628| f32.copysign %[-2], %[-1]
3632| drop
3636| return
3640| f64.const 1
3652| f64.abs %[-1]
3656| drop
3660| return
3664| f64.const 1
3676| f64.neg %[-1]
3680| drop
3684| return
3688| f64.const 1
3700| f64.ceil %[-1]
3704| drop
3708| return
3712| f64.const 1
3724| f64.floor %[-1]
3728| drop
3732| return
3736| f64.const 1
3748| f64.trunc %[-1]
3752| drop
3756| return
3760| f64.const 1
3772| f64.nearest %[-1]
3776| drop
3780| return
3784| f64.const 1
3796| f64.sqrt %[-1]
3800| drop
3804| return
3808| f64.const 1
3820| f64.const 2
3832| f64.add %[-2], %[-1]
3836| drop
3840| return
3844| f64.const 1
3856| f64.const 2
3868| f64.sub %[-2], %[-1]
3872| drop
3876| return
3880| f64.const 1
3892| f64.const 2
3904| f64.mul %[-2], %[-1]
3908| drop
3912| return
3916| f64.const 1
3928| f64.const 2
3940| f64.div %[-2], %[-1]
3944| drop
3948| return
3952| f64.const 1
3964| f64.const 2
3976| f64.min %[-2], %[-1]
3980| drop
3984| return
3988| f64.const 1
4000| f64.const 2
4012| f64.max %[-2], %[-1]
4016| drop
4020| return
4024| f64.const 1
4036| f64.const 2
4048| f64.copysign %[-2], %[-1]
4052| drop
4056| return
4060| i64.const 1
4072| i32.wrap_i64 %[-1]
4076| drop
4080| return
4084| f32.const 1
4092| i32.trunc_f32_s %[-1]
4096| drop
4100| return
4104| f32.const 1
4112| i32.trunc_f32_u %[-1]
4116| drop
4120| return
4124| f64.const 1
4136| i32.trunc_f64_s %[-1]
4140| drop
4144| return
4148| f64.const 1
4160| i32.trunc_f64_u %[-1]
4164| drop
4168| return
4172| i32.const 1
4180| i64.extend_i32_s %[-1]
4184| drop
4188| return
4192| i32.const 1
4200| i64.extend_i32_u %[-1]
4204| drop
4208| return
4212| f32.const 1
4220| i64.trunc_f32_s %[-1]
4224| drop
4228| return
4232| f32.const 1
4240| i64.trunc_f32_u %[-1]
4244| drop
4248| return
4252| f64.const 1
4264| i64.trunc_f64_s %[-1]
4268| drop
4272| return
4276| f64.const 1
4288| i64.trunc_f64_u %[-1]
4292| drop
4296| return
4300| i32.const 1
4308| f32.convert_i32_s %[-1]
4312| drop
4316| return
4320| i32.const 1
4328| f32.convert_i32_u %[-1]
4332| drop
4336| return
4340| i64.const 1
4352| f32.convert_i64_s %[-1]
4356| drop
4360| return
4364| i64.const 1
4376| f32.convert_i64_u %[-1]
4380| drop
4384| return
4388| f64.const 1
4400| f32.demote_f64 %[-1]
4404| drop
4408| return
4412| i32.const 1
4420| f64.convert_i32_s %[-1]
4424| drop
4428| return
4432| i32.const 1
4440| f64.convert_i32_u %[-1]
4444| drop
4448| return
4452| i64.const 1
4464| f64.convert_i64_s %[-1]
4468| drop
4472| return
4476| i64.const 1
4488| f64.convert_i64_u %[-1]
4492| drop
4496| return
4500| f32.const 1
4508| f64.promote_f32 %[-1]
4512| drop
4516| return
4520| i32.const 1
4528| f32.reinterpret_i32 %[-1]
4532| drop
4536| return
4540| f32.const 1
4548| i32.reinterpret_f32 %[-1]
4552| drop
4556| return
4560| i64.const 1
4572| f64.reinterpret_i64 %[-1]
4576| drop
4580| return
4584| f64.const 1
4596| i64.reinterpret_f64 %[-1]
4600| drop
4604| return
4608| i32.const 1
4616| i32.extend8_s %[-1]
4620| drop
4624| return
4628| i32.const 1
4636| i32.extend16_s %[-1]
4640| drop
4644| return
4648| i64.const 1
4660| i64.extend8_s %[-1]
4664| drop
4668| return
4672| i64.const 1
4684| i64.extend16_s %[-1]
4688| drop
4692| return
4696| i64.const 1
4708| i64.extend32_s %[-1]
4712| drop
4716| return
4720| alloca $1
4728| drop
4732| return
4736| i32.const 1
4744| br_unless @4760, %[-1]
4752| br @4760
4760| return
4764| i32.const 1
4772| call_host $0
4780| return
4784| i32.const 1
4792| br_table %[-1], $#0, table:$4812
4804| data $12
4812|   entry 0: offset: 4824 drop: 0 keep: 0
4824| return
4828| i32.const 1
4836| i32.const 2
4844| drop_keep $1 $1
4856| br @4864
4864| drop
4868| return
4872| f32.const 1
4880| i32.trunc_sat_f32_s %[-1]
4884| drop
4888| return
4892| f32.const 1
4900| i32.trunc_sat_f32_u %[-1]
4904| drop
4908| return
4912| f64.const 1
4924| i32.trunc_sat_f64_s %[-1]
4928| drop
4932| return
4936| f64.const 1
4948| i32.trunc_sat_f64_u %[-1]
4952| drop
4956| return
4960| f32.const 1
4968| i64.trunc_sat_f32_s %[-1]
4972| drop
4976| return
4980| f32.const 1
4988| i64.trunc_sat_f32_u %[-1]
4992| drop
4996| return
5000| f64.const 1
5012| i64.trunc_sat_f64_s %[-1]
5016| drop
5020| return
5024| f64.const 1
5036| i64.trunc_sat_f64_u %[-1]
5040| drop
5044| return
5048| i32.const 1
5056| i32.const 2
5064| i32.const 3
5072| memory.init $0, $0, %[-3], %[-2], %[-1]
5084| return
5088| data.drop $0
5096| return
5100| i32.const 1
5108| i32.const 2
5116| i32.const 3
5124| memory.copy $0, %[-3], %[-2], %[-1]
5132| return
5136| i32.const 1
5144| i32.const 2
5152| i32.const 3
5160| memory.fill $0, %[-3], %[-2], %[-1]
5168| return
5172| i32.const 1
5180| i32.const 2
5188| i32.const 3
5196| table.init $0, $0, %[-3], %[-2], %[-1]
5208| return
5212| elem.drop $0
5220| return
5224| i32.const 1
5232| i32.const 2
5240| i32.const 3
5248| table.copy $0, %[-3], %[-2], %[-1]
5256| return
5260| i32.const 1
5268| v128.load $0:%[-1]+$3
5280| drop
5284| return
5288| i32.const 1
5296| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5316| v128.store $0:%[-2]+$3, %[-1]
5328| return
5332| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5352| drop
5356| return
5360| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5380| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
5400| v8x16.shuffle %[-2], %[-1] : (Lane imm: $0x01010101 0x01010101 0x01010101 0x01010101 )
5420| drop
5424| return
5428| i32.const 1
5436| i8x16.splat %[-1]
5440| drop
5444| return
5448| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5468| i8x16.extract_lane_s %[-1] : (Lane imm: 15)
5473| drop
5477| return
5481| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5501| i8x16.extract_lane_u %[-1] : (Lane imm: 15)
5506| drop
5510| return
5514| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5534| i32.const 0
5542| i8x16.replace_lane %[-1], %[-2] : (Lane imm: 15)
5547| drop
5551| return
5555| i32.const 1
5563| i16x8.splat %[-1]
5567| drop
5571| return
5575| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5595| i16x8.extract_lane_s %[-1] : (Lane imm: 7)
5600| drop
5604| return
5608| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5628| i16x8.extract_lane_u %[-1] : (Lane imm: 7)
5633| drop
5637| return
5641| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5661| i32.const 0
5669| i16x8.replace_lane %[-1], %[-2] : (Lane imm: 7)
5674| drop
5678| return
5682| i32.const 1
5690| i32x4.splat %[-1]
5694| drop
5698| return
5702| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5722| i32x4.extract_lane %[-1] : (Lane imm: 3)
5727| drop
5731| return
5735| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5755| i32.const 0
5763| i32x4.replace_lane %[-1], %[-2] : (Lane imm: 3)
5768| drop
5772| return
5776| i64.const 1
5788| i64x2.splat %[-1]
5792| drop
5796| return
5800| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5820| i64x2.extract_lane %[-1] : (Lane imm: 1)
5825| drop
5829| return
5833| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5853| i64.const 0
5865| i64x2.replace_lane %[-1], %[-2] : (Lane imm: 1)
5870| drop
5874| return
5878| f32.const 1
5886| f32x4.splat %[-1]
5890| drop
5894| return
5898| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5918| f32x4.extract_lane %[-1] : (Lane imm: 3)
5923| drop
5927| return
5931| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5951| f32.const 0
5959| f32x4.replace_lane %[-1], %[-2] : (Lane imm: 3)
5964| drop
5968| return
5972| f64.const 1
5984| f64x2.splat %[-1]
5988| drop
5992| return
5996| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6016| f64x2.extract_lane %[-1] : (Lane imm: 1)
6021| drop
6025| return
6029| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6049| f64.const 0
6061| f64x2.replace_lane %[-1], %[-2] : (Lane imm: 1)
6066| drop
6070| return
6074| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6094| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6114| i8x16.eq %[-2], %[-1]
6118| drop
6122| return
6126| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6146| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6166| i8x16.ne %[-2], %[-1]
6170| drop
6174| return
6178| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6198| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6218| i8x16.lt_s %[-2], %[-1]
6222| drop
6226| return
6230| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6250| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6270| i8x16.lt_u %[-2], %[-1]
6274| drop
6278| return
6282| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6302| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6322| i8x16.gt_s %[-2], %[-1]
6326| drop
6330| return
6334| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6354| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6374| i8x16.gt_u %[-2], %[-1]
6378| drop
6382| return
6386| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6406| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6426| i8x16.le_s %[-2], %[-1]
6430| drop
6434| return
6438| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6458| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6478| i8x16.le_u %[-2], %[-1]
6482| drop
6486| return
6490| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6510| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6530| i8x16.ge_s %[-2], %[-1]
6534| drop
6538| return
6542| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6562| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6582| i8x16.ge_u %[-2], %[-1]
6586| drop
6590| return
6594| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6614| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6634| i16x8.eq %[-2], %[-1]
6638| drop
6642| return
6646| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6666| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6686| i16x8.ne %[-2], %[-1]
6690| drop
6694| return
6698| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6718| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6738| i16x8.lt_s %[-2], %[-1]
6742| drop
6746| return
6750| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6770| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6790| i16x8.lt_u %[-2], %[-1]
6794| drop
6798| return
6802| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6822| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6842| i16x8.gt_s %[-2], %[-1]
6846| drop
6850| return
6854| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6874| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6894| i16x8.gt_u %[-2], %[-1]
6898| drop
6902| return
6906| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6926| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6946| i16x8.le_s %[-2], %[-1]
6950| drop
6954| return
6958| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6978| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6998| i16x8.le_u %[-2], %[-1]
7002| drop
7006| return
7010| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7030| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7050| i16x8.ge_s %[-2], %[-1]
7054| drop
7058| return
7062| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7082| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7102| i16x8.ge_u %[-2], %[-1]
7106| drop
7110| return
7114| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7134| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7154| i32x4.eq %[-2], %[-1]
7158| drop
7162| return
7166| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7186| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7206| i32x4.ne %[-2], %[-1]
7210| drop
7214| return
7218| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7238| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7258| i32x4.lt_s %[-2], %[-1]
7262| drop
7266| return
7270| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7290| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7310| i32x4.lt_u %[-2], %[-1]
7314| drop
7318| return
7322| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7342| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7362| i32x4.gt_s %[-2], %[-1]
7366| drop
7370| return
7374| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7394| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7414| i32x4.gt_u %[-2], %[-1]
7418| drop
7422| return
7426| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7446| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7466| i32x4.le_s %[-2], %[-1]
7470| drop
7474| return
7478| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7498| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7518| i32x4.le_u %[-2], %[-1]
7522| drop
7526| return
7530| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7550| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7570| i32x4.ge_s %[-2], %[-1]
7574| drop
7578| return
7582| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7602| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7622| i32x4.ge_u %[-2], %[-1]
7626| drop
7630| return
7634| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7654| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7674| f32x4.eq %[-2], %[-1]
7678| drop
7682| return
7686| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7706| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7726| f32x4.ne %[-2], %[-1]
7730| drop
7734| return
7738| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7758| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7778| f32x4.lt %[-2], %[-1]
7782| drop
7786| return
7790| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7810| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7830| f32x4.gt %[-2], %[-1]
7834| drop
7838| return
7842| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7862| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7882| f32x4.le %[-2], %[-1]
7886| drop
7890| return
7894| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7914| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7934| f32x4.ge %[-2], %[-1]
7938| drop
7942| return
7946| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7966| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7986| f64x2.eq %[-2], %[-1]
7990| drop
7994| return
7998| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8018| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8038| f64x2.ne %[-2], %[-1]
8042| drop
8046| return
8050| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8070| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8090| f64x2.lt %[-2], %[-1]
8094| drop
8098| return
8102| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8122| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8142| f64x2.gt %[-2], %[-1]
8146| drop
8150| return
8154| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8174| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8194| f64x2.le %[-2], %[-1]
8198| drop
8202| return
8206| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8226| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8246| f64x2.ge %[-2], %[-1]
8250| drop
8254| return
8258| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8278| v128.not %[-1]
8282| drop
8286| return
8290| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8310| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8330| v128.and %[-2], %[-1]
8334| drop
8338| return
8342| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8362| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8382| v128.or %[-2], %[-1]
8386| drop
8390| return
8394| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8414| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8434| v128.xor %[-2], %[-1]
8438| drop
8442| return
8446| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8466| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8486| v128.const i32x4 0x00000003 0x00000003 0x00000003 0x00000003
8506| v128.bitselect %[-3], %[-2], %[-1]
8510| drop
8514| return
8518| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8538| i8x16.neg %[-1]
8542| drop
8546| return
8550| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8570| i8x16.any_true %[-1]
8574| drop
8578| return
8582| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8602| i8x16.all_true %[-1]
8606| drop
8610| return
8614| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8634| i32.const 0
8642| i8x16.shl %[-2], %[-1]
8646| drop
8650| return
8654| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8674| i32.const 0
8682| i8x16.shr_s %[-2], %[-1]
8686| drop
8690| return
8694| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8714| i32.const 0
8722| i8x16.shr_u %[-2], %[-1]
8726| drop
8730| return
8734| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8754| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8774| i8x16.add %[-2], %[-1]
8778| drop
8782| return
8786| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8806| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8826| i8x16.add_saturate_s %[-2], %[-1]
8830| drop
8834| return
8838| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8858| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8878| i8x16.add_saturate_u %[-2], %[-1]
8882| drop
8886| return
8890| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8910| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8930| i8x16.sub %[-2], %[-1]
8934| drop
8938| return
8942| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8962| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8982| i8x16.sub_saturate_s %[-2], %[-1]
8986| drop
8990| return
8994| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9014| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9034| i8x16.sub_saturate_u %[-2], %[-1]
9038| drop
9042| return
9046| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9066| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9086| i8x16.mul %[-2], %[-1]
9090| drop
9094| return
9098| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9118| i16x8.neg %[-1]
9122| drop
9126| return
9130| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9150| i16x8.any_true %[-1]
9154| drop
9158| return
9162| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9182| i16x8.all_true %[-1]
9186| drop
9190| return
9194| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9214| i32.const 0
9222| i16x8.shl %[-2], %[-1]
9226| drop
9230| return
9234| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9254| i32.const 0
9262| i16x8.shr_s %[-2], %[-1]
9266| drop
9270| return
9274| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9294| i32.const 0
9302| i16x8.shr_u %[-2], %[-1]
9306| drop
9310| return
9314| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9334| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9354| i16x8.add %[-2], %[-1]
9358| drop
9362| return
9366| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9386| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9406| i16x8.add_saturate_s %[-2], %[-1]
9410| drop
9414| return
9418| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9438| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9458| i16x8.add_saturate_u %[-2], %[-1]
9462| drop
9466| return
9470| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9490| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9510| i16x8.sub %[-2], %[-1]
9514| drop
9518| return
9522| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9542| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9562| i16x8.sub_saturate_s %[-2], %[-1]
9566| drop
9570| return
9574| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9594| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9614| i16x8.sub_saturate_u %[-2], %[-1]
9618| drop
9622| return
9626| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9646| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9666| i16x8.mul %[-2], %[-1]
9670| drop
9674| return
9678| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9698| i32x4.neg %[-1]
9702| drop
9706| return
9710| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9730| i32x4.any_true %[-1]
9734| drop
9738| return
9742| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9762| i32x4.all_true %[-1]
9766| drop
9770| return
9774| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9794| i32.const 0
9802| i32x4.shl %[-2], %[-1]
9806| drop
9810| return
9814| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9834| i32.const 0
9842| i32x4.shr_s %[-2], %[-1]
9846| drop
9850| return
9854| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9874| i32.const 0
9882| i32x4.shr_u %[-2], %[-1]
9886| drop
9890| return
9894| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9914| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9934| i32x4.add %[-2], %[-1]
9938| drop
9942| return
9946| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9966| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9986| i32x4.sub %[-2], %[-1]
9990| drop
9994| return
9998| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10018| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10038| i32x4.mul %[-2], %[-1]
10042| drop
10046| return
10050| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10070| i64x2.neg %[-1]
10074| drop
10078| return
10082| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10102| i64x2.any_true %[-1]
10106| drop
10110| return
10114| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10134| i64x2.all_true %[-1]
10138| drop
10142| return
10146| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10166| i32.const 0
10174| i64x2.shl %[-2], %[-1]
10178| drop
10182| return
10186| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10206| i32.const 0
10214| i64x2.shr_s %[-2], %[-1]
10218| drop
10222| return
10226| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10246| i32.const 0
10254| i64x2.shr_u %[-2], %[-1]
10258| drop
10262| return
10266| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10286| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10306| i64x2.add %[-2], %[-1]
10310| drop
10314| return
10318| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10338| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10358| i64x2.sub %[-2], %[-1]
10362| drop
10366| return
10370| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10390| f32x4.abs %[-1]
10394| drop
10398| return
10402| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10422| f32x4.neg %[-1]
10426| drop
10430| return
10434| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10454| f32x4.sqrt %[-1]
10458| drop
10462| return
10466| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10486| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10506| f32x4.add %[-2], %[-1]
10510| drop
10514| return
10518| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10538| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10558| f32x4.sub %[-2], %[-1]
10562| drop
10566| return
10570| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10590| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10610| f32x4.mul %[-2], %[-1]
10614| drop
10618| return
10622| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10642| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10662| f32x4.div %[-2], %[-1]
10666| drop
10670| return
10674| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10694| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10714| f32x4.min %[-2], %[-1]
10718| drop
10722| return
10726| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10746| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10766| f32x4.max %[-2], %[-1]
10770| drop
10774| return
10778| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10798| f64x2.abs %[-1]
10802| drop
10806| return
10810| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10830| f64x2.neg %[-1]
10834| drop
10838| return
10842| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10862| f64x2.sqrt %[-1]
10866| drop
10870| return
10874| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10894| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10914| f64x2.add %[-2], %[-1]
10918| drop
10922| return
10926| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10946| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10966| f64x2.sub %[-2], %[-1]
10970| drop
10974| return
10978| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10998| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
11018| f64x2.mul %[-2], %[-1]
11022| drop
11026| return
11030| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11050| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
11070| f64x2.div %[-2], %[-1]
11074| drop
11078| return
11082| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11102| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
11122| f64x2.min %[-2], %[-1]
11126| drop
11130| return
11134| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11154| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
11174| f64x2.max %[-2], %[-1]
11178| drop
11182| return
11186| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11206| i32x4.trunc_sat_f32x4_s %[-1]
11210| drop
11214| return
11218| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11238| i32x4.trunc_sat_f32x4_u %[-1]
11242| drop
11246| return
11250| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11270| i64x2.trunc_sat_f64x2_s %[-1]
11274| drop
11278| return
11282| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11302| i64x2.trunc_sat_f64x2_u %[-1]
11306| drop
11310| return
11314| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11334| f32x4.convert_i32x4_s %[-1]
11338| drop
11342| return
11346| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11366| f32x4.convert_i32x4_u %[-1]
11370| drop
11374| return
11378| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11398| f64x2.convert_i64x2_s %[-1]
11402| drop
11406| return
11410| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11430| f64x2.convert_i64x2_u %[-1]
11434| drop
11438| return
11442| i32.const 1
11450| i32.const 2
11458| atomic.notify $0:%[-2]+$3, %[-1]
11470| drop
11474| return
11478| i32.const 1
11486| i32.const 2
11494| i64.const 3
11506| i32.atomic.wait $0:%[-3]+$3, %[-2], %[-1]
11518| drop
11522| return
11526| i32.const 1
11534| i64.const 2
11546| i64.const 3
11558| i64.atomic.wait $0:%[-3]+$3, %[-2], %[-1]
11570| drop
11574| return
11578| i32.const 1
11586| i32.atomic.load $0:%[-1]+$3
11598| drop
11602| return
11606| i32.const 1
11614| i64.atomic.load $0:%[-1]+$7
11626| drop
11630| return
11634| i32.const 1
11642| i32.atomic.load8_u $0:%[-1]+$3
11654| drop
11658| return
11662| i32.const 1
11670| i32.atomic.load16_u $0:%[-1]+$3
11682| drop
11686| return
11690| i32.const 1
11698| i64.atomic.load8_u $0:%[-1]+$3
11710| drop
11714| return
11718| i32.const 1
11726| i64.atomic.load16_u $0:%[-1]+$3
11738| drop
11742| return
11746| i32.const 1
11754| i64.atomic.load32_u $0:%[-1]+$3
11766| drop
11770| return
11774| i32.const 1
11782| i32.const 2
11790| i32.atomic.store $0:%[-2]+$3, %[-1]
11802| return
11806| i32.const 1
11814| i64.const 2
11826| i64.atomic.store $0:%[-2]+$7, %[-1]
11838| return
11842| i32.const 1
11850| i32.const 2
11858| i32.atomic.store8 $0:%[-2]+$3, %[-1]
11870| return
11874| i32.const 1
11882| i32.const 2
11890| i32.atomic.store16 $0:%[-2]+$3, %[-1]
11902| return
11906| i32.const 1
11914| i64.const 2
11926| i64.atomic.store8 $0:%[-2]+$3, %[-1]
11938| return
11942| i32.const 1
11950| i64.const 2
11962| i64.atomic.store16 $0:%[-2]+$3, %[-1]
11974| return
11978| i32.const 1
11986| i64.const 2
11998| i64.atomic.store32 $0:%[-2]+$3, %[-1]
12010| return
12014| i32.const 1
12022| i32.const 2
12030| i32.atomic.rmw.add $0:%[-2]+$3, %[-1]
12042| drop
12046| return
12050| i32.const 1
12058| i64.const 2
12070| i64.atomic.rmw.add $0:%[-2]+$7, %[-1]
12082| drop
12086| return
12090| i32.const 1
12098| i32.const 2
12106| i32.atomic.rmw8.add_u $0:%[-2]+$3, %[-1]
12118| drop
12122| return
12126| i32.const 1
12134| i32.const 2
12142| i32.atomic.rmw16.add_u $0:%[-2]+$3, %[-1]
12154| drop
12158| return
12162| i32.const 1
12170| i64.const 2
12182| i64.atomic.rmw8.add_u $0:%[-2]+$3, %[-1]
12194| drop
12198| return
12202| i32.const 1
12210| i64.const 2
12222| i64.atomic.rmw16.add_u $0:%[-2]+$3, %[-1]
12234| drop
12238| return
12242| i32.const 1
12250| i64.const 2
12262| i64.atomic.rmw32.add_u $0:%[-2]+$3, %[-1]
12274| drop
12278| return
12282| i32.const 1
12290| i32.const 2
12298| i32.atomic.rmw.sub $0:%[-2]+$3, %[-1]
12310| drop
12314| return
12318| i32.const 1
12326| i64.const 2
12338| i64.atomic.rmw.sub $0:%[-2]+$7, %[-1]
12350| drop
12354| return
12358| i32.const 1
12366| i32.const 2
12374| i32.atomic.rmw8.sub_u $0:%[-2]+$3, %[-1]
12386| drop
12390| return
12394| i32.const 1
12402| i32.const 2
12410| i32.atomic.rmw16.sub_u $0:%[-2]+$3, %[-1]
12422| drop
12426| return
12430| i32.const 1
12438| i64.const 2
12450| i64.atomic.rmw8.sub_u $0:%[-2]+$3, %[-1]
12462| drop
12466| return
12470| i32.const 1
12478| i64.const 2
12490| i64.atomic.rmw16.sub_u $0:%[-2]+$3, %[-1]
12502| drop
12506| return
12510| i32.const 1
12518| i64.const 2
12530| i64.atomic.rmw32.sub_u $0:%[-2]+$3, %[-1]
12542| drop
12546| return
12550| i32.const 1
12558| i32.const 2
12566| i32.atomic.rmw.and $0:%[-2]+$3, %[-1]
12578| drop
12582| return
12586| i32.const 1
12594| i64.const 2
12606| i64.atomic.rmw.and $0:%[-2]+$7, %[-1]
12618| drop
12622| return
12626| i32.const 1
12634| i32.const 2
12642| i32.atomic.rmw8.and_u $0:%[-2]+$3, %[-1]
12654| drop
12658| return
12662| i32.const 1
12670| i32.const 2
12678| i32.atomic.rmw16.and_u $0:%[-2]+$3, %[-1]
12690| drop
12694| return
12698| i32.const 1
12706| i64.const 2
12718| i64.atomic.rmw8.and_u $0:%[-2]+$3, %[-1]
12730| drop
12734| return
12738| i32.const 1
12746| i64.const 2
12758| i64.atomic.rmw16.and_u $0:%[-2]+$3, %[-1]
12770| drop
12774| return
12778| i32.const 1
12786| i64.const 2
12798| i64.atomic.rmw32.and_u $0:%[-2]+$3, %[-1]
12810| drop
12814| return
12818| i32.const 1
12826| i32.const 2
12834| i32.atomic.rmw.or $0:%[-2]+$3, %[-1]
12846| drop
12850| return
12854| i32.const 1
12862| i64.const 2
12874| i64.atomic.rmw.or $0:%[-2]+$7, %[-1]
12886| drop
12890| return
12894| i32.const 1
12902| i32.const 2
12910| i32.atomic.rmw8.or_u $0:%[-2]+$3, %[-1]
12922| drop
12926| return
12930| i32.const 1
12938| i32.const 2
12946| i32.atomic.rmw16.or_u $0:%[-2]+$3, %[-1]
12958| drop
12962| return
12966| i32.const 1
12974| i64.const 2
12986| i64.atomic.rmw8.or_u $0:%[-2]+$3, %[-1]
12998| drop
13002| return
13006| i32.const 1
13014| i64.const 2
13026| i64.atomic.rmw16.or_u $0:%[-2]+$3, %[-1]
13038| drop
13042| return
13046| i32.const 1
13054| i64.const 2
13066| i64.atomic.rmw32.or_u $0:%[-2]+$3, %[-1]
13078| drop
13082| return
13086| i32.const 1
13094| i32.const 2
13102| i32.atomic.rmw.xor $0:%[-2]+$3, %[-1]
13114| drop
13118| return
13122| i32.const 1
13130| i64.const 2
13142| i64.atomic.rmw.xor $0:%[-2]+$7, %[-1]
13154| drop
13158| return
13162| i32.const 1
13170| i32.const 2
13178| i32.atomic.rmw8.xor_u $0:%[-2]+$3, %[-1]
13190| drop
13194| return
13198| i32.const 1
13206| i32.const 2
13214| i32.atomic.rmw16.xor_u $0:%[-2]+$3, %[-1]
13226| drop
13230| return
13234| i32.const 1
13242| i64.const 2
13254| i64.atomic.rmw8.xor_u $0:%[-2]+$3, %[-1]
13266| drop
13270| return
13274| i32.const 1
13282| i64.const 2
13294| i64.atomic.rmw16.xor_u $0:%[-2]+$3, %[-1]
13306| drop
13310| return
13314| i32.const 1
13322| i64.const 2
13334| i64.atomic.rmw32.xor_u $0:%[-2]+$3, %[-1]
13346| drop
13350| return
13354| i32.const 1
13362| i32.const 2
13370| i32.atomic.rmw.xchg $0:%[-2]+$3, %[-1]
13382| drop
13386| return
13390| i32.const 1
13398| i64.const 2
13410| i64.atomic.rmw.xchg $0:%[-2]+$7, %[-1]
13422| drop
13426| return
13430| i32.const 1
13438| i32.const 2
13446| i32.atomic.rmw8.xchg_u $0:%[-2]+$3, %[-1]
13458| drop
13462| return
13466| i32.const 1
13474| i32.const 2
13482| i32.atomic.rmw16.xchg_u $0:%[-2]+$3, %[-1]
13494| drop
13498| return
13502| i32.const 1
13510| i64.const 2
13522| i64.atomic.rmw8.xchg_u $0:%[-2]+$3, %[-1]
13534| drop
13538| return
13542| i32.const 1
13550| i64.const 2
13562| i64.atomic.rmw16.xchg_u $0:%[-2]+$3, %[-1]
13574| drop
13578| return
13582| i32.const 1
13590| i64.const 2
13602| i64.atomic.rmw32.xchg_u $0:%[-2]+$3, %[-1]
13614| drop
13618| return
13622| i32.const 1
13630| i32.const 2
13638| i32.const 3
13646| i32.atomic.rmw.cmpxchg $0:%[-3]+$3, %[-2], %[-1]
13658| drop
13662| return
13666| i32.const 1
13674| i64.const 2
13686| i64.const 3
13698| i64.atomic.rmw.cmpxchg $0:%[-3]+$7, %[-2], %[-1]
13710| drop
13714| return
13718| i32.const 1
13726| i32.const 2
13734| i32.const 3
13742| i32.atomic.rmw8.cmpxchg_u $0:%[-3]+$3, %[-2], %[-1]
13754| drop
13758| return
13762| i32.const 1
13770| i32.const 2
13778| i32.const 3
13786| i32.atomic.rmw16.cmpxchg_u $0:%[-3]+$3, %[-2], %[-1]
13798| drop
13802| return
13806| i32.const 1
13814| i64.const 2
13826| i64.const 3
13838| i64.atomic.rmw8.cmpxchg_u $0:%[-3]+$3, %[-2], %[-1]
13850| drop
13854| return
13858| i32.const 1
13866| i64.const 2
13878| i64.const 3
13890| i64.atomic.rmw16.cmpxchg_u $0:%[-3]+$3, %[-2], %[-1]
13902| drop
13906| return
13910| i32.const 1
13918| i64.const 2
13930| i64.const 3
13942| i64.atomic.rmw32.cmpxchg_u $0:%[-3]+$3, %[-2], %[-1]
13954| drop
13958| return
unreachable() => error: unreachable executed
br() =>
br_table() =>
return() =>
call() =>
call_indirect() =>
return_call() =>
return_call_indirect() =>
drop() =>
select() =>
get_local() =>
set_local() =>
tee_local() =>
get_global() =>
set_global() =>
i32.load() =>
i64.load() =>
f32.load() =>
f64.load() =>
i32.load8_s() =>
i32.load8_u() =>
i32.load16_s() =>
i32.load16_u() =>
i64.load8_s() =>
i64.load8_u() =>
i64.load16_s() =>
i64.load16_u() =>
i64.load32_s() =>
i64.load32_u() =>
i32.store() =>
i64.store() =>
f32.store() =>
f64.store() =>
i32.store8() =>
i32.store16() =>
i64.store8() =>
i64.store16() =>
i64.store32() =>
current_memory() =>
grow_memory() =>
i32.const() =>
i64.const() =>
f32.const() =>
f64.const() =>
i32.eqz() =>
i32.eq() =>
i32.ne() =>
i32.lt_s() =>
i32.lt_u() =>
i32.gt_s() =>
i32.gt_u() =>
i32.le_s() =>
i32.le_u() =>
i32.ge_s() =>
i32.ge_u() =>
i64.eqz() =>
i64.eq() =>
i64.ne() =>
i64.lt_s() =>
i64.lt_u() =>
i64.gt_s() =>
i64.gt_u() =>
i64.le_s() =>
i64.le_u() =>
i64.ge_s() =>
i64.ge_u() =>
f32.eq() =>
f32.ne() =>
f32.lt() =>
f32.gt() =>
f32.le() =>
f32.ge() =>
f64.eq() =>
f64.ne() =>
f64.lt() =>
f64.gt() =>
f64.le() =>
f64.ge() =>
i32.clz() =>
i32.ctz() =>
i32.popcnt() =>
i32.add() =>
i32.sub() =>
i32.mul() =>
i32.div_s() =>
i32.div_u() =>
i32.rem_s() =>
i32.rem_u() =>
i32.and() =>
i32.or() =>
i32.xor() =>
i32.shl() =>
i32.shr_s() =>
i32.shr_u() =>
i32.rotl() =>
i32.rotr() =>
i64.clz() =>
i64.ctz() =>
i64.popcnt() =>
i64.add() =>
i64.sub() =>
i64.mul() =>
i64.div_s() =>
i64.div_u() =>
i64.rem_s() =>
i64.rem_u() =>
i64.and() =>
i64.or() =>
i64.xor() =>
i64.shl() =>
i64.shr_s() =>
i64.shr_u() =>
i64.rotl() =>
i64.rotr() =>
f32.abs() =>
f32.neg() =>
f32.ceil() =>
f32.floor() =>
f32.trunc() =>
f32.nearest() =>
f32.sqrt() =>
f32.add() =>
f32.sub() =>
f32.mul() =>
f32.div() =>
f32.min() =>
f32.max() =>
f32.copysign() =>
f64.abs() =>
f64.neg() =>
f64.ceil() =>
f64.floor() =>
f64.trunc() =>
f64.nearest() =>
f64.sqrt() =>
f64.add() =>
f64.sub() =>
f64.mul() =>
f64.div() =>
f64.min() =>
f64.max() =>
f64.copysign() =>
i32.wrap/i64() =>
i32.trunc_s/f32() =>
i32.trunc_u/f32() =>
i32.trunc_s/f64() =>
i32.trunc_u/f64() =>
i64.extend_s/i32() =>
i64.extend_u/i32() =>
i64.trunc_s/f32() =>
i64.trunc_u/f32() =>
i64.trunc_s/f64() =>
i64.trunc_u/f64() =>
f32.convert_s/i32() =>
f32.convert_u/i32() =>
f32.convert_s/i64() =>
f32.convert_u/i64() =>
f32.demote/f64() =>
f64.convert_s/i32() =>
f64.convert_u/i32() =>
f64.convert_s/i64() =>
f64.convert_u/i64() =>
f64.promote/f32() =>
i32.reinterpret/f32() =>
f32.reinterpret/i32() =>
i64.reinterpret/f64() =>
f64.reinterpret/i64() =>
i32.extend8_s() =>
i32.extend16_s() =>
i64.extend8_s() =>
i64.extend16_s() =>
i64.extend32_s() =>
alloca() =>
br_unless() =>
called host host.print(i32:1) =>
call_host() =>
data() =>
drop_keep() =>
i32.trunc_s:sat/f32() =>
i32.trunc_u:sat/f32() =>
i32.trunc_s:sat/f64() =>
i32.trunc_u:sat/f64() =>
i64.trunc_s:sat/f32() =>
i64.trunc_u:sat/f32() =>
i64.trunc_s:sat/f64() =>
i64.trunc_u:sat/f64() =>
memory.init() => error: out of bounds memory access
data.drop() =>
memory.copy() =>
memory.fill() =>
table.init() => error: element segment dropped
elem.drop() => error: element segment dropped
table.copy() => error: out of bounds table access
v128.load() =>
v128.store() =>
v128.const() =>
v8x16.shuffle() =>
i8x16.splat() =>
i8x16.extract_lane_s() =>
i8x16.extract_lane_u() =>
i8x16.replace_lane() =>
i16x8.splat() =>
i16x8.extract_lane_s() =>
i16x8.extract_lane_u() =>
i16x8.replace_lane() =>
i32x4.splat() =>
i32x4.extract_lane() =>
i32x4.replace_lane() =>
i64x2.splat() =>
i64x2.extract_lane() =>
i64x2.replace_lane() =>
f32x4.splat() =>
f32x4.extract_lane() =>
f32x4.replace_lane() =>
f64x2.splat() =>
f64x2.extract_lane() =>
f64x2.replace_lane() =>
i8x16.eq() =>
i8x16.ne() =>
i8x16.lt_s() =>
i8x16.lt_u() =>
i8x16.gt_s() =>
i8x16.gt_u() =>
i8x16.le_s() =>
i8x16.le_u() =>
i8x16.ge_s() =>
i8x16.ge_u() =>
i16x8.eq() =>
i16x8.ne() =>
i16x8.lt_s() =>
i16x8.lt_u() =>
i16x8.gt_s() =>
i16x8.gt_u() =>
i16x8.le_s() =>
i16x8.le_u() =>
i16x8.ge_s() =>
i16x8.ge_u() =>
i32x4.eq() =>
i32x4.ne() =>
i32x4.lt_s() =>
i32x4.lt_u() =>
i32x4.gt_s() =>
i32x4.gt_u() =>
i32x4.le_s() =>
i32x4.le_u() =>
i32x4.ge_s() =>
i32x4.ge_u() =>
f32x4.eq() =>
f32x4.ne() =>
f32x4.lt() =>
f32x4.gt() =>
f32x4.le() =>
f32x4.ge() =>
f64x2.eq() =>
f64x2.ne() =>
f64x2.lt() =>
f64x2.gt() =>
f64x2.le() =>
f64x2.ge() =>
v128.not() =>
v128.and() =>
v128.or() =>
v128.xor() =>
v128.bitselect() =>
i8x16.neg() =>
i8x16.any_true() =>
i8x16.all_true() =>
i8x16.shl() =>
i8x16.shr_s() =>
i8x16.shr_u() =>
i8x16.add() =>
i8x16.add_saturate_s() =>
i8x16.add_saturate_u() =>
i8x16.sub() =>
i8x16.sub_saturate_s() =>
i8x16.sub_saturate_u() =>
i8x16.mul() =>
i16x8.neg() =>
i16x8.any_true() =>
i16x8.all_true() =>
i16x8.shl() =>
i16x8.shr_s() =>
i16x8.shr_u() =>
i16x8.add() =>
i16x8.add_saturate_s() =>
i16x8.add_saturate_u() =>
i16x8.sub() =>
i16x8.sub_saturate_s() =>
i16x8.sub_saturate_u() =>
i16x8.mul() =>
i32x4.neg() =>
i32x4.any_true() =>
i32x4.all_true() =>
i32x4.shl() =>
i32x4.shr_s() =>
i32x4.shr_u() =>
i32x4.add() =>
i32x4.sub() =>
i32x4.mul() =>
i64x2.neg() =>
i64x2.any_true() =>
i64x2.all_true() =>
i64x2.shl() =>
i64x2.shr_s() =>
i64x2.shr_u() =>
i64x2.add() =>
i64x2.sub() =>
f32x4.abs() =>
f32x4.neg() =>
f32x4.sqrt() =>
f32x4.add() =>
f32x4.sub() =>
f32x4.mul() =>
f32x4.div() =>
f32x4.min() =>
f32x4.max() =>
f64x2.abs() =>
f64x2.neg() =>
f64x2.sqrt() =>
f64x2.add() =>
f64x2.sub() =>
f64x2.mul() =>
f64x2.div() =>
f64x2.min() =>
f64x2.max() =>
i32x4.trunc_sat_f32x4_s() =>
i32x4.trunc_sat_f32x4_u() =>
i64x2.trunc_sat_f64x2_s() =>
i64x2.trunc_sat_f64x2_u() =>
f32x4.convert_i32x4_s() =>
f32x4.convert_i32x4_u() =>
f64x2.convert_i64x2_s() =>
f64x2.convert_i64x2_u() =>
atomic.notify() => error: unreachable executed
i32.atomic.wait() => error: unreachable executed
i64.atomic.wait() => error: unreachable executed
i32.atomic.load() =>
i64.atomic.load() =>
i32.atomic.load8_u() =>
i32.atomic.load16_u() =>
i64.atomic.load8_u() =>
i64.atomic.load16_u() =>
i64.atomic.load32_u() =>
i32.atomic.store() =>
i64.atomic.store() =>
i32.atomic.store8() =>
i32.atomic.store16() =>
i64.atomic.store8() =>
i64.atomic.store16() =>
i64.atomic.store32() =>
i32.atomic.rmw.add() =>
i64.atomic.rmw.add() =>
i32.atomic.rmw8.add_u() =>
i32.atomic.rmw16.add_u() =>
i64.atomic.rmw8.add_u() =>
i64.atomic.rmw16.add_u() =>
i64.atomic.rmw32.add_u() =>
i32.atomic.rmw.sub() =>
i64.atomic.rmw.sub() =>
i32.atomic.rmw8.sub_u() =>
i32.atomic.rmw16.sub_u() =>
i64.atomic.rmw8.sub_u() =>
i64.atomic.rmw16.sub_u() =>
i64.atomic.rmw32.sub_u() =>
i32.atomic.rmw.and() =>
i64.atomic.rmw.and() =>
i32.atomic.rmw8.and_u() =>
i32.atomic.rmw16.and_u() =>
i64.atomic.rmw8.and_u() =>
i64.atomic.rmw16.and_u() =>
i64.atomic.rmw32.and_u() =>
i32.atomic.rmw.or() =>
i64.atomic.rmw.or() =>
i32.atomic.rmw8.or_u() =>
i32.atomic.rmw16.or_u() =>
i64.atomic.rmw8.or_u() =>
i64.atomic.rmw16.or_u() =>
i64.atomic.rmw32.or_u() =>
i32.atomic.rmw.xor() =>
i64.atomic.rmw.xor() =>
i32.atomic.rmw8.xor_u() =>
i32.atomic.rmw16.xor_u() =>
i64.atomic.rmw8.xor_u() =>
i64.atomic.rmw16.xor_u() =>
i64.atomic.rmw32.xor_u() =>
i32.atomic.rmw.xchg() =>
i64.atomic.rmw.xchg() =>
i32.atomic.rmw8.xchg_u() =>
i32.atomic.rmw16.xchg_u() =>
i64.atomic.rmw8.xchg_u() =>
i64.atomic.rmw16.xchg_u() =>
i64.atomic.rmw32.xchg_u() =>
i32.atomic.rmw.cmpxchg() =>
i64.atomic.rmw.cmpxchg() =>
i32.atomic.rmw8.cmpxchg_u() =>
i32.atomic.rmw16.cmpxchg_u() =>
i64.atomic.rmw8.cmpxchg_u() =>
i64.atomic.rmw16.cmpxchg_u() =>
i64.atomic.rmw32.cmpxchg_u() =>
;;; STDOUT ;;)
